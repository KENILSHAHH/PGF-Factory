{"id":"4c2049515c9688d8ecbe428cfd1db513","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/Counters.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/FundingContract.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n\nerror FundingContract__TransferFailed();\nerror FundingContract__NotEnoughETH();\nerror FundingContract__NotGroupFunding();\n\ncontract FundingContract is ERC721, Ownable {\n\n    using SafeMath for uint256;\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIds;\n    Counters.Counter private _withdrawers;\n\n    uint256 private s_totalAmount;\n    uint256 private s_withdrawalFee;\n    uint256 private s_vestingPeriod;\n    bool private _isGroupWithdrawal;\n\n    mapping(address => uint256) private s_addressToAmountFunded;\n    address[] s_funders;\n\n    mapping(uint256 => mapping(address => bool)) private s_requestForWithdrawal; \n\n    \n\n    modifier onlyGroupFunding() {\n        if(!_isGroupWithdrawal){\n            revert FundingContract__NotGroupFunding();\n        }\n       _;\n    }\n\n    constructor(\n        uint256 totalFunding,\n        uint256 withdrawalFee,\n        uint256 vestingPeriod,\n        bool isGroupWithdrawal\n    ) ERC721('FundingContractToken', 'FCT'){\n\n        s_totalAmount = totalFunding;\n        s_withdrawalFee = withdrawalFee;\n        s_vestingPeriod = vestingPeriod;\n        _isGroupWithdrawal = isGroupWithdrawal;\n    }\n\n\n\n    function depositFunds() public payable{\n        \n        uint256 minFundingAmount = getMinimumFundingAmount();\n        uint256 currentTokenId = _tokenIds.current();\n\n        if(msg.value <= minFundingAmount){\n            revert FundingContract__NotEnoughETH();\n        }\n        s_addressToAmountFunded[msg.sender] = msg.value;\n        s_funders.push(msg.sender);\n        _safeMint(msg.sender, currentTokenId);\n        _tokenIds.increment();\n        \n\n    }\n\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory){\n        /**\n         *  TODO \n         * \n         */\n    }\n\n    function claim() public {\n        /**\n         * TODO\n         * \n         */\n    }\n\n    function requestForWithdrawal(uint256 tokenId) public onlyGroupFunding {\n        s_requestForWithdrawal[tokenId][msg.sender] = true;\n        _withdrawers.increment();\n    }\n\n    // Receive any funds sent to the contract\n    receive() external payable {}\n\n    function withdrawalCheck() public onlyGroupFunding returns(bool){\n        uint256 numberOfWithdrawers = _withdrawers.current();\n        uint256 withdrawalLimit = s_funders.length.mul(60).div(100);\n        if(numberOfWithdrawers >= withdrawalLimit){\n            return true;\n        }\n        return false;\n    }\n\n\n\n    function withdrawFunds() public onlyOwner{\n        if(_isGroupWithdrawal){\n            require(withdrawalCheck(), 'There is no majority approval to withdraw');\n        }\n        uint256 amount = address(this).balance;\n        (bool success, ) = payable(msg.sender).call{value:amount}(\"\");\n        if(!success){\n            revert FundingContract__TransferFailed();\n        }\n    }\n\n    function getMinimumFundingAmount() public view returns(uint256){\n        return s_totalAmount.div(s_vestingPeriod);\n    }\n\n    function getTotalAmount() public view returns(uint256){\n        return s_totalAmount;\n    }\n\n\n    function getWithdrawalFee() public view returns(uint256){\n        return s_withdrawalFee;\n    }\n\n    function getVestingPeriod() public view returns(uint256){\n        return s_vestingPeriod;\n    }\n\n    function getIsGroupWithdrawal() public view returns(bool){\n        return _isGroupWithdrawal;\n    }\n\n    function getAddressToAmountFunded(address funder) public view returns(uint256){\n        return s_addressToAmountFunded[funder];\n    }\n\n    function getFunder(uint256 index) public view returns(address){\n        return s_funders[index];\n    }\n\n\n\n}"},"contracts/PGFFactory.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./FundingContract.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\ncontract PGFFactory is AccessControlEnumerableUpgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable{\n\n    // State Variable\n    uint256 public s_creationFee;\n    address public s_payoutAddress;\n    uint256 public s_fundingId;\n    mapping(uint => address) private s_fundingIdToAddress;\n    uint256 public s_contractBalance;\n    \n    // Constant variables\n    bytes32 public constant PAYOUTADDRESS_ROLE = keccak256(\"PAYOUTADDRESS_ROLE\");\n    bytes32 public constant CREATIONFEE_ROLE = keccak256(\"CREATIONFEE_ROLE\");\n\n    // Events\n    event FundingCreated (\n        address indexed contractAddress,\n        uint256 indexed totalFunding,\n        uint256 indexed vestingPeriod,\n        uint256 withdrawalFee\n    );\n\n    event Withdrawed (\n        address indexed payoutAddress,\n        uint256 indexed amount\n    );\n\n    event CreationFeeChanged (\n        uint256 indexed newCreationFee\n    );\n\n    event PayoutAddressChanged (\n        address indexed newPayoutAddress\n    );\n\n\n    // Modifiers\n    modifier isEnoughEther() {\n        require(msg.value>= s_creationFee,\"Ether sent should be equal or more than creation fees\");\n        _;\n    }\n\n   function initialize(uint256 _creationFee, address _payoutAddress) initializer public {\n        s_creationFee = _creationFee;\n        s_payoutAddress = _payoutAddress;\n        s_fundingId = 0;\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function _authorizeUpgrade(address) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\n\n    // External Function\n    function createFunding(uint256 _totalFunding, uint256 _withdrawalFee, uint256 _vestingPeriod,bool _isGroupWithdrawal) external payable isEnoughEther {\n        FundingContract fundingContract = new FundingContract(_totalFunding,_withdrawalFee,_vestingPeriod,_isGroupWithdrawal);\n        s_fundingIdToAddress[s_fundingId] = address(fundingContract);\n        s_fundingId++;\n        s_contractBalance += msg.value;\n        emit FundingCreated(address(fundingContract), _totalFunding, _vestingPeriod, _withdrawalFee);\n    }\n\n    function withdraw() external nonReentrant {\n        address payoutAddress = s_payoutAddress;\n        uint256 contractBalance = s_contractBalance;\n        (bool success, ) = payable(payoutAddress).call{value:contractBalance}(\"\");\n        require(success,\"Withdraw not successfull\");\n        s_contractBalance = 0;\n        emit Withdrawed(payoutAddress, contractBalance);\n    }\n\n    // Setter Functions\n    function setCreationFee(uint256 _creationFee) external onlyRole(CREATIONFEE_ROLE) {\n        s_creationFee = _creationFee;\n        emit CreationFeeChanged(_creationFee);\n    }\n\n    function setPayoutAddress(address _payoutAddress) external onlyRole(PAYOUTADDRESS_ROLE) {\n        require(_payoutAddress != address(0),\"Address cant be zero\");\n        s_payoutAddress = _payoutAddress;\n        emit PayoutAddressChanged(_payoutAddress);\n    }\n\n    // View Functions\n    function getAddress(uint256 _fundingId) external view returns(address){\n        return s_fundingIdToAddress[_fundingId];\n    }\n}"}},"settings":{"optimizer":{"enabled":true,"runs":75},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to view\n  --> contracts/FundingContract.sol:93:5:\n   |\n93 |     function withdrawalCheck() public onlyGroupFunding returns(bool){\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to view","severity":"warning","sourceLocation":{"end":2726,"file":"contracts/FundingContract.sol","start":2415},"type":"Warning"}],"sources":{"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol","exportedSymbols":{"AccessControlEnumerableUpgradeable":[144],"AccessControlUpgradeable":[480],"AddressUpgradeable":[1629],"ContextUpgradeable":[1671],"ERC165Upgradeable":[1950],"EnumerableSetUpgradeable":[3440],"IAccessControlEnumerableUpgradeable":[505],"IAccessControlUpgradeable":[578],"IERC165Upgradeable":[1962],"Initializable":[1136],"MathUpgradeable":[2827],"StringsUpgradeable":[1906]},"id":145,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol","file":"./IAccessControlEnumerableUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":145,"sourceUnit":506,"src":"143:51:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","file":"./AccessControlUpgradeable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":145,"sourceUnit":481,"src":"195:40:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol","file":"../utils/structs/EnumerableSetUpgradeable.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":145,"sourceUnit":3441,"src":"236:55:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":145,"sourceUnit":1137,"src":"292:42:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":7,"name":"Initializable","nameLocations":["487:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":1136,"src":"487:13:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"487:13:0"},{"baseName":{"id":9,"name":"IAccessControlEnumerableUpgradeable","nameLocations":["502:35:0"],"nodeType":"IdentifierPath","referencedDeclaration":505,"src":"502:35:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"502:35:0"},{"baseName":{"id":11,"name":"AccessControlUpgradeable","nameLocations":["539:24:0"],"nodeType":"IdentifierPath","referencedDeclaration":480,"src":"539:24:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"539:24:0"}],"canonicalName":"AccessControlEnumerableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":6,"nodeType":"StructuredDocumentation","src":"336:94:0","text":" @dev Extension of {AccessControl} that allows enumerating the members of each role."},"fullyImplemented":true,"id":144,"linearizedBaseContracts":[144,480,1950,1962,505,578,1671,1136],"name":"AccessControlEnumerableUpgradeable","nameLocation":"449:34:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":17,"nodeType":"Block","src":"638:7:0","statements":[]},"id":18,"implemented":true,"kind":"function","modifiers":[{"id":15,"kind":"modifierInvocation","modifierName":{"id":14,"name":"onlyInitializing","nameLocations":["621:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":1081,"src":"621:16:0"},"nodeType":"ModifierInvocation","src":"621:16:0"}],"name":"__AccessControlEnumerable_init","nameLocation":"579:30:0","nodeType":"FunctionDefinition","parameters":{"id":13,"nodeType":"ParameterList","parameters":[],"src":"609:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"638:0:0"},"scope":144,"src":"570:75:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":23,"nodeType":"Block","src":"729:7:0","statements":[]},"id":24,"implemented":true,"kind":"function","modifiers":[{"id":21,"kind":"modifierInvocation","modifierName":{"id":20,"name":"onlyInitializing","nameLocations":["712:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":1081,"src":"712:16:0"},"nodeType":"ModifierInvocation","src":"712:16:0"}],"name":"__AccessControlEnumerable_init_unchained","nameLocation":"660:40:0","nodeType":"FunctionDefinition","parameters":{"id":19,"nodeType":"ParameterList","parameters":[],"src":"700:2:0"},"returnParameters":{"id":22,"nodeType":"ParameterList","parameters":[],"src":"729:0:0"},"scope":144,"src":"651:85:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"global":false,"id":28,"libraryName":{"id":25,"name":"EnumerableSetUpgradeable","nameLocations":["747:24:0"],"nodeType":"IdentifierPath","referencedDeclaration":3440,"src":"747:24:0"},"nodeType":"UsingForDirective","src":"741:71:0","typeName":{"id":27,"nodeType":"UserDefinedTypeName","pathNode":{"id":26,"name":"EnumerableSetUpgradeable.AddressSet","nameLocations":["776:24:0","801:10:0"],"nodeType":"IdentifierPath","referencedDeclaration":3153,"src":"776:35:0"},"referencedDeclaration":3153,"src":"776:35:0","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}}},{"constant":false,"id":33,"mutability":"mutable","name":"_roleMembers","nameLocation":"882:12:0","nodeType":"VariableDeclaration","scope":144,"src":"818:76:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3153_storage_$","typeString":"mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"},"typeName":{"id":32,"keyType":{"id":29,"name":"bytes32","nodeType":"ElementaryTypeName","src":"826:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"818:55:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3153_storage_$","typeString":"mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"},"valueType":{"id":31,"nodeType":"UserDefinedTypeName","pathNode":{"id":30,"name":"EnumerableSetUpgradeable.AddressSet","nameLocations":["837:24:0","862:10:0"],"nodeType":"IdentifierPath","referencedDeclaration":3153,"src":"837:35:0"},"referencedDeclaration":3153,"src":"837:35:0","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}}},"visibility":"private"},{"baseFunctions":[220],"body":{"id":54,"nodeType":"Block","src":"1053:132:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":52,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":42,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"1070:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":44,"name":"IAccessControlEnumerableUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"1090:35:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlEnumerableUpgradeable_$505_$","typeString":"type(contract IAccessControlEnumerableUpgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControlEnumerableUpgradeable_$505_$","typeString":"type(contract IAccessControlEnumerableUpgradeable)"}],"id":43,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1085:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":45,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1085:41:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControlEnumerableUpgradeable_$505","typeString":"type(contract IAccessControlEnumerableUpgradeable)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1127:11:0","memberName":"interfaceId","nodeType":"MemberAccess","src":"1085:53:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1070:68:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":50,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"1166:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":48,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1142:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlEnumerableUpgradeable_$144_$","typeString":"type(contract super AccessControlEnumerableUpgradeable)"}},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1148:17:0","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":220,"src":"1142:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1142:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1070:108:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":41,"id":53,"nodeType":"Return","src":"1063:115:0"}]},"documentation":{"id":34,"nodeType":"StructuredDocumentation","src":"901:56:0","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":55,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"971:17:0","nodeType":"FunctionDefinition","overrides":{"id":38,"nodeType":"OverrideSpecifier","overrides":[],"src":"1029:8:0"},"parameters":{"id":37,"nodeType":"ParameterList","parameters":[{"constant":false,"id":36,"mutability":"mutable","name":"interfaceId","nameLocation":"996:11:0","nodeType":"VariableDeclaration","scope":55,"src":"989:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":35,"name":"bytes4","nodeType":"ElementaryTypeName","src":"989:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"988:20:0"},"returnParameters":{"id":41,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":55,"src":"1047:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":39,"name":"bool","nodeType":"ElementaryTypeName","src":"1047:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1046:6:0"},"scope":144,"src":"962:223:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[496],"body":{"id":73,"nodeType":"Block","src":"1869:52:0","statements":[{"expression":{"arguments":[{"id":70,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":60,"src":"1908:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":66,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"1886:12:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3153_storage_$","typeString":"mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet storage ref)"}},"id":68,"indexExpression":{"id":67,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"1899:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1886:18:0","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage","typeString":"struct EnumerableSetUpgradeable.AddressSet storage ref"}},"id":69,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1905:2:0","memberName":"at","nodeType":"MemberAccess","referencedDeclaration":3276,"src":"1886:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$3153_storage_ptr_$_t_uint256_$returns$_t_address_$bound_to$_t_struct$_AddressSet_$3153_storage_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.AddressSet storage pointer,uint256) view returns (address)"}},"id":71,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1886:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":65,"id":72,"nodeType":"Return","src":"1879:35:0"}]},"documentation":{"id":56,"nodeType":"StructuredDocumentation","src":"1191:574:0","text":" @dev Returns one of the accounts that have `role`. `index` must be a\n value between 0 and {getRoleMemberCount}, non-inclusive.\n Role bearers are not sorted in any particular way, and their ordering may\n change at any point.\n WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n you perform all queries on the same block. See the following\n https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n for more information."},"functionSelector":"9010d07c","id":74,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleMember","nameLocation":"1779:13:0","nodeType":"FunctionDefinition","overrides":{"id":62,"nodeType":"OverrideSpecifier","overrides":[],"src":"1842:8:0"},"parameters":{"id":61,"nodeType":"ParameterList","parameters":[{"constant":false,"id":58,"mutability":"mutable","name":"role","nameLocation":"1801:4:0","nodeType":"VariableDeclaration","scope":74,"src":"1793:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":57,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1793:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":60,"mutability":"mutable","name":"index","nameLocation":"1815:5:0","nodeType":"VariableDeclaration","scope":74,"src":"1807:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":59,"name":"uint256","nodeType":"ElementaryTypeName","src":"1807:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1792:29:0"},"returnParameters":{"id":65,"nodeType":"ParameterList","parameters":[{"constant":false,"id":64,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":74,"src":"1860:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":63,"name":"address","nodeType":"ElementaryTypeName","src":"1860:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1859:9:0"},"scope":144,"src":"1770:151:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[504],"body":{"id":89,"nodeType":"Block","src":"2178:51:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":83,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"2195:12:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3153_storage_$","typeString":"mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet storage ref)"}},"id":85,"indexExpression":{"id":84,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"2208:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2195:18:0","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage","typeString":"struct EnumerableSetUpgradeable.AddressSet storage ref"}},"id":86,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2214:6:0","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":3249,"src":"2195:25:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$3153_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_AddressSet_$3153_storage_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.AddressSet storage pointer) view returns (uint256)"}},"id":87,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2195:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":82,"id":88,"nodeType":"Return","src":"2188:34:0"}]},"documentation":{"id":75,"nodeType":"StructuredDocumentation","src":"1927:157:0","text":" @dev Returns the number of accounts that have `role`. Can be used\n together with {getRoleMember} to enumerate all bearers of a role."},"functionSelector":"ca15c873","id":90,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleMemberCount","nameLocation":"2098:18:0","nodeType":"FunctionDefinition","overrides":{"id":79,"nodeType":"OverrideSpecifier","overrides":[],"src":"2151:8:0"},"parameters":{"id":78,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77,"mutability":"mutable","name":"role","nameLocation":"2125:4:0","nodeType":"VariableDeclaration","scope":90,"src":"2117:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":76,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2117:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2116:14:0"},"returnParameters":{"id":82,"nodeType":"ParameterList","parameters":[{"constant":false,"id":81,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":90,"src":"2169:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":80,"name":"uint256","nodeType":"ElementaryTypeName","src":"2169:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2168:9:0"},"scope":144,"src":"2089:140:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[443],"body":{"id":113,"nodeType":"Block","src":"2394:89:0","statements":[{"expression":{"arguments":[{"id":102,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"2421:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":103,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"2427:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":99,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2404:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlEnumerableUpgradeable_$144_$","typeString":"type(contract super AccessControlEnumerableUpgradeable)"}},"id":101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2410:10:0","memberName":"_grantRole","nodeType":"MemberAccess","referencedDeclaration":443,"src":"2404:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2404:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":105,"nodeType":"ExpressionStatement","src":"2404:31:0"},{"expression":{"arguments":[{"id":110,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"2468:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":106,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"2445:12:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3153_storage_$","typeString":"mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet storage ref)"}},"id":108,"indexExpression":{"id":107,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"2458:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2445:18:0","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage","typeString":"struct EnumerableSetUpgradeable.AddressSet storage ref"}},"id":109,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2464:3:0","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":3180,"src":"2445:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$3153_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$3153_storage_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.AddressSet storage pointer,address) returns (bool)"}},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2445:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":112,"nodeType":"ExpressionStatement","src":"2445:31:0"}]},"documentation":{"id":91,"nodeType":"StructuredDocumentation","src":"2235:77:0","text":" @dev Overload {_grantRole} to track enumerable memberships"},"id":114,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"2326:10:0","nodeType":"FunctionDefinition","overrides":{"id":97,"nodeType":"OverrideSpecifier","overrides":[],"src":"2385:8:0"},"parameters":{"id":96,"nodeType":"ParameterList","parameters":[{"constant":false,"id":93,"mutability":"mutable","name":"role","nameLocation":"2345:4:0","nodeType":"VariableDeclaration","scope":114,"src":"2337:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":92,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2337:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":95,"mutability":"mutable","name":"account","nameLocation":"2359:7:0","nodeType":"VariableDeclaration","scope":114,"src":"2351:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":94,"name":"address","nodeType":"ElementaryTypeName","src":"2351:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2336:31:0"},"returnParameters":{"id":98,"nodeType":"ParameterList","parameters":[],"src":"2394:0:0"},"scope":144,"src":"2317:166:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[474],"body":{"id":137,"nodeType":"Block","src":"2650:93:0","statements":[{"expression":{"arguments":[{"id":126,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"2678:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":127,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"2684:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":123,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2660:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlEnumerableUpgradeable_$144_$","typeString":"type(contract super AccessControlEnumerableUpgradeable)"}},"id":125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2666:11:0","memberName":"_revokeRole","nodeType":"MemberAccess","referencedDeclaration":474,"src":"2660:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2660:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":129,"nodeType":"ExpressionStatement","src":"2660:32:0"},{"expression":{"arguments":[{"id":134,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"2728:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":130,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"2702:12:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3153_storage_$","typeString":"mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet storage ref)"}},"id":132,"indexExpression":{"id":131,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"2715:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2702:18:0","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage","typeString":"struct EnumerableSetUpgradeable.AddressSet storage ref"}},"id":133,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2721:6:0","memberName":"remove","nodeType":"MemberAccess","referencedDeclaration":3207,"src":"2702:25:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$3153_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$3153_storage_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.AddressSet storage pointer,address) returns (bool)"}},"id":135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2702:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":136,"nodeType":"ExpressionStatement","src":"2702:34:0"}]},"documentation":{"id":115,"nodeType":"StructuredDocumentation","src":"2489:78:0","text":" @dev Overload {_revokeRole} to track enumerable memberships"},"id":138,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"2581:11:0","nodeType":"FunctionDefinition","overrides":{"id":121,"nodeType":"OverrideSpecifier","overrides":[],"src":"2641:8:0"},"parameters":{"id":120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":117,"mutability":"mutable","name":"role","nameLocation":"2601:4:0","nodeType":"VariableDeclaration","scope":138,"src":"2593:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":116,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2593:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":119,"mutability":"mutable","name":"account","nameLocation":"2615:7:0","nodeType":"VariableDeclaration","scope":138,"src":"2607:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":118,"name":"address","nodeType":"ElementaryTypeName","src":"2607:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2592:31:0"},"returnParameters":{"id":122,"nodeType":"ParameterList","parameters":[],"src":"2650:0:0"},"scope":144,"src":"2572:171:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":139,"nodeType":"StructuredDocumentation","src":"2749:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":143,"mutability":"mutable","name":"__gap","nameLocation":"3028:5:0","nodeType":"VariableDeclaration","scope":144,"src":"3008:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":140,"name":"uint256","nodeType":"ElementaryTypeName","src":"3008:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":142,"length":{"hexValue":"3439","id":141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3016:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3008:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":145,"src":"431:2605:0","usedErrors":[]}],"src":"118:2919:0"},"id":0},"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","exportedSymbols":{"AccessControlUpgradeable":[480],"AddressUpgradeable":[1629],"ContextUpgradeable":[1671],"ERC165Upgradeable":[1950],"IAccessControlUpgradeable":[578],"IERC165Upgradeable":[1962],"Initializable":[1136],"MathUpgradeable":[2827],"StringsUpgradeable":[1906]},"id":481,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":146,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:1"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","file":"./IAccessControlUpgradeable.sol","id":147,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":481,"sourceUnit":579,"src":"133:41:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":148,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":481,"sourceUnit":1672,"src":"175:41:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../utils/StringsUpgradeable.sol","id":149,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":481,"sourceUnit":1907,"src":"217:41:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","file":"../utils/introspection/ERC165Upgradeable.sol","id":150,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":481,"sourceUnit":1951,"src":"259:54:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":151,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":481,"sourceUnit":1137,"src":"314:42:1","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":153,"name":"Initializable","nameLocations":["1939:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":1136,"src":"1939:13:1"},"id":154,"nodeType":"InheritanceSpecifier","src":"1939:13:1"},{"baseName":{"id":155,"name":"ContextUpgradeable","nameLocations":["1954:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":1671,"src":"1954:18:1"},"id":156,"nodeType":"InheritanceSpecifier","src":"1954:18:1"},{"baseName":{"id":157,"name":"IAccessControlUpgradeable","nameLocations":["1974:25:1"],"nodeType":"IdentifierPath","referencedDeclaration":578,"src":"1974:25:1"},"id":158,"nodeType":"InheritanceSpecifier","src":"1974:25:1"},{"baseName":{"id":159,"name":"ERC165Upgradeable","nameLocations":["2001:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"2001:17:1"},"id":160,"nodeType":"InheritanceSpecifier","src":"2001:17:1"}],"canonicalName":"AccessControlUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":152,"nodeType":"StructuredDocumentation","src":"358:1534:1","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it."},"fullyImplemented":true,"id":480,"linearizedBaseContracts":[480,1950,1962,578,1671,1136],"name":"AccessControlUpgradeable","nameLocation":"1911:24:1","nodeType":"ContractDefinition","nodes":[{"body":{"id":165,"nodeType":"Block","src":"2083:7:1","statements":[]},"id":166,"implemented":true,"kind":"function","modifiers":[{"id":163,"kind":"modifierInvocation","modifierName":{"id":162,"name":"onlyInitializing","nameLocations":["2066:16:1"],"nodeType":"IdentifierPath","referencedDeclaration":1081,"src":"2066:16:1"},"nodeType":"ModifierInvocation","src":"2066:16:1"}],"name":"__AccessControl_init","nameLocation":"2034:20:1","nodeType":"FunctionDefinition","parameters":{"id":161,"nodeType":"ParameterList","parameters":[],"src":"2054:2:1"},"returnParameters":{"id":164,"nodeType":"ParameterList","parameters":[],"src":"2083:0:1"},"scope":480,"src":"2025:65:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":171,"nodeType":"Block","src":"2164:7:1","statements":[]},"id":172,"implemented":true,"kind":"function","modifiers":[{"id":169,"kind":"modifierInvocation","modifierName":{"id":168,"name":"onlyInitializing","nameLocations":["2147:16:1"],"nodeType":"IdentifierPath","referencedDeclaration":1081,"src":"2147:16:1"},"nodeType":"ModifierInvocation","src":"2147:16:1"}],"name":"__AccessControl_init_unchained","nameLocation":"2105:30:1","nodeType":"FunctionDefinition","parameters":{"id":167,"nodeType":"ParameterList","parameters":[],"src":"2135:2:1"},"returnParameters":{"id":170,"nodeType":"ParameterList","parameters":[],"src":"2164:0:1"},"scope":480,"src":"2096:75:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"canonicalName":"AccessControlUpgradeable.RoleData","id":179,"members":[{"constant":false,"id":176,"mutability":"mutable","name":"members","nameLocation":"2227:7:1","nodeType":"VariableDeclaration","scope":179,"src":"2202:32:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":175,"keyType":{"id":173,"name":"address","nodeType":"ElementaryTypeName","src":"2210:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2202:24:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":174,"name":"bool","nodeType":"ElementaryTypeName","src":"2221:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":178,"mutability":"mutable","name":"adminRole","nameLocation":"2252:9:1","nodeType":"VariableDeclaration","scope":179,"src":"2244:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":177,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2244:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2183:8:1","nodeType":"StructDefinition","scope":480,"src":"2176:92:1","visibility":"public"},{"constant":false,"id":184,"mutability":"mutable","name":"_roles","nameLocation":"2311:6:1","nodeType":"VariableDeclaration","scope":480,"src":"2274:43:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$179_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"typeName":{"id":183,"keyType":{"id":180,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2282:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2274:28:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$179_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"valueType":{"id":182,"nodeType":"UserDefinedTypeName","pathNode":{"id":181,"name":"RoleData","nameLocations":["2293:8:1"],"nodeType":"IdentifierPath","referencedDeclaration":179,"src":"2293:8:1"},"referencedDeclaration":179,"src":"2293:8:1","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$179_storage_ptr","typeString":"struct AccessControlUpgradeable.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":187,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2348:18:1","nodeType":"VariableDeclaration","scope":480,"src":"2324:49:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":185,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2369:4:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":197,"nodeType":"Block","src":"2792:44:1","statements":[{"expression":{"arguments":[{"id":193,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"2813:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":192,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[252,291],"referencedDeclaration":252,"src":"2802:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2802:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":195,"nodeType":"ExpressionStatement","src":"2802:16:1"},{"id":196,"nodeType":"PlaceholderStatement","src":"2828:1:1"}]},"documentation":{"id":188,"nodeType":"StructuredDocumentation","src":"2380:375:1","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"},"id":198,"name":"onlyRole","nameLocation":"2769:8:1","nodeType":"ModifierDefinition","parameters":{"id":191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":190,"mutability":"mutable","name":"role","nameLocation":"2786:4:1","nodeType":"VariableDeclaration","scope":198,"src":"2778:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":189,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2778:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2777:14:1"},"src":"2760:76:1","virtual":false,"visibility":"internal"},{"baseFunctions":[1944],"body":{"id":219,"nodeType":"Block","src":"2994:122:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":207,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":201,"src":"3011:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":209,"name":"IAccessControlUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"3031:25:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$578_$","typeString":"type(contract IAccessControlUpgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$578_$","typeString":"type(contract IAccessControlUpgradeable)"}],"id":208,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3026:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3026:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControlUpgradeable_$578","typeString":"type(contract IAccessControlUpgradeable)"}},"id":211,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3058:11:1","memberName":"interfaceId","nodeType":"MemberAccess","src":"3026:43:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"3011:58:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":215,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":201,"src":"3097:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":213,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"3073:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlUpgradeable_$480_$","typeString":"type(contract super AccessControlUpgradeable)"}},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3079:17:1","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1944,"src":"3073:23:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3073:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3011:98:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":206,"id":218,"nodeType":"Return","src":"3004:105:1"}]},"documentation":{"id":199,"nodeType":"StructuredDocumentation","src":"2842:56:1","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":220,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2912:17:1","nodeType":"FunctionDefinition","overrides":{"id":203,"nodeType":"OverrideSpecifier","overrides":[],"src":"2970:8:1"},"parameters":{"id":202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":201,"mutability":"mutable","name":"interfaceId","nameLocation":"2937:11:1","nodeType":"VariableDeclaration","scope":220,"src":"2930:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":200,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2930:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2929:20:1"},"returnParameters":{"id":206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":205,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":220,"src":"2988:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":204,"name":"bool","nodeType":"ElementaryTypeName","src":"2988:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2987:6:1"},"scope":480,"src":"2903:213:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[545],"body":{"id":238,"nodeType":"Block","src":"3295:53:1","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":231,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"3312:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$179_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":233,"indexExpression":{"id":232,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"3319:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3312:12:1","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$179_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":234,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3325:7:1","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":176,"src":"3312:20:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":236,"indexExpression":{"id":235,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"3333:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3312:29:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":230,"id":237,"nodeType":"Return","src":"3305:36:1"}]},"documentation":{"id":221,"nodeType":"StructuredDocumentation","src":"3122:76:1","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":239,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"3212:7:1","nodeType":"FunctionDefinition","overrides":{"id":227,"nodeType":"OverrideSpecifier","overrides":[],"src":"3271:8:1"},"parameters":{"id":226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":223,"mutability":"mutable","name":"role","nameLocation":"3228:4:1","nodeType":"VariableDeclaration","scope":239,"src":"3220:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":222,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3220:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":225,"mutability":"mutable","name":"account","nameLocation":"3242:7:1","nodeType":"VariableDeclaration","scope":239,"src":"3234:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":224,"name":"address","nodeType":"ElementaryTypeName","src":"3234:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3219:31:1"},"returnParameters":{"id":230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":229,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":239,"src":"3289:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":228,"name":"bool","nodeType":"ElementaryTypeName","src":"3289:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3288:6:1"},"scope":480,"src":"3203:145:1","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":251,"nodeType":"Block","src":"3698:47:1","statements":[{"expression":{"arguments":[{"id":246,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"3719:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":247,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"3725:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3725:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":245,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[252,291],"referencedDeclaration":291,"src":"3708:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3708:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":250,"nodeType":"ExpressionStatement","src":"3708:30:1"}]},"documentation":{"id":240,"nodeType":"StructuredDocumentation","src":"3354:283:1","text":" @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"},"id":252,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3651:10:1","nodeType":"FunctionDefinition","parameters":{"id":243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":242,"mutability":"mutable","name":"role","nameLocation":"3670:4:1","nodeType":"VariableDeclaration","scope":252,"src":"3662:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":241,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3662:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3661:14:1"},"returnParameters":{"id":244,"nodeType":"ParameterList","parameters":[],"src":"3698:0:1"},"scope":480,"src":"3642:103:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":290,"nodeType":"Block","src":"4099:428:1","statements":[{"condition":{"id":264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4113:23:1","subExpression":{"arguments":[{"id":261,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"4122:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":262,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":257,"src":"4128:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":260,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"4114:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4114:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":289,"nodeType":"IfStatement","src":"4109:412:1","trueBody":{"id":288,"nodeType":"Block","src":"4138:383:1","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","id":270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4246:25:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},"value":"AccessControl: account "},{"arguments":[{"id":273,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":257,"src":"4328:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":271,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"4297:18:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$1906_$","typeString":"type(library StringsUpgradeable)"}},"id":272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4316:11:1","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":1905,"src":"4297:30:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4297:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"206973206d697373696e6720726f6c6520","id":275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4362:19:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},"value":" is missing role "},{"arguments":[{"arguments":[{"id":280,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"4446:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":279,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4438:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":278,"name":"uint256","nodeType":"ElementaryTypeName","src":"4438:7:1","typeDescriptions":{}}},"id":281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4438:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3332","id":282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4453:2:1","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":276,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"4407:18:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$1906_$","typeString":"type(library StringsUpgradeable)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4426:11:1","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":1885,"src":"4407:30:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4407:49:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":268,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4204:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4208:12:1","memberName":"encodePacked","nodeType":"MemberAccess","src":"4204:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4204:274:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4176:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":266,"name":"string","nodeType":"ElementaryTypeName","src":"4176:6:1","typeDescriptions":{}}},"id":285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4176:320:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":265,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"4152:6:1","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4152:358:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":287,"nodeType":"ExpressionStatement","src":"4152:358:1"}]}}]},"documentation":{"id":253,"nodeType":"StructuredDocumentation","src":"3751:270:1","text":" @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"},"id":291,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"4035:10:1","nodeType":"FunctionDefinition","parameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":255,"mutability":"mutable","name":"role","nameLocation":"4054:4:1","nodeType":"VariableDeclaration","scope":291,"src":"4046:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":254,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4046:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":257,"mutability":"mutable","name":"account","nameLocation":"4068:7:1","nodeType":"VariableDeclaration","scope":291,"src":"4060:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":256,"name":"address","nodeType":"ElementaryTypeName","src":"4060:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4045:31:1"},"returnParameters":{"id":259,"nodeType":"ParameterList","parameters":[],"src":"4099:0:1"},"scope":480,"src":"4026:501:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[553],"body":{"id":305,"nodeType":"Block","src":"4791:46:1","statements":[{"expression":{"expression":{"baseExpression":{"id":300,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"4808:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$179_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":302,"indexExpression":{"id":301,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"4815:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4808:12:1","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$179_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":303,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4821:9:1","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":178,"src":"4808:22:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":299,"id":304,"nodeType":"Return","src":"4801:29:1"}]},"documentation":{"id":292,"nodeType":"StructuredDocumentation","src":"4533:170:1","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":306,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4717:12:1","nodeType":"FunctionDefinition","overrides":{"id":296,"nodeType":"OverrideSpecifier","overrides":[],"src":"4764:8:1"},"parameters":{"id":295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"role","nameLocation":"4738:4:1","nodeType":"VariableDeclaration","scope":306,"src":"4730:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":293,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4730:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4729:14:1"},"returnParameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":298,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":306,"src":"4782:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":297,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4782:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4781:9:1"},"scope":480,"src":"4708:129:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[561],"body":{"id":325,"nodeType":"Block","src":"5236:42:1","statements":[{"expression":{"arguments":[{"id":321,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"5257:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":322,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"5263:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":320,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"5246:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5246:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":324,"nodeType":"ExpressionStatement","src":"5246:25:1"}]},"documentation":{"id":307,"nodeType":"StructuredDocumentation","src":"4843:285:1","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":326,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":316,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"5229:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":315,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"5216:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5216:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":318,"kind":"modifierInvocation","modifierName":{"id":314,"name":"onlyRole","nameLocations":["5207:8:1"],"nodeType":"IdentifierPath","referencedDeclaration":198,"src":"5207:8:1"},"nodeType":"ModifierInvocation","src":"5207:28:1"}],"name":"grantRole","nameLocation":"5142:9:1","nodeType":"FunctionDefinition","overrides":{"id":313,"nodeType":"OverrideSpecifier","overrides":[],"src":"5198:8:1"},"parameters":{"id":312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":309,"mutability":"mutable","name":"role","nameLocation":"5160:4:1","nodeType":"VariableDeclaration","scope":326,"src":"5152:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":308,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5152:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":311,"mutability":"mutable","name":"account","nameLocation":"5174:7:1","nodeType":"VariableDeclaration","scope":326,"src":"5166:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":310,"name":"address","nodeType":"ElementaryTypeName","src":"5166:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5151:31:1"},"returnParameters":{"id":319,"nodeType":"ParameterList","parameters":[],"src":"5236:0:1"},"scope":480,"src":"5133:145:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[569],"body":{"id":345,"nodeType":"Block","src":"5662:43:1","statements":[{"expression":{"arguments":[{"id":341,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"5684:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":342,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"5690:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":340,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"5672:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5672:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":344,"nodeType":"ExpressionStatement","src":"5672:26:1"}]},"documentation":{"id":327,"nodeType":"StructuredDocumentation","src":"5284:269:1","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":346,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":336,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"5655:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":335,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"5642:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5642:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":338,"kind":"modifierInvocation","modifierName":{"id":334,"name":"onlyRole","nameLocations":["5633:8:1"],"nodeType":"IdentifierPath","referencedDeclaration":198,"src":"5633:8:1"},"nodeType":"ModifierInvocation","src":"5633:28:1"}],"name":"revokeRole","nameLocation":"5567:10:1","nodeType":"FunctionDefinition","overrides":{"id":333,"nodeType":"OverrideSpecifier","overrides":[],"src":"5624:8:1"},"parameters":{"id":332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":329,"mutability":"mutable","name":"role","nameLocation":"5586:4:1","nodeType":"VariableDeclaration","scope":346,"src":"5578:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":328,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5578:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":331,"mutability":"mutable","name":"account","nameLocation":"5600:7:1","nodeType":"VariableDeclaration","scope":346,"src":"5592:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":330,"name":"address","nodeType":"ElementaryTypeName","src":"5592:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5577:31:1"},"returnParameters":{"id":339,"nodeType":"ParameterList","parameters":[],"src":"5662:0:1"},"scope":480,"src":"5558:147:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[577],"body":{"id":368,"nodeType":"Block","src":"6319:137:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":356,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":351,"src":"6337:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":357,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"6348:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6348:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6337:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66","id":360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6362:49:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""},"value":"AccessControl: can only renounce roles for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""}],"id":355,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6329:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6329:83:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":362,"nodeType":"ExpressionStatement","src":"6329:83:1"},{"expression":{"arguments":[{"id":364,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"6435:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":365,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":351,"src":"6441:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":363,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"6423:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6423:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":367,"nodeType":"ExpressionStatement","src":"6423:26:1"}]},"documentation":{"id":347,"nodeType":"StructuredDocumentation","src":"5711:526:1","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":369,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"6251:12:1","nodeType":"FunctionDefinition","overrides":{"id":353,"nodeType":"OverrideSpecifier","overrides":[],"src":"6310:8:1"},"parameters":{"id":352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":349,"mutability":"mutable","name":"role","nameLocation":"6272:4:1","nodeType":"VariableDeclaration","scope":369,"src":"6264:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":348,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6264:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":351,"mutability":"mutable","name":"account","nameLocation":"6286:7:1","nodeType":"VariableDeclaration","scope":369,"src":"6278:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":350,"name":"address","nodeType":"ElementaryTypeName","src":"6278:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6263:31:1"},"returnParameters":{"id":354,"nodeType":"ParameterList","parameters":[],"src":"6319:0:1"},"scope":480,"src":"6242:214:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":382,"nodeType":"Block","src":"7209:42:1","statements":[{"expression":{"arguments":[{"id":378,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"7230:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":379,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":374,"src":"7236:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":377,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"7219:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7219:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":381,"nodeType":"ExpressionStatement","src":"7219:25:1"}]},"documentation":{"id":370,"nodeType":"StructuredDocumentation","src":"6462:674:1","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n May emit a {RoleGranted} event.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."},"id":383,"implemented":true,"kind":"function","modifiers":[],"name":"_setupRole","nameLocation":"7150:10:1","nodeType":"FunctionDefinition","parameters":{"id":375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":372,"mutability":"mutable","name":"role","nameLocation":"7169:4:1","nodeType":"VariableDeclaration","scope":383,"src":"7161:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":371,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7161:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":374,"mutability":"mutable","name":"account","nameLocation":"7183:7:1","nodeType":"VariableDeclaration","scope":383,"src":"7175:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":373,"name":"address","nodeType":"ElementaryTypeName","src":"7175:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7160:31:1"},"returnParameters":{"id":376,"nodeType":"ParameterList","parameters":[],"src":"7209:0:1"},"scope":480,"src":"7141:110:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":410,"nodeType":"Block","src":"7449:174:1","statements":[{"assignments":[392],"declarations":[{"constant":false,"id":392,"mutability":"mutable","name":"previousAdminRole","nameLocation":"7467:17:1","nodeType":"VariableDeclaration","scope":410,"src":"7459:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":391,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7459:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":396,"initialValue":{"arguments":[{"id":394,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"7500:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":393,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"7487:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7487:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7459:46:1"},{"expression":{"id":402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":397,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"7515:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$179_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":399,"indexExpression":{"id":398,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"7522:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7515:12:1","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$179_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":400,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7528:9:1","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":178,"src":"7515:22:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":401,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"7540:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7515:34:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":403,"nodeType":"ExpressionStatement","src":"7515:34:1"},{"eventCall":{"arguments":[{"id":405,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"7581:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":406,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"7587:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":407,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"7606:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":404,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":517,"src":"7564:16:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7564:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":409,"nodeType":"EmitStatement","src":"7559:57:1"}]},"documentation":{"id":384,"nodeType":"StructuredDocumentation","src":"7257:114:1","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":411,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"7385:13:1","nodeType":"FunctionDefinition","parameters":{"id":389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":386,"mutability":"mutable","name":"role","nameLocation":"7407:4:1","nodeType":"VariableDeclaration","scope":411,"src":"7399:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":385,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7399:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":388,"mutability":"mutable","name":"adminRole","nameLocation":"7421:9:1","nodeType":"VariableDeclaration","scope":411,"src":"7413:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":387,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7413:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7398:33:1"},"returnParameters":{"id":390,"nodeType":"ParameterList","parameters":[],"src":"7449:0:1"},"scope":480,"src":"7376:247:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":442,"nodeType":"Block","src":"7859:165:1","statements":[{"condition":{"id":423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7873:23:1","subExpression":{"arguments":[{"id":420,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"7882:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":421,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"7888:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":419,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"7874:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7874:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":441,"nodeType":"IfStatement","src":"7869:149:1","trueBody":{"id":440,"nodeType":"Block","src":"7898:120:1","statements":[{"expression":{"id":431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":424,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"7912:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$179_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":426,"indexExpression":{"id":425,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"7919:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7912:12:1","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$179_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":427,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7925:7:1","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":176,"src":"7912:20:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":429,"indexExpression":{"id":428,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"7933:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7912:29:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7944:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7912:36:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":432,"nodeType":"ExpressionStatement","src":"7912:36:1"},{"eventCall":{"arguments":[{"id":434,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"7979:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":435,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"7985:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":436,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"7994:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7994:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":433,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"7967:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7967:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":439,"nodeType":"EmitStatement","src":"7962:45:1"}]}}]},"documentation":{"id":412,"nodeType":"StructuredDocumentation","src":"7629:157:1","text":" @dev Grants `role` to `account`.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":443,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"7800:10:1","nodeType":"FunctionDefinition","parameters":{"id":417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":414,"mutability":"mutable","name":"role","nameLocation":"7819:4:1","nodeType":"VariableDeclaration","scope":443,"src":"7811:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":413,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7811:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":416,"mutability":"mutable","name":"account","nameLocation":"7833:7:1","nodeType":"VariableDeclaration","scope":443,"src":"7825:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":415,"name":"address","nodeType":"ElementaryTypeName","src":"7825:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7810:31:1"},"returnParameters":{"id":418,"nodeType":"ParameterList","parameters":[],"src":"7859:0:1"},"scope":480,"src":"7791:233:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":473,"nodeType":"Block","src":"8264:165:1","statements":[{"condition":{"arguments":[{"id":452,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"8286:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":453,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"8292:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":451,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"8278:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8278:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":472,"nodeType":"IfStatement","src":"8274:149:1","trueBody":{"id":471,"nodeType":"Block","src":"8302:121:1","statements":[{"expression":{"id":462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":455,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"8316:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$179_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":457,"indexExpression":{"id":456,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"8323:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8316:12:1","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$179_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":458,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8329:7:1","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":176,"src":"8316:20:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":460,"indexExpression":{"id":459,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"8337:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8316:29:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8348:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"8316:37:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":463,"nodeType":"ExpressionStatement","src":"8316:37:1"},{"eventCall":{"arguments":[{"id":465,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"8384:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":466,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"8390:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":467,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"8399:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":464,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"8372:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8372:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":470,"nodeType":"EmitStatement","src":"8367:45:1"}]}}]},"documentation":{"id":444,"nodeType":"StructuredDocumentation","src":"8030:160:1","text":" @dev Revokes `role` from `account`.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":474,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"8204:11:1","nodeType":"FunctionDefinition","parameters":{"id":449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":446,"mutability":"mutable","name":"role","nameLocation":"8224:4:1","nodeType":"VariableDeclaration","scope":474,"src":"8216:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":445,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8216:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":448,"mutability":"mutable","name":"account","nameLocation":"8238:7:1","nodeType":"VariableDeclaration","scope":474,"src":"8230:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":447,"name":"address","nodeType":"ElementaryTypeName","src":"8230:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8215:31:1"},"returnParameters":{"id":450,"nodeType":"ParameterList","parameters":[],"src":"8264:0:1"},"scope":480,"src":"8195:234:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":475,"nodeType":"StructuredDocumentation","src":"8435:254:1","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":479,"mutability":"mutable","name":"__gap","nameLocation":"8714:5:1","nodeType":"VariableDeclaration","scope":480,"src":"8694:25:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":476,"name":"uint256","nodeType":"ElementaryTypeName","src":"8694:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":478,"length":{"hexValue":"3439","id":477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8702:2:1","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"8694:11:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":481,"src":"1893:6829:1","usedErrors":[]}],"src":"108:8615:1"},"id":1},"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol","exportedSymbols":{"IAccessControlEnumerableUpgradeable":[505],"IAccessControlUpgradeable":[578]},"id":506,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":482,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"104:23:2"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","file":"./IAccessControlUpgradeable.sol","id":483,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":506,"sourceUnit":579,"src":"129:41:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":485,"name":"IAccessControlUpgradeable","nameLocations":["321:25:2"],"nodeType":"IdentifierPath","referencedDeclaration":578,"src":"321:25:2"},"id":486,"nodeType":"InheritanceSpecifier","src":"321:25:2"}],"canonicalName":"IAccessControlEnumerableUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":484,"nodeType":"StructuredDocumentation","src":"172:99:2","text":" @dev External interface of AccessControlEnumerable declared to support ERC165 detection."},"fullyImplemented":false,"id":505,"linearizedBaseContracts":[505,578],"name":"IAccessControlEnumerableUpgradeable","nameLocation":"282:35:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":487,"nodeType":"StructuredDocumentation","src":"353:574:2","text":" @dev Returns one of the accounts that have `role`. `index` must be a\n value between 0 and {getRoleMemberCount}, non-inclusive.\n Role bearers are not sorted in any particular way, and their ordering may\n change at any point.\n WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n you perform all queries on the same block. See the following\n https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n for more information."},"functionSelector":"9010d07c","id":496,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleMember","nameLocation":"941:13:2","nodeType":"FunctionDefinition","parameters":{"id":492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":489,"mutability":"mutable","name":"role","nameLocation":"963:4:2","nodeType":"VariableDeclaration","scope":496,"src":"955:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":488,"name":"bytes32","nodeType":"ElementaryTypeName","src":"955:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":491,"mutability":"mutable","name":"index","nameLocation":"977:5:2","nodeType":"VariableDeclaration","scope":496,"src":"969:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":490,"name":"uint256","nodeType":"ElementaryTypeName","src":"969:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"954:29:2"},"returnParameters":{"id":495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":494,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":496,"src":"1007:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":493,"name":"address","nodeType":"ElementaryTypeName","src":"1007:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1006:9:2"},"scope":505,"src":"932:84:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":497,"nodeType":"StructuredDocumentation","src":"1022:157:2","text":" @dev Returns the number of accounts that have `role`. Can be used\n together with {getRoleMember} to enumerate all bearers of a role."},"functionSelector":"ca15c873","id":504,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleMemberCount","nameLocation":"1193:18:2","nodeType":"FunctionDefinition","parameters":{"id":500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":499,"mutability":"mutable","name":"role","nameLocation":"1220:4:2","nodeType":"VariableDeclaration","scope":504,"src":"1212:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":498,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1212:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1211:14:2"},"returnParameters":{"id":503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":502,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":504,"src":"1249:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":501,"name":"uint256","nodeType":"ElementaryTypeName","src":"1249:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1248:9:2"},"scope":505,"src":"1184:74:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":506,"src":"272:988:2","usedErrors":[]}],"src":"104:1157:2"},"id":2},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","exportedSymbols":{"IAccessControlUpgradeable":[578]},"id":579,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":507,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"94:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControlUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":508,"nodeType":"StructuredDocumentation","src":"119:89:3","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":578,"linearizedBaseContracts":[578],"name":"IAccessControlUpgradeable","nameLocation":"219:25:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":509,"nodeType":"StructuredDocumentation","src":"251:292:3","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":517,"name":"RoleAdminChanged","nameLocation":"554:16:3","nodeType":"EventDefinition","parameters":{"id":516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":511,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"587:4:3","nodeType":"VariableDeclaration","scope":517,"src":"571:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":510,"name":"bytes32","nodeType":"ElementaryTypeName","src":"571:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":513,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"609:17:3","nodeType":"VariableDeclaration","scope":517,"src":"593:33:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":512,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":515,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"644:12:3","nodeType":"VariableDeclaration","scope":517,"src":"628:28:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":514,"name":"bytes32","nodeType":"ElementaryTypeName","src":"628:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"570:87:3"},"src":"548:110:3"},{"anonymous":false,"documentation":{"id":518,"nodeType":"StructuredDocumentation","src":"664:212:3","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":526,"name":"RoleGranted","nameLocation":"887:11:3","nodeType":"EventDefinition","parameters":{"id":525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":520,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"915:4:3","nodeType":"VariableDeclaration","scope":526,"src":"899:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":519,"name":"bytes32","nodeType":"ElementaryTypeName","src":"899:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":522,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"937:7:3","nodeType":"VariableDeclaration","scope":526,"src":"921:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":521,"name":"address","nodeType":"ElementaryTypeName","src":"921:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":524,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"962:6:3","nodeType":"VariableDeclaration","scope":526,"src":"946:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":523,"name":"address","nodeType":"ElementaryTypeName","src":"946:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"898:71:3"},"src":"881:89:3"},{"anonymous":false,"documentation":{"id":527,"nodeType":"StructuredDocumentation","src":"976:275:3","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":535,"name":"RoleRevoked","nameLocation":"1262:11:3","nodeType":"EventDefinition","parameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":529,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1290:4:3","nodeType":"VariableDeclaration","scope":535,"src":"1274:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":528,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1274:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":531,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1312:7:3","nodeType":"VariableDeclaration","scope":535,"src":"1296:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":530,"name":"address","nodeType":"ElementaryTypeName","src":"1296:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":533,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1337:6:3","nodeType":"VariableDeclaration","scope":535,"src":"1321:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":532,"name":"address","nodeType":"ElementaryTypeName","src":"1321:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1273:71:3"},"src":"1256:89:3"},{"documentation":{"id":536,"nodeType":"StructuredDocumentation","src":"1351:76:3","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":545,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1441:7:3","nodeType":"FunctionDefinition","parameters":{"id":541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":538,"mutability":"mutable","name":"role","nameLocation":"1457:4:3","nodeType":"VariableDeclaration","scope":545,"src":"1449:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":537,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1449:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":540,"mutability":"mutable","name":"account","nameLocation":"1471:7:3","nodeType":"VariableDeclaration","scope":545,"src":"1463:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":539,"name":"address","nodeType":"ElementaryTypeName","src":"1463:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1448:31:3"},"returnParameters":{"id":544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":543,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":545,"src":"1503:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":542,"name":"bool","nodeType":"ElementaryTypeName","src":"1503:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1502:6:3"},"scope":578,"src":"1432:77:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":546,"nodeType":"StructuredDocumentation","src":"1515:184:3","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":553,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"1713:12:3","nodeType":"FunctionDefinition","parameters":{"id":549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":548,"mutability":"mutable","name":"role","nameLocation":"1734:4:3","nodeType":"VariableDeclaration","scope":553,"src":"1726:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":547,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1726:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1725:14:3"},"returnParameters":{"id":552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":551,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":553,"src":"1763:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":550,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1763:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1762:9:3"},"scope":578,"src":"1704:68:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":554,"nodeType":"StructuredDocumentation","src":"1778:239:3","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":561,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2031:9:3","nodeType":"FunctionDefinition","parameters":{"id":559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":556,"mutability":"mutable","name":"role","nameLocation":"2049:4:3","nodeType":"VariableDeclaration","scope":561,"src":"2041:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":555,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2041:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":558,"mutability":"mutable","name":"account","nameLocation":"2063:7:3","nodeType":"VariableDeclaration","scope":561,"src":"2055:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":557,"name":"address","nodeType":"ElementaryTypeName","src":"2055:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2040:31:3"},"returnParameters":{"id":560,"nodeType":"ParameterList","parameters":[],"src":"2080:0:3"},"scope":578,"src":"2022:59:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":562,"nodeType":"StructuredDocumentation","src":"2087:223:3","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":569,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2324:10:3","nodeType":"FunctionDefinition","parameters":{"id":567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":564,"mutability":"mutable","name":"role","nameLocation":"2343:4:3","nodeType":"VariableDeclaration","scope":569,"src":"2335:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":563,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2335:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":566,"mutability":"mutable","name":"account","nameLocation":"2357:7:3","nodeType":"VariableDeclaration","scope":569,"src":"2349:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":565,"name":"address","nodeType":"ElementaryTypeName","src":"2349:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2334:31:3"},"returnParameters":{"id":568,"nodeType":"ParameterList","parameters":[],"src":"2374:0:3"},"scope":578,"src":"2315:60:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":570,"nodeType":"StructuredDocumentation","src":"2381:480:3","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."},"functionSelector":"36568abe","id":577,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2875:12:3","nodeType":"FunctionDefinition","parameters":{"id":575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":572,"mutability":"mutable","name":"role","nameLocation":"2896:4:3","nodeType":"VariableDeclaration","scope":577,"src":"2888:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":571,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2888:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":574,"mutability":"mutable","name":"account","nameLocation":"2910:7:3","nodeType":"VariableDeclaration","scope":577,"src":"2902:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":573,"name":"address","nodeType":"ElementaryTypeName","src":"2902:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2887:31:3"},"returnParameters":{"id":576,"nodeType":"ParameterList","parameters":[],"src":"2927:0:3"},"scope":578,"src":"2866:62:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":579,"src":"209:2721:3","usedErrors":[]}],"src":"94:2837:3"},"id":3},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","exportedSymbols":{"IERC1822ProxiableUpgradeable":[588]},"id":589,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":580,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1822ProxiableUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":581,"nodeType":"StructuredDocumentation","src":"138:203:4","text":" @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."},"fullyImplemented":false,"id":588,"linearizedBaseContracts":[588],"name":"IERC1822ProxiableUpgradeable","nameLocation":"352:28:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":582,"nodeType":"StructuredDocumentation","src":"387:438:4","text":" @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."},"functionSelector":"52d1902d","id":587,"implemented":false,"kind":"function","modifiers":[],"name":"proxiableUUID","nameLocation":"839:13:4","nodeType":"FunctionDefinition","parameters":{"id":583,"nodeType":"ParameterList","parameters":[],"src":"852:2:4"},"returnParameters":{"id":586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":585,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":587,"src":"878:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":584,"name":"bytes32","nodeType":"ElementaryTypeName","src":"878:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"877:9:4"},"scope":588,"src":"830:57:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":589,"src":"342:547:4","usedErrors":[]}],"src":"113:777:4"},"id":4},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1629],"ERC1967UpgradeUpgradeable":[957],"IBeaconUpgradeable":[967],"IERC1822ProxiableUpgradeable":[588],"Initializable":[1136],"StorageSlotUpgradeable":[1731]},"id":958,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":590,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"116:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","file":"../beacon/IBeaconUpgradeable.sol","id":591,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":958,"sourceUnit":968,"src":"141:42:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":592,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":958,"sourceUnit":589,"src":"184:56:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":593,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":958,"sourceUnit":1630,"src":"241:44:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","file":"../../utils/StorageSlotUpgradeable.sol","id":594,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":958,"sourceUnit":1732,"src":"286:48:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../utils/Initializable.sol","id":595,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":958,"sourceUnit":1137,"src":"335:36:5","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":597,"name":"Initializable","nameLocations":["657:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":1136,"src":"657:13:5"},"id":598,"nodeType":"InheritanceSpecifier","src":"657:13:5"}],"canonicalName":"ERC1967UpgradeUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":596,"nodeType":"StructuredDocumentation","src":"373:236:5","text":" @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n _Available since v4.1._\n @custom:oz-upgrades-unsafe-allow delegatecall"},"fullyImplemented":true,"id":957,"linearizedBaseContracts":[957,1136],"name":"ERC1967UpgradeUpgradeable","nameLocation":"628:25:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":603,"nodeType":"Block","src":"736:7:5","statements":[]},"id":604,"implemented":true,"kind":"function","modifiers":[{"id":601,"kind":"modifierInvocation","modifierName":{"id":600,"name":"onlyInitializing","nameLocations":["719:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":1081,"src":"719:16:5"},"nodeType":"ModifierInvocation","src":"719:16:5"}],"name":"__ERC1967Upgrade_init","nameLocation":"686:21:5","nodeType":"FunctionDefinition","parameters":{"id":599,"nodeType":"ParameterList","parameters":[],"src":"707:2:5"},"returnParameters":{"id":602,"nodeType":"ParameterList","parameters":[],"src":"736:0:5"},"scope":957,"src":"677:66:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":609,"nodeType":"Block","src":"818:7:5","statements":[]},"id":610,"implemented":true,"kind":"function","modifiers":[{"id":607,"kind":"modifierInvocation","modifierName":{"id":606,"name":"onlyInitializing","nameLocations":["801:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":1081,"src":"801:16:5"},"nodeType":"ModifierInvocation","src":"801:16:5"}],"name":"__ERC1967Upgrade_init_unchained","nameLocation":"758:31:5","nodeType":"FunctionDefinition","parameters":{"id":605,"nodeType":"ParameterList","parameters":[],"src":"789:2:5"},"returnParameters":{"id":608,"nodeType":"ParameterList","parameters":[],"src":"818:0:5"},"scope":957,"src":"749:76:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"id":613,"mutability":"constant","name":"_ROLLBACK_SLOT","nameLocation":"934:14:5","nodeType":"VariableDeclaration","scope":957,"src":"909:108:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":611,"name":"bytes32","nodeType":"ElementaryTypeName","src":"909:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433","id":612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"951:66:5","typeDescriptions":{"typeIdentifier":"t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1","typeString":"int_const 3304...(69 digits omitted)...9347"},"value":"0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"},"visibility":"private"},{"constant":true,"documentation":{"id":614,"nodeType":"StructuredDocumentation","src":"1024:214:5","text":" @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n validated in the constructor."},"id":617,"mutability":"constant","name":"_IMPLEMENTATION_SLOT","nameLocation":"1269:20:5","nodeType":"VariableDeclaration","scope":957,"src":"1243:115:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":615,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1243:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263","id":616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1292:66:5","typeDescriptions":{"typeIdentifier":"t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1","typeString":"int_const 2444...(69 digits omitted)...5612"},"value":"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"},"visibility":"internal"},{"anonymous":false,"documentation":{"id":618,"nodeType":"StructuredDocumentation","src":"1365:68:5","text":" @dev Emitted when the implementation is upgraded."},"eventSelector":"bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b","id":622,"name":"Upgraded","nameLocation":"1444:8:5","nodeType":"EventDefinition","parameters":{"id":621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":620,"indexed":true,"mutability":"mutable","name":"implementation","nameLocation":"1469:14:5","nodeType":"VariableDeclaration","scope":622,"src":"1453:30:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":619,"name":"address","nodeType":"ElementaryTypeName","src":"1453:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1452:32:5"},"src":"1438:47:5"},{"body":{"id":634,"nodeType":"Block","src":"1625:89:5","statements":[{"expression":{"expression":{"arguments":[{"id":630,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"1680:20:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":628,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"1642:22:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1731_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1665:14:5","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1697,"src":"1642:37:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1677_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1642:59:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1677_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":632,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1702:5:5","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1676,"src":"1642:65:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":627,"id":633,"nodeType":"Return","src":"1635:72:5"}]},"documentation":{"id":623,"nodeType":"StructuredDocumentation","src":"1491:67:5","text":" @dev Returns the current implementation address."},"id":635,"implemented":true,"kind":"function","modifiers":[],"name":"_getImplementation","nameLocation":"1572:18:5","nodeType":"FunctionDefinition","parameters":{"id":624,"nodeType":"ParameterList","parameters":[],"src":"1590:2:5"},"returnParameters":{"id":627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":626,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":635,"src":"1616:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":625,"name":"address","nodeType":"ElementaryTypeName","src":"1616:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1615:9:5"},"scope":957,"src":"1563:151:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":658,"nodeType":"Block","src":"1868:218:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":644,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"1916:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":642,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"1886:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1629_$","typeString":"type(library AddressUpgradeable)"}},"id":643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1905:10:5","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1363,"src":"1886:29:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1886:48:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1936:47:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""},"value":"ERC1967: new implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""}],"id":641,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1878:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1878:106:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":648,"nodeType":"ExpressionStatement","src":"1878:106:5"},{"expression":{"id":656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":652,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"2032:20:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":649,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"1994:22:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1731_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2017:14:5","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1697,"src":"1994:37:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1677_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1994:59:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1677_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":654,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2054:5:5","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1676,"src":"1994:65:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":655,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"2062:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1994:85:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":657,"nodeType":"ExpressionStatement","src":"1994:85:5"}]},"documentation":{"id":636,"nodeType":"StructuredDocumentation","src":"1720:80:5","text":" @dev Stores a new address in the EIP1967 implementation slot."},"id":659,"implemented":true,"kind":"function","modifiers":[],"name":"_setImplementation","nameLocation":"1814:18:5","nodeType":"FunctionDefinition","parameters":{"id":639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":638,"mutability":"mutable","name":"newImplementation","nameLocation":"1841:17:5","nodeType":"VariableDeclaration","scope":659,"src":"1833:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":637,"name":"address","nodeType":"ElementaryTypeName","src":"1833:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1832:27:5"},"returnParameters":{"id":640,"nodeType":"ParameterList","parameters":[],"src":"1868:0:5"},"scope":957,"src":"1805:281:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":673,"nodeType":"Block","src":"2248:96:5","statements":[{"expression":{"arguments":[{"id":666,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":662,"src":"2277:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":665,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"2258:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2258:37:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":668,"nodeType":"ExpressionStatement","src":"2258:37:5"},{"eventCall":{"arguments":[{"id":670,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":662,"src":"2319:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":669,"name":"Upgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":622,"src":"2310:8:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2310:27:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":672,"nodeType":"EmitStatement","src":"2305:32:5"}]},"documentation":{"id":660,"nodeType":"StructuredDocumentation","src":"2092:95:5","text":" @dev Perform implementation upgrade\n Emits an {Upgraded} event."},"id":674,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeTo","nameLocation":"2201:10:5","nodeType":"FunctionDefinition","parameters":{"id":663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":662,"mutability":"mutable","name":"newImplementation","nameLocation":"2220:17:5","nodeType":"VariableDeclaration","scope":674,"src":"2212:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":661,"name":"address","nodeType":"ElementaryTypeName","src":"2212:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2211:27:5"},"returnParameters":{"id":664,"nodeType":"ParameterList","parameters":[],"src":"2248:0:5"},"scope":957,"src":"2192:152:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":701,"nodeType":"Block","src":"2606:160:5","statements":[{"expression":{"arguments":[{"id":685,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"2627:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":684,"name":"_upgradeTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":674,"src":"2616:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2616:29:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":687,"nodeType":"ExpressionStatement","src":"2616:29:5"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":688,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"2659:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2664:6:5","memberName":"length","nodeType":"MemberAccess","src":"2659:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2673:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2659:15:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":692,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":681,"src":"2678:9:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2659:28:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":700,"nodeType":"IfStatement","src":"2655:105:5","trueBody":{"id":699,"nodeType":"Block","src":"2689:71:5","statements":[{"expression":{"arguments":[{"id":695,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"2725:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":696,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"2744:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":694,"name":"_functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"2703:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2703:46:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":698,"nodeType":"ExpressionStatement","src":"2703:46:5"}]}}]},"documentation":{"id":675,"nodeType":"StructuredDocumentation","src":"2350:123:5","text":" @dev Perform implementation upgrade with additional setup call.\n Emits an {Upgraded} event."},"id":702,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCall","nameLocation":"2487:17:5","nodeType":"FunctionDefinition","parameters":{"id":682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":677,"mutability":"mutable","name":"newImplementation","nameLocation":"2522:17:5","nodeType":"VariableDeclaration","scope":702,"src":"2514:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":676,"name":"address","nodeType":"ElementaryTypeName","src":"2514:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":679,"mutability":"mutable","name":"data","nameLocation":"2562:4:5","nodeType":"VariableDeclaration","scope":702,"src":"2549:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":678,"name":"bytes","nodeType":"ElementaryTypeName","src":"2549:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":681,"mutability":"mutable","name":"forceCall","nameLocation":"2581:9:5","nodeType":"VariableDeclaration","scope":702,"src":"2576:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":680,"name":"bool","nodeType":"ElementaryTypeName","src":"2576:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2504:92:5"},"returnParameters":{"id":683,"nodeType":"ParameterList","parameters":[],"src":"2606:0:5"},"scope":957,"src":"2478:288:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":754,"nodeType":"Block","src":"3070:842:5","statements":[{"condition":{"expression":{"arguments":[{"id":714,"name":"_ROLLBACK_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":613,"src":"3422:14:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":712,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"3384:22:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1731_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:14:5","memberName":"getBooleanSlot","nodeType":"MemberAccess","referencedDeclaration":1708,"src":"3384:37:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$1680_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.BooleanSlot storage pointer)"}},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3384:53:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1680_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot storage pointer"}},"id":716,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3438:5:5","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1679,"src":"3384:59:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":752,"nodeType":"Block","src":"3513:393:5","statements":[{"clauses":[{"block":{"id":737,"nodeType":"Block","src":"3618:115:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":731,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"3644:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":732,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"3652:20:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3644:28:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f786961626c6555554944","id":734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3674:43:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""},"value":"ERC1967Upgrade: unsupported proxiableUUID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""}],"id":730,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3636:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3636:82:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":736,"nodeType":"ExpressionStatement","src":"3636:82:5"}]},"errorName":"","id":738,"nodeType":"TryCatchClause","parameters":{"id":729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":728,"mutability":"mutable","name":"slot","nameLocation":"3612:4:5","nodeType":"VariableDeclaration","scope":738,"src":"3604:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":727,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3604:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3603:14:5"},"src":"3595:138:5"},{"block":{"id":743,"nodeType":"Block","src":"3740:89:5","statements":[{"expression":{"arguments":[{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e746174696f6e206973206e6f742055555053","id":740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3765:48:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""},"value":"ERC1967Upgrade: new implementation is not UUPS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""}],"id":739,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3758:6:5","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3758:56:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":742,"nodeType":"ExpressionStatement","src":"3758:56:5"}]},"errorName":"","id":744,"nodeType":"TryCatchClause","src":"3734:95:5"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":723,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":705,"src":"3560:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":722,"name":"IERC1822ProxiableUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"3531:28:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1822ProxiableUpgradeable_$588_$","typeString":"type(contract IERC1822ProxiableUpgradeable)"}},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3531:47:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1822ProxiableUpgradeable_$588","typeString":"contract IERC1822ProxiableUpgradeable"}},"id":725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3579:13:5","memberName":"proxiableUUID","nodeType":"MemberAccess","referencedDeclaration":587,"src":"3531:61:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3531:63:5","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":745,"nodeType":"TryStatement","src":"3527:302:5"},{"expression":{"arguments":[{"id":747,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":705,"src":"3860:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":748,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":707,"src":"3879:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":749,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":709,"src":"3885:9:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":746,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"3842:17:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3842:53:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":751,"nodeType":"ExpressionStatement","src":"3842:53:5"}]},"id":753,"nodeType":"IfStatement","src":"3380:526:5","trueBody":{"id":721,"nodeType":"Block","src":"3445:62:5","statements":[{"expression":{"arguments":[{"id":718,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":705,"src":"3478:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":717,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"3459:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3459:37:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":720,"nodeType":"ExpressionStatement","src":"3459:37:5"}]}}]},"documentation":{"id":703,"nodeType":"StructuredDocumentation","src":"2772:161:5","text":" @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n Emits an {Upgraded} event."},"id":755,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCallUUPS","nameLocation":"2947:21:5","nodeType":"FunctionDefinition","parameters":{"id":710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":705,"mutability":"mutable","name":"newImplementation","nameLocation":"2986:17:5","nodeType":"VariableDeclaration","scope":755,"src":"2978:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":704,"name":"address","nodeType":"ElementaryTypeName","src":"2978:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":707,"mutability":"mutable","name":"data","nameLocation":"3026:4:5","nodeType":"VariableDeclaration","scope":755,"src":"3013:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":706,"name":"bytes","nodeType":"ElementaryTypeName","src":"3013:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":709,"mutability":"mutable","name":"forceCall","nameLocation":"3045:9:5","nodeType":"VariableDeclaration","scope":755,"src":"3040:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":708,"name":"bool","nodeType":"ElementaryTypeName","src":"3040:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2968:92:5"},"returnParameters":{"id":711,"nodeType":"ParameterList","parameters":[],"src":"3070:0:5"},"scope":957,"src":"2938:974:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":756,"nodeType":"StructuredDocumentation","src":"3918:189:5","text":" @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n validated in the constructor."},"id":759,"mutability":"constant","name":"_ADMIN_SLOT","nameLocation":"4138:11:5","nodeType":"VariableDeclaration","scope":957,"src":"4112:106:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":757,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4112:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033","id":758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4152:66:5","typeDescriptions":{"typeIdentifier":"t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1","typeString":"int_const 8195...(69 digits omitted)...7091"},"value":"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"},"visibility":"internal"},{"anonymous":false,"documentation":{"id":760,"nodeType":"StructuredDocumentation","src":"4225:67:5","text":" @dev Emitted when the admin account has changed."},"eventSelector":"7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f","id":766,"name":"AdminChanged","nameLocation":"4303:12:5","nodeType":"EventDefinition","parameters":{"id":765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":762,"indexed":false,"mutability":"mutable","name":"previousAdmin","nameLocation":"4324:13:5","nodeType":"VariableDeclaration","scope":766,"src":"4316:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":761,"name":"address","nodeType":"ElementaryTypeName","src":"4316:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":764,"indexed":false,"mutability":"mutable","name":"newAdmin","nameLocation":"4347:8:5","nodeType":"VariableDeclaration","scope":766,"src":"4339:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":763,"name":"address","nodeType":"ElementaryTypeName","src":"4339:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4315:41:5"},"src":"4297:60:5"},{"body":{"id":778,"nodeType":"Block","src":"4471:80:5","statements":[{"expression":{"expression":{"arguments":[{"id":774,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":759,"src":"4526:11:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":772,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"4488:22:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1731_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4511:14:5","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1697,"src":"4488:37:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1677_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4488:50:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1677_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":776,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4539:5:5","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1676,"src":"4488:56:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":771,"id":777,"nodeType":"Return","src":"4481:63:5"}]},"documentation":{"id":767,"nodeType":"StructuredDocumentation","src":"4363:50:5","text":" @dev Returns the current admin."},"id":779,"implemented":true,"kind":"function","modifiers":[],"name":"_getAdmin","nameLocation":"4427:9:5","nodeType":"FunctionDefinition","parameters":{"id":768,"nodeType":"ParameterList","parameters":[],"src":"4436:2:5"},"returnParameters":{"id":771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":770,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":779,"src":"4462:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":769,"name":"address","nodeType":"ElementaryTypeName","src":"4462:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4461:9:5"},"scope":957,"src":"4418:133:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":804,"nodeType":"Block","src":"4678:167:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":786,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"4696:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4716:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":788,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4708:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":787,"name":"address","nodeType":"ElementaryTypeName","src":"4708:7:5","typeDescriptions":{}}},"id":790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4708:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4696:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e65772061646d696e20697320746865207a65726f2061646472657373","id":792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4720:40:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""},"value":"ERC1967: new admin is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""}],"id":785,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4688:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4688:73:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":794,"nodeType":"ExpressionStatement","src":"4688:73:5"},{"expression":{"id":802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":798,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":759,"src":"4809:11:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":795,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"4771:22:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1731_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4794:14:5","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1697,"src":"4771:37:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1677_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4771:50:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1677_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":800,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4822:5:5","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1676,"src":"4771:56:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":801,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"4830:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4771:67:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":803,"nodeType":"ExpressionStatement","src":"4771:67:5"}]},"documentation":{"id":780,"nodeType":"StructuredDocumentation","src":"4557:71:5","text":" @dev Stores a new address in the EIP1967 admin slot."},"id":805,"implemented":true,"kind":"function","modifiers":[],"name":"_setAdmin","nameLocation":"4642:9:5","nodeType":"FunctionDefinition","parameters":{"id":783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":782,"mutability":"mutable","name":"newAdmin","nameLocation":"4660:8:5","nodeType":"VariableDeclaration","scope":805,"src":"4652:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":781,"name":"address","nodeType":"ElementaryTypeName","src":"4652:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4651:18:5"},"returnParameters":{"id":784,"nodeType":"ParameterList","parameters":[],"src":"4678:0:5"},"scope":957,"src":"4633:212:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":821,"nodeType":"Block","src":"5005:86:5","statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":812,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"5033:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5033:11:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":814,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"5046:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":811,"name":"AdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"5020:12:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5020:35:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":816,"nodeType":"EmitStatement","src":"5015:40:5"},{"expression":{"arguments":[{"id":818,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"5075:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":817,"name":"_setAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":805,"src":"5065:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5065:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":820,"nodeType":"ExpressionStatement","src":"5065:19:5"}]},"documentation":{"id":806,"nodeType":"StructuredDocumentation","src":"4851:100:5","text":" @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event."},"id":822,"implemented":true,"kind":"function","modifiers":[],"name":"_changeAdmin","nameLocation":"4965:12:5","nodeType":"FunctionDefinition","parameters":{"id":809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":808,"mutability":"mutable","name":"newAdmin","nameLocation":"4986:8:5","nodeType":"VariableDeclaration","scope":822,"src":"4978:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":807,"name":"address","nodeType":"ElementaryTypeName","src":"4978:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4977:18:5"},"returnParameters":{"id":810,"nodeType":"ParameterList","parameters":[],"src":"5005:0:5"},"scope":957,"src":"4956:135:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":823,"nodeType":"StructuredDocumentation","src":"5097:232:5","text":" @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"id":826,"mutability":"constant","name":"_BEACON_SLOT","nameLocation":"5360:12:5","nodeType":"VariableDeclaration","scope":957,"src":"5334:107:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":824,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5334:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530","id":825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5375:66:5","typeDescriptions":{"typeIdentifier":"t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1","typeString":"int_const 7415...(69 digits omitted)...4704"},"value":"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"},"visibility":"internal"},{"anonymous":false,"documentation":{"id":827,"nodeType":"StructuredDocumentation","src":"5448:60:5","text":" @dev Emitted when the beacon is upgraded."},"eventSelector":"1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e","id":831,"name":"BeaconUpgraded","nameLocation":"5519:14:5","nodeType":"EventDefinition","parameters":{"id":830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":829,"indexed":true,"mutability":"mutable","name":"beacon","nameLocation":"5550:6:5","nodeType":"VariableDeclaration","scope":831,"src":"5534:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":828,"name":"address","nodeType":"ElementaryTypeName","src":"5534:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5533:24:5"},"src":"5513:45:5"},{"body":{"id":843,"nodeType":"Block","src":"5674:81:5","statements":[{"expression":{"expression":{"arguments":[{"id":839,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":826,"src":"5729:12:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":837,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"5691:22:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1731_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5714:14:5","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1697,"src":"5691:37:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1677_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5691:51:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1677_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":841,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5743:5:5","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1676,"src":"5691:57:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":836,"id":842,"nodeType":"Return","src":"5684:64:5"}]},"documentation":{"id":832,"nodeType":"StructuredDocumentation","src":"5564:51:5","text":" @dev Returns the current beacon."},"id":844,"implemented":true,"kind":"function","modifiers":[],"name":"_getBeacon","nameLocation":"5629:10:5","nodeType":"FunctionDefinition","parameters":{"id":833,"nodeType":"ParameterList","parameters":[],"src":"5639:2:5"},"returnParameters":{"id":836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":835,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":844,"src":"5665:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":834,"name":"address","nodeType":"ElementaryTypeName","src":"5665:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5664:9:5"},"scope":957,"src":"5620:135:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":879,"nodeType":"Block","src":"5884:368:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":853,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"5932:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":851,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"5902:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1629_$","typeString":"type(library AddressUpgradeable)"}},"id":852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5921:10:5","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1363,"src":"5902:29:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":854,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5902:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720626561636f6e206973206e6f74206120636f6e7472616374","id":855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5944:39:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""},"value":"ERC1967: new beacon is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""}],"id":850,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5894:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5894:90:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":857,"nodeType":"ExpressionStatement","src":"5894:90:5"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":862,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"6064:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":861,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"6045:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$967_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6045:29:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$967","typeString":"contract IBeaconUpgradeable"}},"id":864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6075:14:5","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":966,"src":"6045:44:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6045:46:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":859,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"6015:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1629_$","typeString":"type(library AddressUpgradeable)"}},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6034:10:5","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1363,"src":"6015:29:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6015:77:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6106:50:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""},"value":"ERC1967: beacon implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""}],"id":858,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5994:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5994:172:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":869,"nodeType":"ExpressionStatement","src":"5994:172:5"},{"expression":{"id":877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":873,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":826,"src":"6214:12:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":870,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"6176:22:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1731_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6199:14:5","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1697,"src":"6176:37:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1677_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6176:51:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1677_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":875,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6228:5:5","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1676,"src":"6176:57:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":876,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"6236:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6176:69:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":878,"nodeType":"ExpressionStatement","src":"6176:69:5"}]},"documentation":{"id":845,"nodeType":"StructuredDocumentation","src":"5761:71:5","text":" @dev Stores a new beacon in the EIP1967 beacon slot."},"id":880,"implemented":true,"kind":"function","modifiers":[],"name":"_setBeacon","nameLocation":"5846:10:5","nodeType":"FunctionDefinition","parameters":{"id":848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":847,"mutability":"mutable","name":"newBeacon","nameLocation":"5865:9:5","nodeType":"VariableDeclaration","scope":880,"src":"5857:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":846,"name":"address","nodeType":"ElementaryTypeName","src":"5857:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5856:19:5"},"returnParameters":{"id":849,"nodeType":"ParameterList","parameters":[],"src":"5884:0:5"},"scope":957,"src":"5837:415:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":915,"nodeType":"Block","src":"6681:221:5","statements":[{"expression":{"arguments":[{"id":891,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"6702:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":890,"name":"_setBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"6691:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6691:21:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":893,"nodeType":"ExpressionStatement","src":"6691:21:5"},{"eventCall":{"arguments":[{"id":895,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"6742:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":894,"name":"BeaconUpgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"6727:14:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6727:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":897,"nodeType":"EmitStatement","src":"6722:30:5"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":898,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"6766:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6771:6:5","memberName":"length","nodeType":"MemberAccess","src":"6766:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6780:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6766:15:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":902,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"6785:9:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6766:28:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":914,"nodeType":"IfStatement","src":"6762:134:5","trueBody":{"id":913,"nodeType":"Block","src":"6796:100:5","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":906,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"6851:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":905,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"6832:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$967_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6832:29:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$967","typeString":"contract IBeaconUpgradeable"}},"id":908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6862:14:5","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":966,"src":"6832:44:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6832:46:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":910,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"6880:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":904,"name":"_functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"6810:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6810:75:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":912,"nodeType":"ExpressionStatement","src":"6810:75:5"}]}}]},"documentation":{"id":881,"nodeType":"StructuredDocumentation","src":"6258:292:5","text":" @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n Emits a {BeaconUpgraded} event."},"id":916,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeBeaconToAndCall","nameLocation":"6564:23:5","nodeType":"FunctionDefinition","parameters":{"id":888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":883,"mutability":"mutable","name":"newBeacon","nameLocation":"6605:9:5","nodeType":"VariableDeclaration","scope":916,"src":"6597:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":882,"name":"address","nodeType":"ElementaryTypeName","src":"6597:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":885,"mutability":"mutable","name":"data","nameLocation":"6637:4:5","nodeType":"VariableDeclaration","scope":916,"src":"6624:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":884,"name":"bytes","nodeType":"ElementaryTypeName","src":"6624:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":887,"mutability":"mutable","name":"forceCall","nameLocation":"6656:9:5","nodeType":"VariableDeclaration","scope":916,"src":"6651:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":886,"name":"bool","nodeType":"ElementaryTypeName","src":"6651:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6587:84:5"},"returnParameters":{"id":889,"nodeType":"ParameterList","parameters":[],"src":"6681:0:5"},"scope":957,"src":"6555:347:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":950,"nodeType":"Block","src":"7185:358:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":929,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":919,"src":"7233:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":927,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"7203:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1629_$","typeString":"type(library AddressUpgradeable)"}},"id":928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7222:10:5","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1363,"src":"7203:29:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7203:37:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374","id":931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7242:40:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""},"value":"Address: delegate call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""}],"id":926,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7195:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7195:88:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":933,"nodeType":"ExpressionStatement","src":"7195:88:5"},{"assignments":[935,937],"declarations":[{"constant":false,"id":935,"mutability":"mutable","name":"success","nameLocation":"7359:7:5","nodeType":"VariableDeclaration","scope":950,"src":"7354:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":934,"name":"bool","nodeType":"ElementaryTypeName","src":"7354:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":937,"mutability":"mutable","name":"returndata","nameLocation":"7381:10:5","nodeType":"VariableDeclaration","scope":950,"src":"7368:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":936,"name":"bytes","nodeType":"ElementaryTypeName","src":"7368:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":942,"initialValue":{"arguments":[{"id":940,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"7415:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":938,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":919,"src":"7395:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7402:12:5","memberName":"delegatecall","nodeType":"MemberAccess","src":"7395:19:5","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7395:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7353:67:5"},{"expression":{"arguments":[{"id":945,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"7473:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":946,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"7482:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7494:41:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"expression":{"id":943,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"7437:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1629_$","typeString":"type(library AddressUpgradeable)"}},"id":944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7456:16:5","memberName":"verifyCallResult","nodeType":"MemberAccess","referencedDeclaration":1608,"src":"7437:35:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7437:99:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":925,"id":949,"nodeType":"Return","src":"7430:106:5"}]},"documentation":{"id":917,"nodeType":"StructuredDocumentation","src":"6908:175:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":951,"implemented":true,"kind":"function","modifiers":[],"name":"_functionDelegateCall","nameLocation":"7097:21:5","nodeType":"FunctionDefinition","parameters":{"id":922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":919,"mutability":"mutable","name":"target","nameLocation":"7127:6:5","nodeType":"VariableDeclaration","scope":951,"src":"7119:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":918,"name":"address","nodeType":"ElementaryTypeName","src":"7119:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":921,"mutability":"mutable","name":"data","nameLocation":"7148:4:5","nodeType":"VariableDeclaration","scope":951,"src":"7135:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":920,"name":"bytes","nodeType":"ElementaryTypeName","src":"7135:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7118:35:5"},"returnParameters":{"id":925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":924,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":951,"src":"7171:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":923,"name":"bytes","nodeType":"ElementaryTypeName","src":"7171:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7170:14:5"},"scope":957,"src":"7088:455:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"constant":false,"documentation":{"id":952,"nodeType":"StructuredDocumentation","src":"7549:254:5","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":956,"mutability":"mutable","name":"__gap","nameLocation":"7828:5:5","nodeType":"VariableDeclaration","scope":957,"src":"7808:25:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":953,"name":"uint256","nodeType":"ElementaryTypeName","src":"7808:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":955,"length":{"hexValue":"3530","id":954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:2:5","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"7808:11:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":958,"src":"610:7226:5","usedErrors":[]}],"src":"116:7721:5"},"id":5},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","exportedSymbols":{"IBeaconUpgradeable":[967]},"id":968,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":959,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"93:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IBeaconUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":960,"nodeType":"StructuredDocumentation","src":"118:79:6","text":" @dev This is the interface that {BeaconProxy} expects of its beacon."},"fullyImplemented":false,"id":967,"linearizedBaseContracts":[967],"name":"IBeaconUpgradeable","nameLocation":"208:18:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":961,"nodeType":"StructuredDocumentation","src":"233:162:6","text":" @dev Must return an address that can be used as a delegate call target.\n {BeaconProxy} will check that this address is a contract."},"functionSelector":"5c60da1b","id":966,"implemented":false,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"409:14:6","nodeType":"FunctionDefinition","parameters":{"id":962,"nodeType":"ParameterList","parameters":[],"src":"423:2:6"},"returnParameters":{"id":965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":964,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":966,"src":"449:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":963,"name":"address","nodeType":"ElementaryTypeName","src":"449:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"448:9:6"},"scope":967,"src":"400:58:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":968,"src":"198:262:6","usedErrors":[]}],"src":"93:368:6"},"id":6},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[1629],"Initializable":[1136]},"id":1137,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":969,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:7"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":970,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1137,"sourceUnit":1630,"src":"138:44:7","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":971,"nodeType":"StructuredDocumentation","src":"184:2198:7","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":1136,"linearizedBaseContracts":[1136],"name":"Initializable","nameLocation":"2401:13:7","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":972,"nodeType":"StructuredDocumentation","src":"2421:109:7","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":974,"mutability":"mutable","name":"_initialized","nameLocation":"2549:12:7","nodeType":"VariableDeclaration","scope":1136,"src":"2535:26:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":973,"name":"uint8","nodeType":"ElementaryTypeName","src":"2535:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":975,"nodeType":"StructuredDocumentation","src":"2568:91:7","text":" @dev Indicates that the contract is in the process of being initialized."},"id":977,"mutability":"mutable","name":"_initializing","nameLocation":"2677:13:7","nodeType":"VariableDeclaration","scope":1136,"src":"2664:26:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":976,"name":"bool","nodeType":"ElementaryTypeName","src":"2664:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":978,"nodeType":"StructuredDocumentation","src":"2697:90:7","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":982,"name":"Initialized","nameLocation":"2798:11:7","nodeType":"EventDefinition","parameters":{"id":981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":980,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2816:7:7","nodeType":"VariableDeclaration","scope":982,"src":"2810:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":979,"name":"uint8","nodeType":"ElementaryTypeName","src":"2810:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2809:15:7"},"src":"2792:33:7"},{"body":{"id":1037,"nodeType":"Block","src":"3258:483:7","statements":[{"assignments":[986],"declarations":[{"constant":false,"id":986,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3273:14:7","nodeType":"VariableDeclaration","scope":1037,"src":"3268:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":985,"name":"bool","nodeType":"ElementaryTypeName","src":"3268:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":989,"initialValue":{"id":988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3290:14:7","subExpression":{"id":987,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"3291:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3268:36:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":991,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"3336:14:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":992,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"3354:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3369:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3354:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3336:34:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":996,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3335:36:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3376:45:7","subExpression":{"arguments":[{"arguments":[{"id":1001,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3415:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$1136","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$1136","typeString":"contract Initializable"}],"id":1000,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3407:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":999,"name":"address","nodeType":"ElementaryTypeName","src":"3407:7:7","typeDescriptions":{}}},"id":1002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3407:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":997,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"3377:18:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1629_$","typeString":"type(library AddressUpgradeable)"}},"id":998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3396:10:7","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1363,"src":"3377:29:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3377:44:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1005,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"3425:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3441:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3425:17:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3376:66:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1009,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3375:68:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3335:108:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":1011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3457:48:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":990,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3314:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3314:201:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1013,"nodeType":"ExpressionStatement","src":"3314:201:7"},{"expression":{"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1014,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"3525:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":1015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3540:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3525:16:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1017,"nodeType":"ExpressionStatement","src":"3525:16:7"},{"condition":{"id":1018,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"3555:14:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1024,"nodeType":"IfStatement","src":"3551:65:7","trueBody":{"id":1023,"nodeType":"Block","src":"3571:45:7","statements":[{"expression":{"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1019,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"3585:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3601:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3585:20:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1022,"nodeType":"ExpressionStatement","src":"3585:20:7"}]}},{"id":1025,"nodeType":"PlaceholderStatement","src":"3625:1:7"},{"condition":{"id":1026,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"3640:14:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1036,"nodeType":"IfStatement","src":"3636:99:7","trueBody":{"id":1035,"nodeType":"Block","src":"3656:79:7","statements":[{"expression":{"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1027,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"3670:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3686:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3670:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1030,"nodeType":"ExpressionStatement","src":"3670:21:7"},{"eventCall":{"arguments":[{"hexValue":"31","id":1032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3722:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1031,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":982,"src":"3710:11:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3710:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1034,"nodeType":"EmitStatement","src":"3705:19:7"}]}}]},"documentation":{"id":983,"nodeType":"StructuredDocumentation","src":"2831:399:7","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":1038,"name":"initializer","nameLocation":"3244:11:7","nodeType":"ModifierDefinition","parameters":{"id":984,"nodeType":"ParameterList","parameters":[],"src":"3255:2:7"},"src":"3235:506:7","virtual":false,"visibility":"internal"},{"body":{"id":1070,"nodeType":"Block","src":"4852:255:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4870:14:7","subExpression":{"id":1044,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"4871:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1046,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"4888:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1047,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1041,"src":"4903:7:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4888:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4870:40:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":1050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4912:48:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":1043,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4862:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4862:99:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1052,"nodeType":"ExpressionStatement","src":"4862:99:7"},{"expression":{"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1053,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"4971:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1054,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1041,"src":"4986:7:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4971:22:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1056,"nodeType":"ExpressionStatement","src":"4971:22:7"},{"expression":{"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1057,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"5003:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5019:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5003:20:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1060,"nodeType":"ExpressionStatement","src":"5003:20:7"},{"id":1061,"nodeType":"PlaceholderStatement","src":"5033:1:7"},{"expression":{"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1062,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"5044:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5060:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5044:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1065,"nodeType":"ExpressionStatement","src":"5044:21:7"},{"eventCall":{"arguments":[{"id":1067,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1041,"src":"5092:7:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1066,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":982,"src":"5080:11:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5080:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1069,"nodeType":"EmitStatement","src":"5075:25:7"}]},"documentation":{"id":1039,"nodeType":"StructuredDocumentation","src":"3747:1062:7","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":1071,"name":"reinitializer","nameLocation":"4823:13:7","nodeType":"ModifierDefinition","parameters":{"id":1042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1041,"mutability":"mutable","name":"version","nameLocation":"4843:7:7","nodeType":"VariableDeclaration","scope":1071,"src":"4837:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1040,"name":"uint8","nodeType":"ElementaryTypeName","src":"4837:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4836:15:7"},"src":"4814:293:7","virtual":false,"visibility":"internal"},{"body":{"id":1080,"nodeType":"Block","src":"5345:97:7","statements":[{"expression":{"arguments":[{"id":1075,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"5363:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":1076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5378:45:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":1074,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5355:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5355:69:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1078,"nodeType":"ExpressionStatement","src":"5355:69:7"},{"id":1079,"nodeType":"PlaceholderStatement","src":"5434:1:7"}]},"documentation":{"id":1072,"nodeType":"StructuredDocumentation","src":"5113:199:7","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":1081,"name":"onlyInitializing","nameLocation":"5326:16:7","nodeType":"ModifierDefinition","parameters":{"id":1073,"nodeType":"ParameterList","parameters":[],"src":"5342:2:7"},"src":"5317:125:7","virtual":false,"visibility":"internal"},{"body":{"id":1116,"nodeType":"Block","src":"5977:230:7","statements":[{"expression":{"arguments":[{"id":1087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5995:14:7","subExpression":{"id":1086,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"5996:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":1088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6011:41:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":1085,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5987:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5987:66:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1090,"nodeType":"ExpressionStatement","src":"5987:66:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1091,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"6067:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"id":1094,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6087:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1093,"name":"uint8","nodeType":"ElementaryTypeName","src":"6087:5:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1092,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6082:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6082:11:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1096,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6094:3:7","memberName":"max","nodeType":"MemberAccess","src":"6082:15:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6067:30:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1115,"nodeType":"IfStatement","src":"6063:138:7","trueBody":{"id":1114,"nodeType":"Block","src":"6099:102:7","statements":[{"expression":{"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1098,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"6113:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":1101,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1100,"name":"uint8","nodeType":"ElementaryTypeName","src":"6133:5:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1099,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6128:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6128:11:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1103,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6140:3:7","memberName":"max","nodeType":"MemberAccess","src":"6128:15:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6113:30:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1105,"nodeType":"ExpressionStatement","src":"6113:30:7"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":1109,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6179:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1108,"name":"uint8","nodeType":"ElementaryTypeName","src":"6179:5:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1107,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6174:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:11:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1111,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6186:3:7","memberName":"max","nodeType":"MemberAccess","src":"6174:15:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1106,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":982,"src":"6162:11:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6162:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1113,"nodeType":"EmitStatement","src":"6157:33:7"}]}}]},"documentation":{"id":1082,"nodeType":"StructuredDocumentation","src":"5448:475:7","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":1117,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5937:20:7","nodeType":"FunctionDefinition","parameters":{"id":1083,"nodeType":"ParameterList","parameters":[],"src":"5957:2:7"},"returnParameters":{"id":1084,"nodeType":"ParameterList","parameters":[],"src":"5977:0:7"},"scope":1136,"src":"5928:279:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1125,"nodeType":"Block","src":"6381:36:7","statements":[{"expression":{"id":1123,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"6398:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":1122,"id":1124,"nodeType":"Return","src":"6391:19:7"}]},"documentation":{"id":1118,"nodeType":"StructuredDocumentation","src":"6213:99:7","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":1126,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6326:22:7","nodeType":"FunctionDefinition","parameters":{"id":1119,"nodeType":"ParameterList","parameters":[],"src":"6348:2:7"},"returnParameters":{"id":1122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1121,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1126,"src":"6374:5:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1120,"name":"uint8","nodeType":"ElementaryTypeName","src":"6374:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6373:7:7"},"scope":1136,"src":"6317:100:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1134,"nodeType":"Block","src":"6589:37:7","statements":[{"expression":{"id":1132,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"6606:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1131,"id":1133,"nodeType":"Return","src":"6599:20:7"}]},"documentation":{"id":1127,"nodeType":"StructuredDocumentation","src":"6423:105:7","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":1135,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6542:15:7","nodeType":"FunctionDefinition","parameters":{"id":1128,"nodeType":"ParameterList","parameters":[],"src":"6557:2:7"},"returnParameters":{"id":1131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1130,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1135,"src":"6583:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1129,"name":"bool","nodeType":"ElementaryTypeName","src":"6583:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6582:6:7"},"scope":1136,"src":"6533:93:7","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1137,"src":"2383:4245:7","usedErrors":[]}],"src":"113:6516:7"},"id":7},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1629],"ERC1967UpgradeUpgradeable":[957],"IBeaconUpgradeable":[967],"IERC1822ProxiableUpgradeable":[588],"Initializable":[1136],"StorageSlotUpgradeable":[1731],"UUPSUpgradeable":[1272]},"id":1273,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1138,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":1139,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1273,"sourceUnit":589,"src":"140:56:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","file":"../ERC1967/ERC1967UpgradeUpgradeable.sol","id":1140,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1273,"sourceUnit":958,"src":"197:50:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"./Initializable.sol","id":1141,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1273,"sourceUnit":1137,"src":"248:29:8","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1143,"name":"Initializable","nameLocations":["965:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":1136,"src":"965:13:8"},"id":1144,"nodeType":"InheritanceSpecifier","src":"965:13:8"},{"baseName":{"id":1145,"name":"IERC1822ProxiableUpgradeable","nameLocations":["980:28:8"],"nodeType":"IdentifierPath","referencedDeclaration":588,"src":"980:28:8"},"id":1146,"nodeType":"InheritanceSpecifier","src":"980:28:8"},{"baseName":{"id":1147,"name":"ERC1967UpgradeUpgradeable","nameLocations":["1010:25:8"],"nodeType":"IdentifierPath","referencedDeclaration":957,"src":"1010:25:8"},"id":1148,"nodeType":"InheritanceSpecifier","src":"1010:25:8"}],"canonicalName":"UUPSUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1142,"nodeType":"StructuredDocumentation","src":"279:648:8","text":" @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n `UUPSUpgradeable` with a custom implementation of upgrades.\n The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n _Available since v4.1._"},"fullyImplemented":false,"id":1272,"linearizedBaseContracts":[1272,957,588,1136],"name":"UUPSUpgradeable","nameLocation":"946:15:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":1153,"nodeType":"Block","src":"1102:7:8","statements":[]},"id":1154,"implemented":true,"kind":"function","modifiers":[{"id":1151,"kind":"modifierInvocation","modifierName":{"id":1150,"name":"onlyInitializing","nameLocations":["1085:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":1081,"src":"1085:16:8"},"nodeType":"ModifierInvocation","src":"1085:16:8"}],"name":"__UUPSUpgradeable_init","nameLocation":"1051:22:8","nodeType":"FunctionDefinition","parameters":{"id":1149,"nodeType":"ParameterList","parameters":[],"src":"1073:2:8"},"returnParameters":{"id":1152,"nodeType":"ParameterList","parameters":[],"src":"1102:0:8"},"scope":1272,"src":"1042:67:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1159,"nodeType":"Block","src":"1185:7:8","statements":[]},"id":1160,"implemented":true,"kind":"function","modifiers":[{"id":1157,"kind":"modifierInvocation","modifierName":{"id":1156,"name":"onlyInitializing","nameLocations":["1168:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":1081,"src":"1168:16:8"},"nodeType":"ModifierInvocation","src":"1168:16:8"}],"name":"__UUPSUpgradeable_init_unchained","nameLocation":"1124:32:8","nodeType":"FunctionDefinition","parameters":{"id":1155,"nodeType":"ParameterList","parameters":[],"src":"1156:2:8"},"returnParameters":{"id":1158,"nodeType":"ParameterList","parameters":[],"src":"1185:0:8"},"scope":1272,"src":"1115:77:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":1161,"nodeType":"StructuredDocumentation","src":"1197:87:8","text":"@custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment"},"id":1167,"mutability":"immutable","name":"__self","nameLocation":"1315:6:8","nodeType":"VariableDeclaration","scope":1272,"src":"1289:48:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1162,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"id":1165,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1332:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1272","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1272","typeString":"contract UUPSUpgradeable"}],"id":1164,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1324:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1163,"name":"address","nodeType":"ElementaryTypeName","src":"1324:7:8","typeDescriptions":{}}},"id":1166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1324:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":1189,"nodeType":"Block","src":"1863:205:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1173,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1889:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1272","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1272","typeString":"contract UUPSUpgradeable"}],"id":1172,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1881:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1171,"name":"address","nodeType":"ElementaryTypeName","src":"1881:7:8","typeDescriptions":{}}},"id":1174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1175,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1167,"src":"1898:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1881:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":1177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1906:46:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""},"value":"Function must be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""}],"id":1170,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1873:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1873:80:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1179,"nodeType":"ExpressionStatement","src":"1873:80:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1181,"name":"_getImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":635,"src":"1971:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1971:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1183,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1167,"src":"1995:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1971:30:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f756768206163746976652070726f7879","id":1185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2003:46:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""},"value":"Function must be called through active proxy"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""}],"id":1180,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1963:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1963:87:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1187,"nodeType":"ExpressionStatement","src":"1963:87:8"},{"id":1188,"nodeType":"PlaceholderStatement","src":"2060:1:8"}]},"documentation":{"id":1168,"nodeType":"StructuredDocumentation","src":"1344:493:8","text":" @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n fail."},"id":1190,"name":"onlyProxy","nameLocation":"1851:9:8","nodeType":"ModifierDefinition","parameters":{"id":1169,"nodeType":"ParameterList","parameters":[],"src":"1860:2:8"},"src":"1842:226:8","virtual":false,"visibility":"internal"},{"body":{"id":1204,"nodeType":"Block","src":"2298:120:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1196,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2324:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1272","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1272","typeString":"contract UUPSUpgradeable"}],"id":1195,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2316:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1194,"name":"address","nodeType":"ElementaryTypeName","src":"2316:7:8","typeDescriptions":{}}},"id":1197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2316:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1198,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1167,"src":"2333:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2316:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":1200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2341:58:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""},"value":"UUPSUpgradeable: must not be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""}],"id":1193,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2308:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2308:92:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1202,"nodeType":"ExpressionStatement","src":"2308:92:8"},{"id":1203,"nodeType":"PlaceholderStatement","src":"2410:1:8"}]},"documentation":{"id":1191,"nodeType":"StructuredDocumentation","src":"2074:195:8","text":" @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n callable on the implementing contract but not through proxies."},"id":1205,"name":"notDelegated","nameLocation":"2283:12:8","nodeType":"ModifierDefinition","parameters":{"id":1192,"nodeType":"ParameterList","parameters":[],"src":"2295:2:8"},"src":"2274:144:8","virtual":false,"visibility":"internal"},{"baseFunctions":[587],"body":{"id":1216,"nodeType":"Block","src":"3093:44:8","statements":[{"expression":{"id":1214,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"3110:20:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1213,"id":1215,"nodeType":"Return","src":"3103:27:8"}]},"documentation":{"id":1206,"nodeType":"StructuredDocumentation","src":"2424:577:8","text":" @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"functionSelector":"52d1902d","id":1217,"implemented":true,"kind":"function","modifiers":[{"id":1210,"kind":"modifierInvocation","modifierName":{"id":1209,"name":"notDelegated","nameLocations":["3062:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1205,"src":"3062:12:8"},"nodeType":"ModifierInvocation","src":"3062:12:8"}],"name":"proxiableUUID","nameLocation":"3015:13:8","nodeType":"FunctionDefinition","overrides":{"id":1208,"nodeType":"OverrideSpecifier","overrides":[],"src":"3053:8:8"},"parameters":{"id":1207,"nodeType":"ParameterList","parameters":[],"src":"3028:2:8"},"returnParameters":{"id":1213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1212,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1217,"src":"3084:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1211,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3084:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3083:9:8"},"scope":1272,"src":"3006:131:8","stateMutability":"view","virtual":true,"visibility":"external"},{"body":{"id":1238,"nodeType":"Block","src":"3390:124:8","statements":[{"expression":{"arguments":[{"id":1226,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1220,"src":"3418:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1225,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"3400:17:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3400:36:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1228,"nodeType":"ExpressionStatement","src":"3400:36:8"},{"expression":{"arguments":[{"id":1230,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1220,"src":"3468:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3497:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1232,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3487:9:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1231,"name":"bytes","nodeType":"ElementaryTypeName","src":"3491:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3487:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":1235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3501:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1229,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"3446:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3446:61:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1237,"nodeType":"ExpressionStatement","src":"3446:61:8"}]},"documentation":{"id":1218,"nodeType":"StructuredDocumentation","src":"3143:169:8","text":" @dev Upgrade the implementation of the proxy to `newImplementation`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event."},"functionSelector":"3659cfe6","id":1239,"implemented":true,"kind":"function","modifiers":[{"id":1223,"kind":"modifierInvocation","modifierName":{"id":1222,"name":"onlyProxy","nameLocations":["3380:9:8"],"nodeType":"IdentifierPath","referencedDeclaration":1190,"src":"3380:9:8"},"nodeType":"ModifierInvocation","src":"3380:9:8"}],"name":"upgradeTo","nameLocation":"3326:9:8","nodeType":"FunctionDefinition","parameters":{"id":1221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1220,"mutability":"mutable","name":"newImplementation","nameLocation":"3344:17:8","nodeType":"VariableDeclaration","scope":1239,"src":"3336:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1219,"name":"address","nodeType":"ElementaryTypeName","src":"3336:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3335:27:8"},"returnParameters":{"id":1224,"nodeType":"ParameterList","parameters":[],"src":"3390:0:8"},"scope":1272,"src":"3317:197:8","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":1259,"nodeType":"Block","src":"3870:115:8","statements":[{"expression":{"arguments":[{"id":1250,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"3898:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1249,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"3880:17:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3880:36:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1252,"nodeType":"ExpressionStatement","src":"3880:36:8"},{"expression":{"arguments":[{"id":1254,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"3948:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1255,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"3967:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"74727565","id":1256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3973:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1253,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"3926:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":1257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3926:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1258,"nodeType":"ExpressionStatement","src":"3926:52:8"}]},"documentation":{"id":1240,"nodeType":"StructuredDocumentation","src":"3520:238:8","text":" @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n encoded in `data`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event."},"functionSelector":"4f1ef286","id":1260,"implemented":true,"kind":"function","modifiers":[{"id":1247,"kind":"modifierInvocation","modifierName":{"id":1246,"name":"onlyProxy","nameLocations":["3860:9:8"],"nodeType":"IdentifierPath","referencedDeclaration":1190,"src":"3860:9:8"},"nodeType":"ModifierInvocation","src":"3860:9:8"}],"name":"upgradeToAndCall","nameLocation":"3772:16:8","nodeType":"FunctionDefinition","parameters":{"id":1245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1242,"mutability":"mutable","name":"newImplementation","nameLocation":"3797:17:8","nodeType":"VariableDeclaration","scope":1260,"src":"3789:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1241,"name":"address","nodeType":"ElementaryTypeName","src":"3789:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1244,"mutability":"mutable","name":"data","nameLocation":"3829:4:8","nodeType":"VariableDeclaration","scope":1260,"src":"3816:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1243,"name":"bytes","nodeType":"ElementaryTypeName","src":"3816:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3788:46:8"},"returnParameters":{"id":1248,"nodeType":"ParameterList","parameters":[],"src":"3870:0:8"},"scope":1272,"src":"3763:222:8","stateMutability":"payable","virtual":true,"visibility":"external"},{"documentation":{"id":1261,"nodeType":"StructuredDocumentation","src":"3991:397:8","text":" @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n {upgradeTo} and {upgradeToAndCall}.\n Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n ```solidity\n function _authorizeUpgrade(address) internal override onlyOwner {}\n ```"},"id":1266,"implemented":false,"kind":"function","modifiers":[],"name":"_authorizeUpgrade","nameLocation":"4402:17:8","nodeType":"FunctionDefinition","parameters":{"id":1264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1263,"mutability":"mutable","name":"newImplementation","nameLocation":"4428:17:8","nodeType":"VariableDeclaration","scope":1266,"src":"4420:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1262,"name":"address","nodeType":"ElementaryTypeName","src":"4420:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4419:27:8"},"returnParameters":{"id":1265,"nodeType":"ParameterList","parameters":[],"src":"4463:0:8"},"scope":1272,"src":"4393:71:8","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1267,"nodeType":"StructuredDocumentation","src":"4470:254:8","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1271,"mutability":"mutable","name":"__gap","nameLocation":"4749:5:8","nodeType":"VariableDeclaration","scope":1272,"src":"4729:25:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1268,"name":"uint256","nodeType":"ElementaryTypeName","src":"4729:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1270,"length":{"hexValue":"3530","id":1269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4737:2:8","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"4729:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1273,"src":"928:3829:8","usedErrors":[]}],"src":"115:4643:8"},"id":8},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1629],"Initializable":[1136],"ReentrancyGuardUpgradeable":[1345]},"id":1346,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1274,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:9"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1275,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1346,"sourceUnit":1137,"src":"136:42:9","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1277,"name":"Initializable","nameLocations":["979:13:9"],"nodeType":"IdentifierPath","referencedDeclaration":1136,"src":"979:13:9"},"id":1278,"nodeType":"InheritanceSpecifier","src":"979:13:9"}],"canonicalName":"ReentrancyGuardUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1276,"nodeType":"StructuredDocumentation","src":"180:750:9","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":1345,"linearizedBaseContracts":[1345,1136],"name":"ReentrancyGuardUpgradeable","nameLocation":"949:26:9","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1281,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"1772:12:9","nodeType":"VariableDeclaration","scope":1345,"src":"1747:41:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1279,"name":"uint256","nodeType":"ElementaryTypeName","src":"1747:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":1280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1787:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":1284,"mutability":"constant","name":"_ENTERED","nameLocation":"1819:8:9","nodeType":"VariableDeclaration","scope":1345,"src":"1794:37:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1282,"name":"uint256","nodeType":"ElementaryTypeName","src":"1794:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":1283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1830:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":1286,"mutability":"mutable","name":"_status","nameLocation":"1854:7:9","nodeType":"VariableDeclaration","scope":1345,"src":"1838:23:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1285,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":1294,"nodeType":"Block","src":"1928:51:9","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1291,"name":"__ReentrancyGuard_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"1938:32:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1938:34:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1293,"nodeType":"ExpressionStatement","src":"1938:34:9"}]},"id":1295,"implemented":true,"kind":"function","modifiers":[{"id":1289,"kind":"modifierInvocation","modifierName":{"id":1288,"name":"onlyInitializing","nameLocations":["1911:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":1081,"src":"1911:16:9"},"nodeType":"ModifierInvocation","src":"1911:16:9"}],"name":"__ReentrancyGuard_init","nameLocation":"1877:22:9","nodeType":"FunctionDefinition","parameters":{"id":1287,"nodeType":"ParameterList","parameters":[],"src":"1899:2:9"},"returnParameters":{"id":1290,"nodeType":"ParameterList","parameters":[],"src":"1928:0:9"},"scope":1345,"src":"1868:111:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1304,"nodeType":"Block","src":"2055:39:9","statements":[{"expression":{"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1300,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"2065:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1301,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1281,"src":"2075:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2065:22:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1303,"nodeType":"ExpressionStatement","src":"2065:22:9"}]},"id":1305,"implemented":true,"kind":"function","modifiers":[{"id":1298,"kind":"modifierInvocation","modifierName":{"id":1297,"name":"onlyInitializing","nameLocations":["2038:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":1081,"src":"2038:16:9"},"nodeType":"ModifierInvocation","src":"2038:16:9"}],"name":"__ReentrancyGuard_init_unchained","nameLocation":"1994:32:9","nodeType":"FunctionDefinition","parameters":{"id":1296,"nodeType":"ParameterList","parameters":[],"src":"2026:2:9"},"returnParameters":{"id":1299,"nodeType":"ParameterList","parameters":[],"src":"2055:0:9"},"scope":1345,"src":"1985:109:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1315,"nodeType":"Block","src":"2495:79:9","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1308,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1331,"src":"2505:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2505:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1310,"nodeType":"ExpressionStatement","src":"2505:21:9"},{"id":1311,"nodeType":"PlaceholderStatement","src":"2536:1:9"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1312,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"2547:18:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2547:20:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1314,"nodeType":"ExpressionStatement","src":"2547:20:9"}]},"documentation":{"id":1306,"nodeType":"StructuredDocumentation","src":"2100:366:9","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":1316,"name":"nonReentrant","nameLocation":"2480:12:9","nodeType":"ModifierDefinition","parameters":{"id":1307,"nodeType":"ParameterList","parameters":[],"src":"2492:2:9"},"src":"2471:103:9","virtual":false,"visibility":"internal"},{"body":{"id":1330,"nodeType":"Block","src":"2619:248:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1320,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"2712:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1321,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"2723:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2712:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":1323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2733:33:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":1319,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2704:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2704:63:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1325,"nodeType":"ExpressionStatement","src":"2704:63:9"},{"expression":{"id":1328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1326,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"2842:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1327,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"2852:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2842:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1329,"nodeType":"ExpressionStatement","src":"2842:18:9"}]},"id":1331,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2589:19:9","nodeType":"FunctionDefinition","parameters":{"id":1317,"nodeType":"ParameterList","parameters":[],"src":"2608:2:9"},"returnParameters":{"id":1318,"nodeType":"ParameterList","parameters":[],"src":"2619:0:9"},"scope":1345,"src":"2580:287:9","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1338,"nodeType":"Block","src":"2911:171:9","statements":[{"expression":{"id":1336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1334,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"3053:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1335,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1281,"src":"3063:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3053:22:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1337,"nodeType":"ExpressionStatement","src":"3053:22:9"}]},"id":1339,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2882:18:9","nodeType":"FunctionDefinition","parameters":{"id":1332,"nodeType":"ParameterList","parameters":[],"src":"2900:2:9"},"returnParameters":{"id":1333,"nodeType":"ParameterList","parameters":[],"src":"2911:0:9"},"scope":1345,"src":"2873:209:9","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"constant":false,"documentation":{"id":1340,"nodeType":"StructuredDocumentation","src":"3088:254:9","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1344,"mutability":"mutable","name":"__gap","nameLocation":"3367:5:9","nodeType":"VariableDeclaration","scope":1345,"src":"3347:25:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":1341,"name":"uint256","nodeType":"ElementaryTypeName","src":"3347:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1343,"length":{"hexValue":"3439","id":1342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3355:2:9","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3347:11:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":1346,"src":"931:2444:9","usedErrors":[]}],"src":"112:3264:9"},"id":9},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1629]},"id":1630,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1347,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1348,"nodeType":"StructuredDocumentation","src":"126:67:10","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1629,"linearizedBaseContracts":[1629],"name":"AddressUpgradeable","nameLocation":"202:18:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":1362,"nodeType":"Block","src":"1252:254:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1356,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1351,"src":"1476:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1484:4:10","memberName":"code","nodeType":"MemberAccess","src":"1476:12:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1489:6:10","memberName":"length","nodeType":"MemberAccess","src":"1476:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1498:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1476:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1355,"id":1361,"nodeType":"Return","src":"1469:30:10"}]},"documentation":{"id":1349,"nodeType":"StructuredDocumentation","src":"227:954:10","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1363,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1195:10:10","nodeType":"FunctionDefinition","parameters":{"id":1352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1351,"mutability":"mutable","name":"account","nameLocation":"1214:7:10","nodeType":"VariableDeclaration","scope":1363,"src":"1206:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1350,"name":"address","nodeType":"ElementaryTypeName","src":"1206:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1205:17:10"},"returnParameters":{"id":1355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1354,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1363,"src":"1246:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1353,"name":"bool","nodeType":"ElementaryTypeName","src":"1246:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1245:6:10"},"scope":1629,"src":"1186:320:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1396,"nodeType":"Block","src":"2494:241:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1374,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2520:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1629","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1629","typeString":"library AddressUpgradeable"}],"id":1373,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2512:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1372,"name":"address","nodeType":"ElementaryTypeName","src":"2512:7:10","typeDescriptions":{}}},"id":1375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2512:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2526:7:10","memberName":"balance","nodeType":"MemberAccess","src":"2512:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1377,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"2537:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2512:31:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2545:31:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1371,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2504:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2504:73:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1381,"nodeType":"ExpressionStatement","src":"2504:73:10"},{"assignments":[1383,null],"declarations":[{"constant":false,"id":1383,"mutability":"mutable","name":"success","nameLocation":"2594:7:10","nodeType":"VariableDeclaration","scope":1396,"src":"2589:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1382,"name":"bool","nodeType":"ElementaryTypeName","src":"2589:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1390,"initialValue":{"arguments":[{"hexValue":"","id":1388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2637:2:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1384,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"2607:9:10","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2617:4:10","memberName":"call","nodeType":"MemberAccess","src":"2607:14:10","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1386,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"2629:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2607:29:10","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2607:33:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2588:52:10"},{"expression":{"arguments":[{"id":1392,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"2658:7:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2667:60:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1391,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2650:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2650:78:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1395,"nodeType":"ExpressionStatement","src":"2650:78:10"}]},"documentation":{"id":1364,"nodeType":"StructuredDocumentation","src":"1512:906:10","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1397,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2432:9:10","nodeType":"FunctionDefinition","parameters":{"id":1369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1366,"mutability":"mutable","name":"recipient","nameLocation":"2458:9:10","nodeType":"VariableDeclaration","scope":1397,"src":"2442:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1365,"name":"address","nodeType":"ElementaryTypeName","src":"2442:15:10","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1368,"mutability":"mutable","name":"amount","nameLocation":"2477:6:10","nodeType":"VariableDeclaration","scope":1397,"src":"2469:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1367,"name":"uint256","nodeType":"ElementaryTypeName","src":"2469:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2441:43:10"},"returnParameters":{"id":1370,"nodeType":"ParameterList","parameters":[],"src":"2494:0:10"},"scope":1629,"src":"2423:312:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1414,"nodeType":"Block","src":"3566:96:10","statements":[{"expression":{"arguments":[{"id":1408,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"3605:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1409,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1402,"src":"3613:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3619:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3622:32:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1407,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1455,1499],"referencedDeclaration":1499,"src":"3583:21:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3583:72:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1406,"id":1413,"nodeType":"Return","src":"3576:79:10"}]},"documentation":{"id":1398,"nodeType":"StructuredDocumentation","src":"2741:731:10","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1415,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3486:12:10","nodeType":"FunctionDefinition","parameters":{"id":1403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1400,"mutability":"mutable","name":"target","nameLocation":"3507:6:10","nodeType":"VariableDeclaration","scope":1415,"src":"3499:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1399,"name":"address","nodeType":"ElementaryTypeName","src":"3499:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1402,"mutability":"mutable","name":"data","nameLocation":"3528:4:10","nodeType":"VariableDeclaration","scope":1415,"src":"3515:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1401,"name":"bytes","nodeType":"ElementaryTypeName","src":"3515:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3498:35:10"},"returnParameters":{"id":1406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1405,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1415,"src":"3552:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1404,"name":"bytes","nodeType":"ElementaryTypeName","src":"3552:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3551:14:10"},"scope":1629,"src":"3477:185:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1434,"nodeType":"Block","src":"4031:76:10","statements":[{"expression":{"arguments":[{"id":1428,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"4070:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1429,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"4078:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4084:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1431,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1422,"src":"4087:12:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1427,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1455,1499],"referencedDeclaration":1499,"src":"4048:21:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4048:52:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1426,"id":1433,"nodeType":"Return","src":"4041:59:10"}]},"documentation":{"id":1416,"nodeType":"StructuredDocumentation","src":"3668:211:10","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1435,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3893:12:10","nodeType":"FunctionDefinition","parameters":{"id":1423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1418,"mutability":"mutable","name":"target","nameLocation":"3923:6:10","nodeType":"VariableDeclaration","scope":1435,"src":"3915:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1417,"name":"address","nodeType":"ElementaryTypeName","src":"3915:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1420,"mutability":"mutable","name":"data","nameLocation":"3952:4:10","nodeType":"VariableDeclaration","scope":1435,"src":"3939:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1419,"name":"bytes","nodeType":"ElementaryTypeName","src":"3939:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1422,"mutability":"mutable","name":"errorMessage","nameLocation":"3980:12:10","nodeType":"VariableDeclaration","scope":1435,"src":"3966:26:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1421,"name":"string","nodeType":"ElementaryTypeName","src":"3966:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3905:93:10"},"returnParameters":{"id":1426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1425,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1435,"src":"4017:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1424,"name":"bytes","nodeType":"ElementaryTypeName","src":"4017:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4016:14:10"},"scope":1629,"src":"3884:223:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1454,"nodeType":"Block","src":"4612:111:10","statements":[{"expression":{"arguments":[{"id":1448,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"4651:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1449,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"4659:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1450,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"4665:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4672:43:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1447,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1455,1499],"referencedDeclaration":1499,"src":"4629:21:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4629:87:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1446,"id":1453,"nodeType":"Return","src":"4622:94:10"}]},"documentation":{"id":1436,"nodeType":"StructuredDocumentation","src":"4113:351:10","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1455,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4478:21:10","nodeType":"FunctionDefinition","parameters":{"id":1443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1438,"mutability":"mutable","name":"target","nameLocation":"4517:6:10","nodeType":"VariableDeclaration","scope":1455,"src":"4509:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1437,"name":"address","nodeType":"ElementaryTypeName","src":"4509:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1440,"mutability":"mutable","name":"data","nameLocation":"4546:4:10","nodeType":"VariableDeclaration","scope":1455,"src":"4533:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1439,"name":"bytes","nodeType":"ElementaryTypeName","src":"4533:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1442,"mutability":"mutable","name":"value","nameLocation":"4568:5:10","nodeType":"VariableDeclaration","scope":1455,"src":"4560:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1441,"name":"uint256","nodeType":"ElementaryTypeName","src":"4560:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4499:80:10"},"returnParameters":{"id":1446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1445,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1455,"src":"4598:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1444,"name":"bytes","nodeType":"ElementaryTypeName","src":"4598:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4597:14:10"},"scope":1629,"src":"4469:254:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1498,"nodeType":"Block","src":"5150:267:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1472,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5176:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1629","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1629","typeString":"library AddressUpgradeable"}],"id":1471,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5168:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1470,"name":"address","nodeType":"ElementaryTypeName","src":"5168:7:10","typeDescriptions":{}}},"id":1473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5168:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5182:7:10","memberName":"balance","nodeType":"MemberAccess","src":"5168:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1475,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"5193:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5168:30:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5200:40:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1469,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5160:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5160:81:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1479,"nodeType":"ExpressionStatement","src":"5160:81:10"},{"assignments":[1481,1483],"declarations":[{"constant":false,"id":1481,"mutability":"mutable","name":"success","nameLocation":"5257:7:10","nodeType":"VariableDeclaration","scope":1498,"src":"5252:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1480,"name":"bool","nodeType":"ElementaryTypeName","src":"5252:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1483,"mutability":"mutable","name":"returndata","nameLocation":"5279:10:10","nodeType":"VariableDeclaration","scope":1498,"src":"5266:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1482,"name":"bytes","nodeType":"ElementaryTypeName","src":"5266:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1490,"initialValue":{"arguments":[{"id":1488,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"5319:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1484,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"5293:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5300:4:10","memberName":"call","nodeType":"MemberAccess","src":"5293:11:10","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1486,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"5312:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5293:25:10","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5293:31:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5251:73:10"},{"expression":{"arguments":[{"id":1492,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"5368:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1493,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"5376:7:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1494,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1483,"src":"5385:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1495,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"5397:12:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1491,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"5341:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5341:69:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1468,"id":1497,"nodeType":"Return","src":"5334:76:10"}]},"documentation":{"id":1456,"nodeType":"StructuredDocumentation","src":"4729:237:10","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1499,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4980:21:10","nodeType":"FunctionDefinition","parameters":{"id":1465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1458,"mutability":"mutable","name":"target","nameLocation":"5019:6:10","nodeType":"VariableDeclaration","scope":1499,"src":"5011:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1457,"name":"address","nodeType":"ElementaryTypeName","src":"5011:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1460,"mutability":"mutable","name":"data","nameLocation":"5048:4:10","nodeType":"VariableDeclaration","scope":1499,"src":"5035:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1459,"name":"bytes","nodeType":"ElementaryTypeName","src":"5035:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1462,"mutability":"mutable","name":"value","nameLocation":"5070:5:10","nodeType":"VariableDeclaration","scope":1499,"src":"5062:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1461,"name":"uint256","nodeType":"ElementaryTypeName","src":"5062:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1464,"mutability":"mutable","name":"errorMessage","nameLocation":"5099:12:10","nodeType":"VariableDeclaration","scope":1499,"src":"5085:26:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1463,"name":"string","nodeType":"ElementaryTypeName","src":"5085:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5001:116:10"},"returnParameters":{"id":1468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1499,"src":"5136:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1466,"name":"bytes","nodeType":"ElementaryTypeName","src":"5136:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5135:14:10"},"scope":1629,"src":"4971:446:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1515,"nodeType":"Block","src":"5694:97:10","statements":[{"expression":{"arguments":[{"id":1510,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1502,"src":"5730:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1511,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"5738:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5744:39:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1509,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1516,1545],"referencedDeclaration":1545,"src":"5711:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5711:73:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1508,"id":1514,"nodeType":"Return","src":"5704:80:10"}]},"documentation":{"id":1500,"nodeType":"StructuredDocumentation","src":"5423:166:10","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1516,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5603:18:10","nodeType":"FunctionDefinition","parameters":{"id":1505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1502,"mutability":"mutable","name":"target","nameLocation":"5630:6:10","nodeType":"VariableDeclaration","scope":1516,"src":"5622:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1501,"name":"address","nodeType":"ElementaryTypeName","src":"5622:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1504,"mutability":"mutable","name":"data","nameLocation":"5651:4:10","nodeType":"VariableDeclaration","scope":1516,"src":"5638:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1503,"name":"bytes","nodeType":"ElementaryTypeName","src":"5638:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5621:35:10"},"returnParameters":{"id":1508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1507,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1516,"src":"5680:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1506,"name":"bytes","nodeType":"ElementaryTypeName","src":"5680:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5679:14:10"},"scope":1629,"src":"5594:197:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1544,"nodeType":"Block","src":"6133:168:10","statements":[{"assignments":[1529,1531],"declarations":[{"constant":false,"id":1529,"mutability":"mutable","name":"success","nameLocation":"6149:7:10","nodeType":"VariableDeclaration","scope":1544,"src":"6144:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1528,"name":"bool","nodeType":"ElementaryTypeName","src":"6144:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1531,"mutability":"mutable","name":"returndata","nameLocation":"6171:10:10","nodeType":"VariableDeclaration","scope":1544,"src":"6158:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1530,"name":"bytes","nodeType":"ElementaryTypeName","src":"6158:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1536,"initialValue":{"arguments":[{"id":1534,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"6203:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1532,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1519,"src":"6185:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6192:10:10","memberName":"staticcall","nodeType":"MemberAccess","src":"6185:17:10","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6185:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6143:65:10"},{"expression":{"arguments":[{"id":1538,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1519,"src":"6252:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1539,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"6260:7:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1540,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"6269:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1541,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"6281:12:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1537,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"6225:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6225:69:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1527,"id":1543,"nodeType":"Return","src":"6218:76:10"}]},"documentation":{"id":1517,"nodeType":"StructuredDocumentation","src":"5797:173:10","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1545,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5984:18:10","nodeType":"FunctionDefinition","parameters":{"id":1524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1519,"mutability":"mutable","name":"target","nameLocation":"6020:6:10","nodeType":"VariableDeclaration","scope":1545,"src":"6012:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1518,"name":"address","nodeType":"ElementaryTypeName","src":"6012:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1521,"mutability":"mutable","name":"data","nameLocation":"6049:4:10","nodeType":"VariableDeclaration","scope":1545,"src":"6036:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1520,"name":"bytes","nodeType":"ElementaryTypeName","src":"6036:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1523,"mutability":"mutable","name":"errorMessage","nameLocation":"6077:12:10","nodeType":"VariableDeclaration","scope":1545,"src":"6063:26:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1522,"name":"string","nodeType":"ElementaryTypeName","src":"6063:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6002:93:10"},"returnParameters":{"id":1527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1526,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1545,"src":"6119:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1525,"name":"bytes","nodeType":"ElementaryTypeName","src":"6119:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6118:14:10"},"scope":1629,"src":"5975:326:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1583,"nodeType":"Block","src":"6783:434:10","statements":[{"condition":{"id":1559,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1550,"src":"6797:7:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1581,"nodeType":"Block","src":"7153:58:10","statements":[{"expression":{"arguments":[{"id":1577,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1552,"src":"7175:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1578,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"7187:12:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1576,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"7167:7:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7167:33:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1580,"nodeType":"ExpressionStatement","src":"7167:33:10"}]},"id":1582,"nodeType":"IfStatement","src":"6793:418:10","trueBody":{"id":1575,"nodeType":"Block","src":"6806:341:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1560,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1552,"src":"6824:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6835:6:10","memberName":"length","nodeType":"MemberAccess","src":"6824:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6845:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6824:22:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1572,"nodeType":"IfStatement","src":"6820:286:10","trueBody":{"id":1571,"nodeType":"Block","src":"6848:258:10","statements":[{"expression":{"arguments":[{"arguments":[{"id":1566,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"7050:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1565,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"7039:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7039:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7059:31:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1564,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7031:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7031:60:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1570,"nodeType":"ExpressionStatement","src":"7031:60:10"}]}},{"expression":{"id":1573,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1552,"src":"7126:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1558,"id":1574,"nodeType":"Return","src":"7119:17:10"}]}}]},"documentation":{"id":1546,"nodeType":"StructuredDocumentation","src":"6307:277:10","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1584,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"6598:26:10","nodeType":"FunctionDefinition","parameters":{"id":1555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1548,"mutability":"mutable","name":"target","nameLocation":"6642:6:10","nodeType":"VariableDeclaration","scope":1584,"src":"6634:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1547,"name":"address","nodeType":"ElementaryTypeName","src":"6634:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1550,"mutability":"mutable","name":"success","nameLocation":"6663:7:10","nodeType":"VariableDeclaration","scope":1584,"src":"6658:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1549,"name":"bool","nodeType":"ElementaryTypeName","src":"6658:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1552,"mutability":"mutable","name":"returndata","nameLocation":"6693:10:10","nodeType":"VariableDeclaration","scope":1584,"src":"6680:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1551,"name":"bytes","nodeType":"ElementaryTypeName","src":"6680:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1554,"mutability":"mutable","name":"errorMessage","nameLocation":"6727:12:10","nodeType":"VariableDeclaration","scope":1584,"src":"6713:26:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1553,"name":"string","nodeType":"ElementaryTypeName","src":"6713:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6624:121:10"},"returnParameters":{"id":1558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1557,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1584,"src":"6769:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1556,"name":"bytes","nodeType":"ElementaryTypeName","src":"6769:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6768:14:10"},"scope":1629,"src":"6589:628:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1607,"nodeType":"Block","src":"7598:135:10","statements":[{"condition":{"id":1596,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"7612:7:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1605,"nodeType":"Block","src":"7669:58:10","statements":[{"expression":{"arguments":[{"id":1601,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"7691:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1602,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"7703:12:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1600,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"7683:7:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7683:33:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1604,"nodeType":"ExpressionStatement","src":"7683:33:10"}]},"id":1606,"nodeType":"IfStatement","src":"7608:119:10","trueBody":{"id":1599,"nodeType":"Block","src":"7621:42:10","statements":[{"expression":{"id":1597,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"7642:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1595,"id":1598,"nodeType":"Return","src":"7635:17:10"}]}}]},"documentation":{"id":1585,"nodeType":"StructuredDocumentation","src":"7223:210:10","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1608,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"7447:16:10","nodeType":"FunctionDefinition","parameters":{"id":1592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1587,"mutability":"mutable","name":"success","nameLocation":"7478:7:10","nodeType":"VariableDeclaration","scope":1608,"src":"7473:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1586,"name":"bool","nodeType":"ElementaryTypeName","src":"7473:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1589,"mutability":"mutable","name":"returndata","nameLocation":"7508:10:10","nodeType":"VariableDeclaration","scope":1608,"src":"7495:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1588,"name":"bytes","nodeType":"ElementaryTypeName","src":"7495:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1591,"mutability":"mutable","name":"errorMessage","nameLocation":"7542:12:10","nodeType":"VariableDeclaration","scope":1608,"src":"7528:26:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1590,"name":"string","nodeType":"ElementaryTypeName","src":"7528:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7463:97:10"},"returnParameters":{"id":1595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1594,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1608,"src":"7584:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1593,"name":"bytes","nodeType":"ElementaryTypeName","src":"7584:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7583:14:10"},"scope":1629,"src":"7438:295:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1627,"nodeType":"Block","src":"7822:457:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1615,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"7898:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7909:6:10","memberName":"length","nodeType":"MemberAccess","src":"7898:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7918:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7898:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1625,"nodeType":"Block","src":"8228:45:10","statements":[{"expression":{"arguments":[{"id":1622,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1612,"src":"8249:12:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1621,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"8242:6:10","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8242:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1624,"nodeType":"ExpressionStatement","src":"8242:20:10"}]},"id":1626,"nodeType":"IfStatement","src":"7894:379:10","trueBody":{"id":1620,"nodeType":"Block","src":"7921:301:10","statements":[{"AST":{"nodeType":"YulBlock","src":"8079:133:10","statements":[{"nodeType":"YulVariableDeclaration","src":"8097:40:10","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"8126:10:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8120:5:10"},"nodeType":"YulFunctionCall","src":"8120:17:10"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8101:15:10","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8165:2:10","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"8169:10:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8161:3:10"},"nodeType":"YulFunctionCall","src":"8161:19:10"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"8182:15:10"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8154:6:10"},"nodeType":"YulFunctionCall","src":"8154:44:10"},"nodeType":"YulExpressionStatement","src":"8154:44:10"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1610,"isOffset":false,"isSlot":false,"src":"8126:10:10","valueSize":1},{"declaration":1610,"isOffset":false,"isSlot":false,"src":"8169:10:10","valueSize":1}],"id":1619,"nodeType":"InlineAssembly","src":"8070:142:10"}]}}]},"id":1628,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"7748:7:10","nodeType":"FunctionDefinition","parameters":{"id":1613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1610,"mutability":"mutable","name":"returndata","nameLocation":"7769:10:10","nodeType":"VariableDeclaration","scope":1628,"src":"7756:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1609,"name":"bytes","nodeType":"ElementaryTypeName","src":"7756:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1612,"mutability":"mutable","name":"errorMessage","nameLocation":"7795:12:10","nodeType":"VariableDeclaration","scope":1628,"src":"7781:26:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1611,"name":"string","nodeType":"ElementaryTypeName","src":"7781:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7755:53:10"},"returnParameters":{"id":1614,"nodeType":"ParameterList","parameters":[],"src":"7822:0:10"},"scope":1629,"src":"7739:540:10","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1630,"src":"194:8087:10","usedErrors":[]}],"src":"101:8181:10"},"id":10},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1629],"ContextUpgradeable":[1671],"Initializable":[1136]},"id":1672,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1631,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:11"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1632,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1672,"sourceUnit":1137,"src":"110:42:11","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1634,"name":"Initializable","nameLocations":["691:13:11"],"nodeType":"IdentifierPath","referencedDeclaration":1136,"src":"691:13:11"},"id":1635,"nodeType":"InheritanceSpecifier","src":"691:13:11"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1633,"nodeType":"StructuredDocumentation","src":"154:496:11","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1671,"linearizedBaseContracts":[1671,1136],"name":"ContextUpgradeable","nameLocation":"669:18:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":1640,"nodeType":"Block","src":"763:7:11","statements":[]},"id":1641,"implemented":true,"kind":"function","modifiers":[{"id":1638,"kind":"modifierInvocation","modifierName":{"id":1637,"name":"onlyInitializing","nameLocations":["746:16:11"],"nodeType":"IdentifierPath","referencedDeclaration":1081,"src":"746:16:11"},"nodeType":"ModifierInvocation","src":"746:16:11"}],"name":"__Context_init","nameLocation":"720:14:11","nodeType":"FunctionDefinition","parameters":{"id":1636,"nodeType":"ParameterList","parameters":[],"src":"734:2:11"},"returnParameters":{"id":1639,"nodeType":"ParameterList","parameters":[],"src":"763:0:11"},"scope":1671,"src":"711:59:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1646,"nodeType":"Block","src":"838:7:11","statements":[]},"id":1647,"implemented":true,"kind":"function","modifiers":[{"id":1644,"kind":"modifierInvocation","modifierName":{"id":1643,"name":"onlyInitializing","nameLocations":["821:16:11"],"nodeType":"IdentifierPath","referencedDeclaration":1081,"src":"821:16:11"},"nodeType":"ModifierInvocation","src":"821:16:11"}],"name":"__Context_init_unchained","nameLocation":"785:24:11","nodeType":"FunctionDefinition","parameters":{"id":1642,"nodeType":"ParameterList","parameters":[],"src":"809:2:11"},"returnParameters":{"id":1645,"nodeType":"ParameterList","parameters":[],"src":"838:0:11"},"scope":1671,"src":"776:69:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1655,"nodeType":"Block","src":"912:34:11","statements":[{"expression":{"expression":{"id":1652,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:11","memberName":"sender","nodeType":"MemberAccess","src":"929:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1651,"id":1654,"nodeType":"Return","src":"922:17:11"}]},"id":1656,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:11","nodeType":"FunctionDefinition","parameters":{"id":1648,"nodeType":"ParameterList","parameters":[],"src":"869:2:11"},"returnParameters":{"id":1651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1650,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1656,"src":"903:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1649,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:11"},"scope":1671,"src":"850:96:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1664,"nodeType":"Block","src":"1019:32:11","statements":[{"expression":{"expression":{"id":1661,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:11","memberName":"data","nodeType":"MemberAccess","src":"1036:8:11","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1660,"id":1663,"nodeType":"Return","src":"1029:15:11"}]},"id":1665,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:11","nodeType":"FunctionDefinition","parameters":{"id":1657,"nodeType":"ParameterList","parameters":[],"src":"969:2:11"},"returnParameters":{"id":1660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1659,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1665,"src":"1003:14:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1658,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:11"},"scope":1671,"src":"952:99:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1666,"nodeType":"StructuredDocumentation","src":"1057:254:11","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1670,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:11","nodeType":"VariableDeclaration","scope":1671,"src":"1316:25:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1667,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1669,"length":{"hexValue":"3530","id":1668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:11","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1672,"src":"651:693:11","usedErrors":[]}],"src":"86:1259:11"},"id":11},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","exportedSymbols":{"StorageSlotUpgradeable":[1731]},"id":1732,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1673,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlotUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1674,"nodeType":"StructuredDocumentation","src":"130:1148:12","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._"},"fullyImplemented":true,"id":1731,"linearizedBaseContracts":[1731],"name":"StorageSlotUpgradeable","nameLocation":"1287:22:12","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlotUpgradeable.AddressSlot","id":1677,"members":[{"constant":false,"id":1676,"mutability":"mutable","name":"value","nameLocation":"1353:5:12","nodeType":"VariableDeclaration","scope":1677,"src":"1345:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1675,"name":"address","nodeType":"ElementaryTypeName","src":"1345:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1323:11:12","nodeType":"StructDefinition","scope":1731,"src":"1316:49:12","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.BooleanSlot","id":1680,"members":[{"constant":false,"id":1679,"mutability":"mutable","name":"value","nameLocation":"1405:5:12","nodeType":"VariableDeclaration","scope":1680,"src":"1400:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1678,"name":"bool","nodeType":"ElementaryTypeName","src":"1400:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1378:11:12","nodeType":"StructDefinition","scope":1731,"src":"1371:46:12","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Bytes32Slot","id":1683,"members":[{"constant":false,"id":1682,"mutability":"mutable","name":"value","nameLocation":"1460:5:12","nodeType":"VariableDeclaration","scope":1683,"src":"1452:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1681,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1452:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1430:11:12","nodeType":"StructDefinition","scope":1731,"src":"1423:49:12","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Uint256Slot","id":1686,"members":[{"constant":false,"id":1685,"mutability":"mutable","name":"value","nameLocation":"1515:5:12","nodeType":"VariableDeclaration","scope":1686,"src":"1507:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1684,"name":"uint256","nodeType":"ElementaryTypeName","src":"1507:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1485:11:12","nodeType":"StructDefinition","scope":1731,"src":"1478:49:12","visibility":"public"},{"body":{"id":1696,"nodeType":"Block","src":"1709:106:12","statements":[{"AST":{"nodeType":"YulBlock","src":"1771:38:12","statements":[{"nodeType":"YulAssignment","src":"1785:14:12","value":{"name":"slot","nodeType":"YulIdentifier","src":"1795:4:12"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"1785:6:12"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1693,"isOffset":false,"isSlot":true,"src":"1785:6:12","suffix":"slot","valueSize":1},{"declaration":1689,"isOffset":false,"isSlot":false,"src":"1795:4:12","valueSize":1}],"id":1695,"nodeType":"InlineAssembly","src":"1762:47:12"}]},"documentation":{"id":1687,"nodeType":"StructuredDocumentation","src":"1533:87:12","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":1697,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1634:14:12","nodeType":"FunctionDefinition","parameters":{"id":1690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1689,"mutability":"mutable","name":"slot","nameLocation":"1657:4:12","nodeType":"VariableDeclaration","scope":1697,"src":"1649:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1688,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1649:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1648:14:12"},"returnParameters":{"id":1694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1693,"mutability":"mutable","name":"r","nameLocation":"1706:1:12","nodeType":"VariableDeclaration","scope":1697,"src":"1686:21:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1677_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"},"typeName":{"id":1692,"nodeType":"UserDefinedTypeName","pathNode":{"id":1691,"name":"AddressSlot","nameLocations":["1686:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":1677,"src":"1686:11:12"},"referencedDeclaration":1677,"src":"1686:11:12","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1677_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"}},"visibility":"internal"}],"src":"1685:23:12"},"scope":1731,"src":"1625:190:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1707,"nodeType":"Block","src":"1997:106:12","statements":[{"AST":{"nodeType":"YulBlock","src":"2059:38:12","statements":[{"nodeType":"YulAssignment","src":"2073:14:12","value":{"name":"slot","nodeType":"YulIdentifier","src":"2083:4:12"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2073:6:12"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1704,"isOffset":false,"isSlot":true,"src":"2073:6:12","suffix":"slot","valueSize":1},{"declaration":1700,"isOffset":false,"isSlot":false,"src":"2083:4:12","valueSize":1}],"id":1706,"nodeType":"InlineAssembly","src":"2050:47:12"}]},"documentation":{"id":1698,"nodeType":"StructuredDocumentation","src":"1821:87:12","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":1708,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1922:14:12","nodeType":"FunctionDefinition","parameters":{"id":1701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1700,"mutability":"mutable","name":"slot","nameLocation":"1945:4:12","nodeType":"VariableDeclaration","scope":1708,"src":"1937:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1699,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1937:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1936:14:12"},"returnParameters":{"id":1705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1704,"mutability":"mutable","name":"r","nameLocation":"1994:1:12","nodeType":"VariableDeclaration","scope":1708,"src":"1974:21:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1680_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"},"typeName":{"id":1703,"nodeType":"UserDefinedTypeName","pathNode":{"id":1702,"name":"BooleanSlot","nameLocations":["1974:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":1680,"src":"1974:11:12"},"referencedDeclaration":1680,"src":"1974:11:12","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1680_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"}},"visibility":"internal"}],"src":"1973:23:12"},"scope":1731,"src":"1913:190:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1718,"nodeType":"Block","src":"2285:106:12","statements":[{"AST":{"nodeType":"YulBlock","src":"2347:38:12","statements":[{"nodeType":"YulAssignment","src":"2361:14:12","value":{"name":"slot","nodeType":"YulIdentifier","src":"2371:4:12"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2361:6:12"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1715,"isOffset":false,"isSlot":true,"src":"2361:6:12","suffix":"slot","valueSize":1},{"declaration":1711,"isOffset":false,"isSlot":false,"src":"2371:4:12","valueSize":1}],"id":1717,"nodeType":"InlineAssembly","src":"2338:47:12"}]},"documentation":{"id":1709,"nodeType":"StructuredDocumentation","src":"2109:87:12","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":1719,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2210:14:12","nodeType":"FunctionDefinition","parameters":{"id":1712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1711,"mutability":"mutable","name":"slot","nameLocation":"2233:4:12","nodeType":"VariableDeclaration","scope":1719,"src":"2225:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1710,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2225:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2224:14:12"},"returnParameters":{"id":1716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1715,"mutability":"mutable","name":"r","nameLocation":"2282:1:12","nodeType":"VariableDeclaration","scope":1719,"src":"2262:21:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1683_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"},"typeName":{"id":1714,"nodeType":"UserDefinedTypeName","pathNode":{"id":1713,"name":"Bytes32Slot","nameLocations":["2262:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":1683,"src":"2262:11:12"},"referencedDeclaration":1683,"src":"2262:11:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1683_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"}},"visibility":"internal"}],"src":"2261:23:12"},"scope":1731,"src":"2201:190:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1729,"nodeType":"Block","src":"2573:106:12","statements":[{"AST":{"nodeType":"YulBlock","src":"2635:38:12","statements":[{"nodeType":"YulAssignment","src":"2649:14:12","value":{"name":"slot","nodeType":"YulIdentifier","src":"2659:4:12"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2649:6:12"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1726,"isOffset":false,"isSlot":true,"src":"2649:6:12","suffix":"slot","valueSize":1},{"declaration":1722,"isOffset":false,"isSlot":false,"src":"2659:4:12","valueSize":1}],"id":1728,"nodeType":"InlineAssembly","src":"2626:47:12"}]},"documentation":{"id":1720,"nodeType":"StructuredDocumentation","src":"2397:87:12","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":1730,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2498:14:12","nodeType":"FunctionDefinition","parameters":{"id":1723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1722,"mutability":"mutable","name":"slot","nameLocation":"2521:4:12","nodeType":"VariableDeclaration","scope":1730,"src":"2513:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1721,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2513:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2512:14:12"},"returnParameters":{"id":1727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1726,"mutability":"mutable","name":"r","nameLocation":"2570:1:12","nodeType":"VariableDeclaration","scope":1730,"src":"2550:21:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1686_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"},"typeName":{"id":1725,"nodeType":"UserDefinedTypeName","pathNode":{"id":1724,"name":"Uint256Slot","nameLocations":["2550:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":1686,"src":"2550:11:12"},"referencedDeclaration":1686,"src":"2550:11:12","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1686_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"}},"visibility":"internal"}],"src":"2549:23:12"},"scope":1731,"src":"2489:190:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1732,"src":"1279:1402:12","usedErrors":[]}],"src":"105:2577:12"},"id":12},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2827],"StringsUpgradeable":[1906]},"id":1907,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1733,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:13"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":1734,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1907,"sourceUnit":2828,"src":"126:36:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1735,"nodeType":"StructuredDocumentation","src":"164:34:13","text":" @dev String operations."},"fullyImplemented":true,"id":1906,"linearizedBaseContracts":[1906],"name":"StringsUpgradeable","nameLocation":"207:18:13","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1738,"mutability":"constant","name":"_SYMBOLS","nameLocation":"257:8:13","nodeType":"VariableDeclaration","scope":1906,"src":"232:54:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1736,"name":"bytes16","nodeType":"ElementaryTypeName","src":"232:7:13","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"268:18:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1741,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"315:15:13","nodeType":"VariableDeclaration","scope":1906,"src":"292:43:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1739,"name":"uint8","nodeType":"ElementaryTypeName","src":"292:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"333:2:13","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1788,"nodeType":"Block","src":"508:636:13","statements":[{"id":1787,"nodeType":"UncheckedBlock","src":"518:620:13","statements":[{"assignments":[1750],"declarations":[{"constant":false,"id":1750,"mutability":"mutable","name":"length","nameLocation":"550:6:13","nodeType":"VariableDeclaration","scope":1787,"src":"542:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1749,"name":"uint256","nodeType":"ElementaryTypeName","src":"542:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1757,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1753,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1744,"src":"581:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1751,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"559:15:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2827_$","typeString":"type(library MathUpgradeable)"}},"id":1752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"575:5:13","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2664,"src":"559:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"559:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"590:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"559:32:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"542:49:13"},{"assignments":[1759],"declarations":[{"constant":false,"id":1759,"mutability":"mutable","name":"buffer","nameLocation":"619:6:13","nodeType":"VariableDeclaration","scope":1787,"src":"605:20:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1758,"name":"string","nodeType":"ElementaryTypeName","src":"605:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1764,"initialValue":{"arguments":[{"id":1762,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1750,"src":"639:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1761,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"628:10:13","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1760,"name":"string","nodeType":"ElementaryTypeName","src":"632:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"628:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"605:41:13"},{"assignments":[1766],"declarations":[{"constant":false,"id":1766,"mutability":"mutable","name":"ptr","nameLocation":"668:3:13","nodeType":"VariableDeclaration","scope":1787,"src":"660:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1765,"name":"uint256","nodeType":"ElementaryTypeName","src":"660:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1767,"nodeType":"VariableDeclarationStatement","src":"660:11:13"},{"AST":{"nodeType":"YulBlock","src":"741:67:13","statements":[{"nodeType":"YulAssignment","src":"759:35:13","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"770:6:13"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"782:2:13","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"786:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"778:3:13"},"nodeType":"YulFunctionCall","src":"778:15:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"766:3:13"},"nodeType":"YulFunctionCall","src":"766:28:13"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"759:3:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1759,"isOffset":false,"isSlot":false,"src":"770:6:13","valueSize":1},{"declaration":1750,"isOffset":false,"isSlot":false,"src":"786:6:13","valueSize":1},{"declaration":1766,"isOffset":false,"isSlot":false,"src":"759:3:13","valueSize":1}],"id":1768,"nodeType":"InlineAssembly","src":"732:76:13"},{"body":{"id":1783,"nodeType":"Block","src":"834:267:13","statements":[{"expression":{"id":1771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"852:5:13","subExpression":{"id":1770,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"852:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1772,"nodeType":"ExpressionStatement","src":"852:5:13"},{"AST":{"nodeType":"YulBlock","src":"935:84:13","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"965:3:13"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"979:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"986:2:13","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"975:3:13"},"nodeType":"YulFunctionCall","src":"975:14:13"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"991:8:13"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"970:4:13"},"nodeType":"YulFunctionCall","src":"970:30:13"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"957:7:13"},"nodeType":"YulFunctionCall","src":"957:44:13"},"nodeType":"YulExpressionStatement","src":"957:44:13"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1738,"isOffset":false,"isSlot":false,"src":"991:8:13","valueSize":1},{"declaration":1766,"isOffset":false,"isSlot":false,"src":"965:3:13","valueSize":1},{"declaration":1744,"isOffset":false,"isSlot":false,"src":"979:5:13","valueSize":1}],"id":1773,"nodeType":"InlineAssembly","src":"926:93:13"},{"expression":{"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1774,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1744,"src":"1036:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1036:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1777,"nodeType":"ExpressionStatement","src":"1036:11:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1778,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1744,"src":"1069:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1078:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1069:10:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1782,"nodeType":"IfStatement","src":"1065:21:13","trueBody":{"id":1781,"nodeType":"Break","src":"1081:5:13"}}]},"condition":{"hexValue":"74727565","id":1769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"828:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1784,"nodeType":"WhileStatement","src":"821:280:13"},{"expression":{"id":1785,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"1121:6:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1748,"id":1786,"nodeType":"Return","src":"1114:13:13"}]}]},"documentation":{"id":1742,"nodeType":"StructuredDocumentation","src":"342:90:13","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1789,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"446:8:13","nodeType":"FunctionDefinition","parameters":{"id":1745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1744,"mutability":"mutable","name":"value","nameLocation":"463:5:13","nodeType":"VariableDeclaration","scope":1789,"src":"455:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1743,"name":"uint256","nodeType":"ElementaryTypeName","src":"455:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"454:15:13"},"returnParameters":{"id":1748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1747,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1789,"src":"493:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1746,"name":"string","nodeType":"ElementaryTypeName","src":"493:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"492:15:13"},"scope":1906,"src":"437:707:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1808,"nodeType":"Block","src":"1323:111:13","statements":[{"id":1807,"nodeType":"UncheckedBlock","src":"1333:95:13","statements":[{"expression":{"arguments":[{"id":1798,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"1376:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1801,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"1406:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1799,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"1383:15:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2827_$","typeString":"type(library MathUpgradeable)"}},"id":1800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1399:6:13","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2787,"src":"1383:22:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1383:29:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1415:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1383:33:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1797,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1809,1885,1905],"referencedDeclaration":1885,"src":"1364:11:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1364:53:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1796,"id":1806,"nodeType":"Return","src":"1357:60:13"}]}]},"documentation":{"id":1790,"nodeType":"StructuredDocumentation","src":"1150:94:13","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1809,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1258:11:13","nodeType":"FunctionDefinition","parameters":{"id":1793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1792,"mutability":"mutable","name":"value","nameLocation":"1278:5:13","nodeType":"VariableDeclaration","scope":1809,"src":"1270:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1791,"name":"uint256","nodeType":"ElementaryTypeName","src":"1270:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1269:15:13"},"returnParameters":{"id":1796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1795,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1809,"src":"1308:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1794,"name":"string","nodeType":"ElementaryTypeName","src":"1308:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1307:15:13"},"scope":1906,"src":"1249:185:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1884,"nodeType":"Block","src":"1647:347:13","statements":[{"assignments":[1820],"declarations":[{"constant":false,"id":1820,"mutability":"mutable","name":"buffer","nameLocation":"1670:6:13","nodeType":"VariableDeclaration","scope":1884,"src":"1657:19:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1819,"name":"bytes","nodeType":"ElementaryTypeName","src":"1657:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1829,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1689:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1824,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1814,"src":"1693:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1689:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1689:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1822,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1679:9:13","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1821,"name":"bytes","nodeType":"ElementaryTypeName","src":"1683:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1679:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1657:47:13"},{"expression":{"id":1834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1830,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"1714:6:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1832,"indexExpression":{"hexValue":"30","id":1831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1721:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1714:9:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1726:3:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1714:15:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1835,"nodeType":"ExpressionStatement","src":"1714:15:13"},{"expression":{"id":1840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1836,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"1739:6:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1838,"indexExpression":{"hexValue":"31","id":1837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1746:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1739:9:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1751:3:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1739:15:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1841,"nodeType":"ExpressionStatement","src":"1739:15:13"},{"body":{"id":1870,"nodeType":"Block","src":"1809:83:13","statements":[{"expression":{"id":1864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1856,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"1823:6:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1858,"indexExpression":{"id":1857,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"1830:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1823:9:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1859,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"1835:8:13","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1863,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1860,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"1844:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1852:3:13","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1844:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1835:21:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1823:33:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1865,"nodeType":"ExpressionStatement","src":"1823:33:13"},{"expression":{"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1866,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"1870:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1880:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1870:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1869,"nodeType":"ExpressionStatement","src":"1870:11:13"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1850,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"1797:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1801:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1797:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1871,"initializationExpression":{"assignments":[1843],"declarations":[{"constant":false,"id":1843,"mutability":"mutable","name":"i","nameLocation":"1777:1:13","nodeType":"VariableDeclaration","scope":1871,"src":"1769:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1842,"name":"uint256","nodeType":"ElementaryTypeName","src":"1769:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1849,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1781:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1845,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1814,"src":"1785:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1781:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1794:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1781:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1769:26:13"},"loopExpression":{"expression":{"id":1854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1804:3:13","subExpression":{"id":1853,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"1806:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1855,"nodeType":"ExpressionStatement","src":"1804:3:13"},"nodeType":"ForStatement","src":"1764:128:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1873,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"1909:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1918:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1909:10:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1921:34:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1872,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1901:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:55:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1878,"nodeType":"ExpressionStatement","src":"1901:55:13"},{"expression":{"arguments":[{"id":1881,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"1980:6:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1880,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1973:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1879,"name":"string","nodeType":"ElementaryTypeName","src":"1973:6:13","typeDescriptions":{}}},"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1973:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1818,"id":1883,"nodeType":"Return","src":"1966:21:13"}]},"documentation":{"id":1810,"nodeType":"StructuredDocumentation","src":"1440:112:13","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1885,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1566:11:13","nodeType":"FunctionDefinition","parameters":{"id":1815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1812,"mutability":"mutable","name":"value","nameLocation":"1586:5:13","nodeType":"VariableDeclaration","scope":1885,"src":"1578:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1811,"name":"uint256","nodeType":"ElementaryTypeName","src":"1578:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1814,"mutability":"mutable","name":"length","nameLocation":"1601:6:13","nodeType":"VariableDeclaration","scope":1885,"src":"1593:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1813,"name":"uint256","nodeType":"ElementaryTypeName","src":"1593:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1577:31:13"},"returnParameters":{"id":1818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1817,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1885,"src":"1632:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1816,"name":"string","nodeType":"ElementaryTypeName","src":"1632:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1631:15:13"},"scope":1906,"src":"1557:437:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1904,"nodeType":"Block","src":"2219:76:13","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1898,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"2264:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1897,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2256:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1896,"name":"uint160","nodeType":"ElementaryTypeName","src":"2256:7:13","typeDescriptions":{}}},"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2256:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1895,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2248:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1894,"name":"uint256","nodeType":"ElementaryTypeName","src":"2248:7:13","typeDescriptions":{}}},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2248:22:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1901,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1741,"src":"2272:15:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1893,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1809,1885,1905],"referencedDeclaration":1885,"src":"2236:11:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2236:52:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1892,"id":1903,"nodeType":"Return","src":"2229:59:13"}]},"documentation":{"id":1886,"nodeType":"StructuredDocumentation","src":"2000:141:13","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1905,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2155:11:13","nodeType":"FunctionDefinition","parameters":{"id":1889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1888,"mutability":"mutable","name":"addr","nameLocation":"2175:4:13","nodeType":"VariableDeclaration","scope":1905,"src":"2167:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1887,"name":"address","nodeType":"ElementaryTypeName","src":"2167:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2166:14:13"},"returnParameters":{"id":1892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1891,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1905,"src":"2204:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1890,"name":"string","nodeType":"ElementaryTypeName","src":"2204:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2203:15:13"},"scope":1906,"src":"2146:149:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1907,"src":"199:2098:13","usedErrors":[]}],"src":"101:2197:13"},"id":13},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1629],"ERC165Upgradeable":[1950],"IERC165Upgradeable":[1962],"Initializable":[1136]},"id":1951,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1908,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:14"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"./IERC165Upgradeable.sol","id":1909,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1951,"sourceUnit":1963,"src":"124:34:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":1910,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1951,"sourceUnit":1137,"src":"159:45:14","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1912,"name":"Initializable","nameLocations":["822:13:14"],"nodeType":"IdentifierPath","referencedDeclaration":1136,"src":"822:13:14"},"id":1913,"nodeType":"InheritanceSpecifier","src":"822:13:14"},{"baseName":{"id":1914,"name":"IERC165Upgradeable","nameLocations":["837:18:14"],"nodeType":"IdentifierPath","referencedDeclaration":1962,"src":"837:18:14"},"id":1915,"nodeType":"InheritanceSpecifier","src":"837:18:14"}],"canonicalName":"ERC165Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1911,"nodeType":"StructuredDocumentation","src":"206:576:14","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":1950,"linearizedBaseContracts":[1950,1962,1136],"name":"ERC165Upgradeable","nameLocation":"801:17:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":1920,"nodeType":"Block","src":"913:7:14","statements":[]},"id":1921,"implemented":true,"kind":"function","modifiers":[{"id":1918,"kind":"modifierInvocation","modifierName":{"id":1917,"name":"onlyInitializing","nameLocations":["896:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":1081,"src":"896:16:14"},"nodeType":"ModifierInvocation","src":"896:16:14"}],"name":"__ERC165_init","nameLocation":"871:13:14","nodeType":"FunctionDefinition","parameters":{"id":1916,"nodeType":"ParameterList","parameters":[],"src":"884:2:14"},"returnParameters":{"id":1919,"nodeType":"ParameterList","parameters":[],"src":"913:0:14"},"scope":1950,"src":"862:58:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1926,"nodeType":"Block","src":"987:7:14","statements":[]},"id":1927,"implemented":true,"kind":"function","modifiers":[{"id":1924,"kind":"modifierInvocation","modifierName":{"id":1923,"name":"onlyInitializing","nameLocations":["970:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":1081,"src":"970:16:14"},"nodeType":"ModifierInvocation","src":"970:16:14"}],"name":"__ERC165_init_unchained","nameLocation":"935:23:14","nodeType":"FunctionDefinition","parameters":{"id":1922,"nodeType":"ParameterList","parameters":[],"src":"958:2:14"},"returnParameters":{"id":1925,"nodeType":"ParameterList","parameters":[],"src":"987:0:14"},"scope":1950,"src":"926:68:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1961],"body":{"id":1943,"nodeType":"Block","src":"1151:75:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1936,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"1168:11:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1938,"name":"IERC165Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1962,"src":"1188:18:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$1962_$","typeString":"type(contract IERC165Upgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$1962_$","typeString":"type(contract IERC165Upgradeable)"}],"id":1937,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1183:4:14","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1183:24:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165Upgradeable_$1962","typeString":"type(contract IERC165Upgradeable)"}},"id":1940,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1208:11:14","memberName":"interfaceId","nodeType":"MemberAccess","src":"1183:36:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1168:51:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1935,"id":1942,"nodeType":"Return","src":"1161:58:14"}]},"documentation":{"id":1928,"nodeType":"StructuredDocumentation","src":"999:56:14","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1944,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1069:17:14","nodeType":"FunctionDefinition","overrides":{"id":1932,"nodeType":"OverrideSpecifier","overrides":[],"src":"1127:8:14"},"parameters":{"id":1931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1930,"mutability":"mutable","name":"interfaceId","nameLocation":"1094:11:14","nodeType":"VariableDeclaration","scope":1944,"src":"1087:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1929,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1087:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1086:20:14"},"returnParameters":{"id":1935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1934,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1944,"src":"1145:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1933,"name":"bool","nodeType":"ElementaryTypeName","src":"1145:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1144:6:14"},"scope":1950,"src":"1060:166:14","stateMutability":"view","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":1945,"nodeType":"StructuredDocumentation","src":"1232:254:14","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1949,"mutability":"mutable","name":"__gap","nameLocation":"1511:5:14","nodeType":"VariableDeclaration","scope":1950,"src":"1491:25:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1946,"name":"uint256","nodeType":"ElementaryTypeName","src":"1491:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1948,"length":{"hexValue":"3530","id":1947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1499:2:14","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1491:11:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1951,"src":"783:736:14","usedErrors":[]}],"src":"99:1421:14"},"id":14},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","exportedSymbols":{"IERC165Upgradeable":[1962]},"id":1963,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1952,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1953,"nodeType":"StructuredDocumentation","src":"125:279:15","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":1962,"linearizedBaseContracts":[1962],"name":"IERC165Upgradeable","nameLocation":"415:18:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1954,"nodeType":"StructuredDocumentation","src":"440:340:15","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":1961,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"794:17:15","nodeType":"FunctionDefinition","parameters":{"id":1957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1956,"mutability":"mutable","name":"interfaceId","nameLocation":"819:11:15","nodeType":"VariableDeclaration","scope":1961,"src":"812:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1955,"name":"bytes4","nodeType":"ElementaryTypeName","src":"812:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"811:20:15"},"returnParameters":{"id":1960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1959,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1961,"src":"855:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1958,"name":"bool","nodeType":"ElementaryTypeName","src":"855:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"854:6:15"},"scope":1962,"src":"785:76:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1963,"src":"405:458:15","usedErrors":[]}],"src":"100:764:15"},"id":15},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2827]},"id":2828,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1964,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1965,"nodeType":"StructuredDocumentation","src":"128:73:16","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2827,"linearizedBaseContracts":[2827],"name":"MathUpgradeable","nameLocation":"210:15:16","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":1969,"members":[{"id":1966,"name":"Down","nameLocation":"256:4:16","nodeType":"EnumValue","src":"256:4:16"},{"id":1967,"name":"Up","nameLocation":"298:2:16","nodeType":"EnumValue","src":"298:2:16"},{"id":1968,"name":"Zero","nameLocation":"329:4:16","nodeType":"EnumValue","src":"329:4:16"}],"name":"Rounding","nameLocation":"237:8:16","nodeType":"EnumDefinition","src":"232:122:16"},{"body":{"id":1986,"nodeType":"Block","src":"491:37:16","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1979,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1972,"src":"508:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1980,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1974,"src":"512:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1983,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1974,"src":"520:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:16","trueExpression":{"id":1982,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1972,"src":"516:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1978,"id":1985,"nodeType":"Return","src":"501:20:16"}]},"documentation":{"id":1970,"nodeType":"StructuredDocumentation","src":"360:59:16","text":" @dev Returns the largest of two numbers."},"id":1987,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:16","nodeType":"FunctionDefinition","parameters":{"id":1975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1972,"mutability":"mutable","name":"a","nameLocation":"445:1:16","nodeType":"VariableDeclaration","scope":1987,"src":"437:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1971,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1974,"mutability":"mutable","name":"b","nameLocation":"456:1:16","nodeType":"VariableDeclaration","scope":1987,"src":"448:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1973,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:16"},"returnParameters":{"id":1978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1977,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1987,"src":"482:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1976,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:16"},"scope":2827,"src":"424:104:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2004,"nodeType":"Block","src":"666:37:16","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1997,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"683:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1998,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"687:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2001,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"695:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:16","trueExpression":{"id":2000,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"691:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1996,"id":2003,"nodeType":"Return","src":"676:20:16"}]},"documentation":{"id":1988,"nodeType":"StructuredDocumentation","src":"534:60:16","text":" @dev Returns the smallest of two numbers."},"id":2005,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:16","nodeType":"FunctionDefinition","parameters":{"id":1993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1990,"mutability":"mutable","name":"a","nameLocation":"620:1:16","nodeType":"VariableDeclaration","scope":2005,"src":"612:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1989,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1992,"mutability":"mutable","name":"b","nameLocation":"631:1:16","nodeType":"VariableDeclaration","scope":2005,"src":"623:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1991,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:16"},"returnParameters":{"id":1996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1995,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2005,"src":"657:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1994,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:16"},"scope":2827,"src":"599:104:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2027,"nodeType":"Block","src":"887:82:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2015,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2008,"src":"942:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2016,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2010,"src":"946:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2018,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2019,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2008,"src":"952:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2020,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2010,"src":"956:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2022,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2014,"id":2026,"nodeType":"Return","src":"934:28:16"}]},"documentation":{"id":2006,"nodeType":"StructuredDocumentation","src":"709:102:16","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2028,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:16","nodeType":"FunctionDefinition","parameters":{"id":2011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2008,"mutability":"mutable","name":"a","nameLocation":"841:1:16","nodeType":"VariableDeclaration","scope":2028,"src":"833:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2007,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2010,"mutability":"mutable","name":"b","nameLocation":"852:1:16","nodeType":"VariableDeclaration","scope":2028,"src":"844:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2009,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:16"},"returnParameters":{"id":2014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2013,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2028,"src":"878:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2012,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:16"},"scope":2827,"src":"816:153:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2052,"nodeType":"Block","src":"1239:123:16","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2038,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"1327:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2042,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"1341:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2045,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2046,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2033,"src":"1350:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:16","trueExpression":{"hexValue":"30","id":2041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2037,"id":2051,"nodeType":"Return","src":"1320:35:16"}]},"documentation":{"id":2029,"nodeType":"StructuredDocumentation","src":"975:188:16","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":2053,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:16","nodeType":"FunctionDefinition","parameters":{"id":2034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2031,"mutability":"mutable","name":"a","nameLocation":"1193:1:16","nodeType":"VariableDeclaration","scope":2053,"src":"1185:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2030,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2033,"mutability":"mutable","name":"b","nameLocation":"1204:1:16","nodeType":"VariableDeclaration","scope":2053,"src":"1196:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2032,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:16"},"returnParameters":{"id":2037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2036,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2053,"src":"1230:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2035,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:16"},"scope":2827,"src":"1168:194:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2174,"nodeType":"Block","src":"1806:3797:16","statements":[{"id":2173,"nodeType":"UncheckedBlock","src":"1816:3781:16","statements":[{"assignments":[2066],"declarations":[{"constant":false,"id":2066,"mutability":"mutable","name":"prod0","nameLocation":"2145:5:16","nodeType":"VariableDeclaration","scope":2173,"src":"2137:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2065,"name":"uint256","nodeType":"ElementaryTypeName","src":"2137:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2067,"nodeType":"VariableDeclarationStatement","src":"2137:13:16"},{"assignments":[2069],"declarations":[{"constant":false,"id":2069,"mutability":"mutable","name":"prod1","nameLocation":"2217:5:16","nodeType":"VariableDeclaration","scope":2173,"src":"2209:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2068,"name":"uint256","nodeType":"ElementaryTypeName","src":"2209:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2070,"nodeType":"VariableDeclarationStatement","src":"2209:13:16"},{"AST":{"nodeType":"YulBlock","src":"2289:157:16","statements":[{"nodeType":"YulVariableDeclaration","src":"2307:30:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2324:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"2327:1:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2334:1:16","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2330:3:16"},"nodeType":"YulFunctionCall","src":"2330:6:16"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2317:6:16"},"nodeType":"YulFunctionCall","src":"2317:20:16"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2311:2:16","type":""}]},{"nodeType":"YulAssignment","src":"2354:18:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2367:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"2370:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2363:3:16"},"nodeType":"YulFunctionCall","src":"2363:9:16"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2354:5:16"}]},{"nodeType":"YulAssignment","src":"2389:43:16","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2406:2:16"},{"name":"prod0","nodeType":"YulIdentifier","src":"2410:5:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2402:3:16"},"nodeType":"YulFunctionCall","src":"2402:14:16"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2421:2:16"},{"name":"prod0","nodeType":"YulIdentifier","src":"2425:5:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2418:2:16"},"nodeType":"YulFunctionCall","src":"2418:13:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2398:3:16"},"nodeType":"YulFunctionCall","src":"2398:34:16"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2389:5:16"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2066,"isOffset":false,"isSlot":false,"src":"2354:5:16","valueSize":1},{"declaration":2066,"isOffset":false,"isSlot":false,"src":"2410:5:16","valueSize":1},{"declaration":2066,"isOffset":false,"isSlot":false,"src":"2425:5:16","valueSize":1},{"declaration":2069,"isOffset":false,"isSlot":false,"src":"2389:5:16","valueSize":1},{"declaration":2056,"isOffset":false,"isSlot":false,"src":"2324:1:16","valueSize":1},{"declaration":2056,"isOffset":false,"isSlot":false,"src":"2367:1:16","valueSize":1},{"declaration":2058,"isOffset":false,"isSlot":false,"src":"2327:1:16","valueSize":1},{"declaration":2058,"isOffset":false,"isSlot":false,"src":"2370:1:16","valueSize":1}],"id":2071,"nodeType":"InlineAssembly","src":"2280:166:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2072,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"2527:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2536:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2527:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2080,"nodeType":"IfStatement","src":"2523:75:16","trueBody":{"id":2079,"nodeType":"Block","src":"2539:59:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2075,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2066,"src":"2564:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2076,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"2572:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2564:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2064,"id":2078,"nodeType":"Return","src":"2557:26:16"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2082,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"2708:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2083,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"2722:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2708:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2081,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2700:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":2085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2700:28:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2086,"nodeType":"ExpressionStatement","src":"2700:28:16"},{"assignments":[2088],"declarations":[{"constant":false,"id":2088,"mutability":"mutable","name":"remainder","nameLocation":"2992:9:16","nodeType":"VariableDeclaration","scope":2173,"src":"2984:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2087,"name":"uint256","nodeType":"ElementaryTypeName","src":"2984:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2089,"nodeType":"VariableDeclarationStatement","src":"2984:17:16"},{"AST":{"nodeType":"YulBlock","src":"3024:291:16","statements":[{"nodeType":"YulAssignment","src":"3093:38:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3113:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"3116:1:16"},{"name":"denominator","nodeType":"YulIdentifier","src":"3119:11:16"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3106:6:16"},"nodeType":"YulFunctionCall","src":"3106:25:16"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3093:9:16"}]},{"nodeType":"YulAssignment","src":"3213:41:16","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3226:5:16"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3236:9:16"},{"name":"prod0","nodeType":"YulIdentifier","src":"3247:5:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3233:2:16"},"nodeType":"YulFunctionCall","src":"3233:20:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3222:3:16"},"nodeType":"YulFunctionCall","src":"3222:32:16"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3213:5:16"}]},{"nodeType":"YulAssignment","src":"3271:30:16","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3284:5:16"},{"name":"remainder","nodeType":"YulIdentifier","src":"3291:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3280:3:16"},"nodeType":"YulFunctionCall","src":"3280:21:16"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3271:5:16"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2060,"isOffset":false,"isSlot":false,"src":"3119:11:16","valueSize":1},{"declaration":2066,"isOffset":false,"isSlot":false,"src":"3247:5:16","valueSize":1},{"declaration":2066,"isOffset":false,"isSlot":false,"src":"3271:5:16","valueSize":1},{"declaration":2066,"isOffset":false,"isSlot":false,"src":"3284:5:16","valueSize":1},{"declaration":2069,"isOffset":false,"isSlot":false,"src":"3213:5:16","valueSize":1},{"declaration":2069,"isOffset":false,"isSlot":false,"src":"3226:5:16","valueSize":1},{"declaration":2088,"isOffset":false,"isSlot":false,"src":"3093:9:16","valueSize":1},{"declaration":2088,"isOffset":false,"isSlot":false,"src":"3236:9:16","valueSize":1},{"declaration":2088,"isOffset":false,"isSlot":false,"src":"3291:9:16","valueSize":1},{"declaration":2056,"isOffset":false,"isSlot":false,"src":"3113:1:16","valueSize":1},{"declaration":2058,"isOffset":false,"isSlot":false,"src":"3116:1:16","valueSize":1}],"id":2090,"nodeType":"InlineAssembly","src":"3015:300:16"},{"assignments":[2092],"declarations":[{"constant":false,"id":2092,"mutability":"mutable","name":"twos","nameLocation":"3630:4:16","nodeType":"VariableDeclaration","scope":2173,"src":"3622:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2091,"name":"uint256","nodeType":"ElementaryTypeName","src":"3622:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2100,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2093,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"3637:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3652:12:16","subExpression":{"id":2094,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"3653:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3667:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3652:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2098,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3651:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3637:32:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3622:47:16"},{"AST":{"nodeType":"YulBlock","src":"3692:362:16","statements":[{"nodeType":"YulAssignment","src":"3757:37:16","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3776:11:16"},{"name":"twos","nodeType":"YulIdentifier","src":"3789:4:16"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3772:3:16"},"nodeType":"YulFunctionCall","src":"3772:22:16"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3757:11:16"}]},{"nodeType":"YulAssignment","src":"3861:25:16","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3874:5:16"},{"name":"twos","nodeType":"YulIdentifier","src":"3881:4:16"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3870:3:16"},"nodeType":"YulFunctionCall","src":"3870:16:16"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3861:5:16"}]},{"nodeType":"YulAssignment","src":"4001:39:16","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4021:1:16","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4024:4:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4017:3:16"},"nodeType":"YulFunctionCall","src":"4017:12:16"},{"name":"twos","nodeType":"YulIdentifier","src":"4031:4:16"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4013:3:16"},"nodeType":"YulFunctionCall","src":"4013:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"4038:1:16","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4009:3:16"},"nodeType":"YulFunctionCall","src":"4009:31:16"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4001:4:16"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2060,"isOffset":false,"isSlot":false,"src":"3757:11:16","valueSize":1},{"declaration":2060,"isOffset":false,"isSlot":false,"src":"3776:11:16","valueSize":1},{"declaration":2066,"isOffset":false,"isSlot":false,"src":"3861:5:16","valueSize":1},{"declaration":2066,"isOffset":false,"isSlot":false,"src":"3874:5:16","valueSize":1},{"declaration":2092,"isOffset":false,"isSlot":false,"src":"3789:4:16","valueSize":1},{"declaration":2092,"isOffset":false,"isSlot":false,"src":"3881:4:16","valueSize":1},{"declaration":2092,"isOffset":false,"isSlot":false,"src":"4001:4:16","valueSize":1},{"declaration":2092,"isOffset":false,"isSlot":false,"src":"4024:4:16","valueSize":1},{"declaration":2092,"isOffset":false,"isSlot":false,"src":"4031:4:16","valueSize":1}],"id":2101,"nodeType":"InlineAssembly","src":"3683:371:16"},{"expression":{"id":2106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2102,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2066,"src":"4120:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2103,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"4129:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2104,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"4137:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4129:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4120:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2107,"nodeType":"ExpressionStatement","src":"4120:21:16"},{"assignments":[2109],"declarations":[{"constant":false,"id":2109,"mutability":"mutable","name":"inverse","nameLocation":"4467:7:16","nodeType":"VariableDeclaration","scope":2173,"src":"4459:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2108,"name":"uint256","nodeType":"ElementaryTypeName","src":"4459:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2116,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4478:1:16","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2111,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"4482:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4478:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2113,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4477:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4497:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4477:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4459:39:16"},{"expression":{"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2117,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"4715:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4726:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2119,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"4730:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2120,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"4744:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4730:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4726:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2124,"nodeType":"ExpressionStatement","src":"4715:36:16"},{"expression":{"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2125,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"4784:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4795:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2127,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"4799:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2128,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"4813:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4799:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4795:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2132,"nodeType":"ExpressionStatement","src":"4784:36:16"},{"expression":{"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2133,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"4854:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4865:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2135,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"4869:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2136,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"4883:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4869:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4865:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2140,"nodeType":"ExpressionStatement","src":"4854:36:16"},{"expression":{"id":2147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2141,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"4924:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4935:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2143,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"4939:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2144,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"4953:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4939:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4935:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2148,"nodeType":"ExpressionStatement","src":"4924:36:16"},{"expression":{"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2149,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"4994:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5005:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2151,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"5009:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2152,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"5023:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5009:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5005:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2156,"nodeType":"ExpressionStatement","src":"4994:36:16"},{"expression":{"id":2163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2157,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"5065:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5076:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2159,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"5080:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2160,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"5094:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5080:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2164,"nodeType":"ExpressionStatement","src":"5065:36:16"},{"expression":{"id":2169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2165,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2063,"src":"5535:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2166,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2066,"src":"5544:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2167,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"5552:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5544:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5535:24:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2170,"nodeType":"ExpressionStatement","src":"5535:24:16"},{"expression":{"id":2171,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2063,"src":"5580:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2064,"id":2172,"nodeType":"Return","src":"5573:13:16"}]}]},"documentation":{"id":2054,"nodeType":"StructuredDocumentation","src":"1368:305:16","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2175,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:16","nodeType":"FunctionDefinition","parameters":{"id":2061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2056,"mutability":"mutable","name":"x","nameLocation":"1711:1:16","nodeType":"VariableDeclaration","scope":2175,"src":"1703:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2055,"name":"uint256","nodeType":"ElementaryTypeName","src":"1703:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2058,"mutability":"mutable","name":"y","nameLocation":"1730:1:16","nodeType":"VariableDeclaration","scope":2175,"src":"1722:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2057,"name":"uint256","nodeType":"ElementaryTypeName","src":"1722:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2060,"mutability":"mutable","name":"denominator","nameLocation":"1749:11:16","nodeType":"VariableDeclaration","scope":2175,"src":"1741:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2059,"name":"uint256","nodeType":"ElementaryTypeName","src":"1741:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:73:16"},"returnParameters":{"id":2064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2063,"mutability":"mutable","name":"result","nameLocation":"1798:6:16","nodeType":"VariableDeclaration","scope":2175,"src":"1790:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2062,"name":"uint256","nodeType":"ElementaryTypeName","src":"1790:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1789:16:16"},"scope":2827,"src":"1678:3925:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2218,"nodeType":"Block","src":"5883:189:16","statements":[{"assignments":[2191],"declarations":[{"constant":false,"id":2191,"mutability":"mutable","name":"result","nameLocation":"5901:6:16","nodeType":"VariableDeclaration","scope":2218,"src":"5893:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2190,"name":"uint256","nodeType":"ElementaryTypeName","src":"5893:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2197,"initialValue":{"arguments":[{"id":2193,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2178,"src":"5917:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2194,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2180,"src":"5920:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2195,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"5923:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2192,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2175,2219],"referencedDeclaration":2175,"src":"5910:6:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5910:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5893:42:16"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"},"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2198,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"5949:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2199,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"5961:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1969_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2200,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5970:2:16","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1967,"src":"5961:11:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"}},"src":"5949:23:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2203,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2178,"src":"5983:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2204,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2180,"src":"5986:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2205,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"5989:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2202,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5976:6:16","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5976:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6004:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5976:29:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5949:56:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2215,"nodeType":"IfStatement","src":"5945:98:16","trueBody":{"id":2214,"nodeType":"Block","src":"6007:36:16","statements":[{"expression":{"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2210,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2191,"src":"6021:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6031:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6021:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2213,"nodeType":"ExpressionStatement","src":"6021:11:16"}]}},{"expression":{"id":2216,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2191,"src":"6059:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2189,"id":2217,"nodeType":"Return","src":"6052:13:16"}]},"documentation":{"id":2176,"nodeType":"StructuredDocumentation","src":"5609:121:16","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2219,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5744:6:16","nodeType":"FunctionDefinition","parameters":{"id":2186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2178,"mutability":"mutable","name":"x","nameLocation":"5768:1:16","nodeType":"VariableDeclaration","scope":2219,"src":"5760:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2177,"name":"uint256","nodeType":"ElementaryTypeName","src":"5760:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2180,"mutability":"mutable","name":"y","nameLocation":"5787:1:16","nodeType":"VariableDeclaration","scope":2219,"src":"5779:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2179,"name":"uint256","nodeType":"ElementaryTypeName","src":"5779:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2182,"mutability":"mutable","name":"denominator","nameLocation":"5806:11:16","nodeType":"VariableDeclaration","scope":2219,"src":"5798:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2181,"name":"uint256","nodeType":"ElementaryTypeName","src":"5798:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2185,"mutability":"mutable","name":"rounding","nameLocation":"5836:8:16","nodeType":"VariableDeclaration","scope":2219,"src":"5827:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2184,"nodeType":"UserDefinedTypeName","pathNode":{"id":2183,"name":"Rounding","nameLocations":["5827:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":1969,"src":"5827:8:16"},"referencedDeclaration":1969,"src":"5827:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"5750:100:16"},"returnParameters":{"id":2189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2188,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2219,"src":"5874:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2187,"name":"uint256","nodeType":"ElementaryTypeName","src":"5874:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5873:9:16"},"scope":2827,"src":"5735:337:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2330,"nodeType":"Block","src":"6348:1585:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2227,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"6362:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6367:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6362:6:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2233,"nodeType":"IfStatement","src":"6358:45:16","trueBody":{"id":2232,"nodeType":"Block","src":"6370:33:16","statements":[{"expression":{"hexValue":"30","id":2230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6391:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2226,"id":2231,"nodeType":"Return","src":"6384:8:16"}]}},{"assignments":[2235],"declarations":[{"constant":false,"id":2235,"mutability":"mutable","name":"result","nameLocation":"7090:6:16","nodeType":"VariableDeclaration","scope":2330,"src":"7082:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2234,"name":"uint256","nodeType":"ElementaryTypeName","src":"7082:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2244,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7099:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2238,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"7110:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2237,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2499,2535],"referencedDeclaration":2499,"src":"7105:4:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7105:7:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7116:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7105:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2242,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7104:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7099:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7082:36:16"},{"id":2329,"nodeType":"UncheckedBlock","src":"7519:408:16","statements":[{"expression":{"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2245,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7543:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2246,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7553:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2247,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"7562:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2248,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7566:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7562:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7553:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2251,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7552:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7577:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7552:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7543:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2255,"nodeType":"ExpressionStatement","src":"7543:35:16"},{"expression":{"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2256,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7592:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2257,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7602:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2258,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"7611:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2259,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7615:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7611:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7602:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2262,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7601:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7626:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7601:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7592:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2266,"nodeType":"ExpressionStatement","src":"7592:35:16"},{"expression":{"id":2276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2267,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7641:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2268,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7651:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2269,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"7660:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2270,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7664:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7660:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7651:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2273,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7650:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7675:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7650:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7641:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2277,"nodeType":"ExpressionStatement","src":"7641:35:16"},{"expression":{"id":2287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2278,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7690:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2279,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7700:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2280,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"7709:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2281,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7713:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7709:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7700:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2284,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7699:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7724:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7699:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7690:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2288,"nodeType":"ExpressionStatement","src":"7690:35:16"},{"expression":{"id":2298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2289,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7739:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2290,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7749:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2291,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"7758:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2292,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7762:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7758:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7749:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2295,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7748:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7773:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7748:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7739:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2299,"nodeType":"ExpressionStatement","src":"7739:35:16"},{"expression":{"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2300,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7788:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2301,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7798:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2302,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"7807:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2303,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7811:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7807:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7798:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2306,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7797:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7822:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7797:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7788:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2310,"nodeType":"ExpressionStatement","src":"7788:35:16"},{"expression":{"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2311,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7837:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2312,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7847:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2313,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"7856:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2314,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7860:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7856:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7847:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2317,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7846:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7871:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7846:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7837:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2321,"nodeType":"ExpressionStatement","src":"7837:35:16"},{"expression":{"arguments":[{"id":2323,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7897:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2324,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"7905:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2325,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"7909:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7905:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2322,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7893:3:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7893:23:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2226,"id":2328,"nodeType":"Return","src":"7886:30:16"}]}]},"documentation":{"id":2220,"nodeType":"StructuredDocumentation","src":"6078:208:16","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2331,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6300:4:16","nodeType":"FunctionDefinition","parameters":{"id":2223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2222,"mutability":"mutable","name":"a","nameLocation":"6313:1:16","nodeType":"VariableDeclaration","scope":2331,"src":"6305:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2221,"name":"uint256","nodeType":"ElementaryTypeName","src":"6305:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6304:11:16"},"returnParameters":{"id":2226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2331,"src":"6339:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2224,"name":"uint256","nodeType":"ElementaryTypeName","src":"6339:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6338:9:16"},"scope":2827,"src":"6291:1642:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2366,"nodeType":"Block","src":"8109:161:16","statements":[{"id":2365,"nodeType":"UncheckedBlock","src":"8119:145:16","statements":[{"assignments":[2343],"declarations":[{"constant":false,"id":2343,"mutability":"mutable","name":"result","nameLocation":"8151:6:16","nodeType":"VariableDeclaration","scope":2365,"src":"8143:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2342,"name":"uint256","nodeType":"ElementaryTypeName","src":"8143:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2347,"initialValue":{"arguments":[{"id":2345,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"8165:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2344,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2331,2367],"referencedDeclaration":2331,"src":"8160:4:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8160:7:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8143:24:16"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2348,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2343,"src":"8188:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"},"id":2352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2349,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8198:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2350,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"8210:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1969_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2351,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8219:2:16","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1967,"src":"8210:11:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"}},"src":"8198:23:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2353,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2343,"src":"8225:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2354,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2343,"src":"8234:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8225:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2356,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"8243:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8225:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8198:46:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8251:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8198:54:16","trueExpression":{"hexValue":"31","id":2359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8247:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2362,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8197:56:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8188:65:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2341,"id":2364,"nodeType":"Return","src":"8181:72:16"}]}]},"documentation":{"id":2332,"nodeType":"StructuredDocumentation","src":"7939:89:16","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2367,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8042:4:16","nodeType":"FunctionDefinition","parameters":{"id":2338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2334,"mutability":"mutable","name":"a","nameLocation":"8055:1:16","nodeType":"VariableDeclaration","scope":2367,"src":"8047:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2333,"name":"uint256","nodeType":"ElementaryTypeName","src":"8047:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2337,"mutability":"mutable","name":"rounding","nameLocation":"8067:8:16","nodeType":"VariableDeclaration","scope":2367,"src":"8058:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2336,"nodeType":"UserDefinedTypeName","pathNode":{"id":2335,"name":"Rounding","nameLocations":["8058:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":1969,"src":"8058:8:16"},"referencedDeclaration":1969,"src":"8058:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8046:30:16"},"returnParameters":{"id":2341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2340,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2367,"src":"8100:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2339,"name":"uint256","nodeType":"ElementaryTypeName","src":"8100:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8099:9:16"},"scope":2827,"src":"8033:237:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2498,"nodeType":"Block","src":"8455:922:16","statements":[{"assignments":[2376],"declarations":[{"constant":false,"id":2376,"mutability":"mutable","name":"result","nameLocation":"8473:6:16","nodeType":"VariableDeclaration","scope":2498,"src":"8465:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2375,"name":"uint256","nodeType":"ElementaryTypeName","src":"8465:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2378,"initialValue":{"hexValue":"30","id":2377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8482:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8465:18:16"},{"id":2495,"nodeType":"UncheckedBlock","src":"8493:855:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2379,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"8521:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8530:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8521:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8536:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8521:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2393,"nodeType":"IfStatement","src":"8517:99:16","trueBody":{"id":2392,"nodeType":"Block","src":"8539:77:16","statements":[{"expression":{"id":2386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2384,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"8557:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8567:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8557:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2387,"nodeType":"ExpressionStatement","src":"8557:13:16"},{"expression":{"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2388,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"8588:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8598:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8588:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2391,"nodeType":"ExpressionStatement","src":"8588:13:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2394,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"8633:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8642:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8633:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8647:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8633:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2408,"nodeType":"IfStatement","src":"8629:96:16","trueBody":{"id":2407,"nodeType":"Block","src":"8650:75:16","statements":[{"expression":{"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2399,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"8668:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8678:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8668:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2402,"nodeType":"ExpressionStatement","src":"8668:12:16"},{"expression":{"id":2405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2403,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"8698:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8708:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8698:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2406,"nodeType":"ExpressionStatement","src":"8698:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2409,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"8742:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8751:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8742:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8756:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8742:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2423,"nodeType":"IfStatement","src":"8738:96:16","trueBody":{"id":2422,"nodeType":"Block","src":"8759:75:16","statements":[{"expression":{"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2414,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"8777:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8787:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8777:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2417,"nodeType":"ExpressionStatement","src":"8777:12:16"},{"expression":{"id":2420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2418,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"8807:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8807:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2421,"nodeType":"ExpressionStatement","src":"8807:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2424,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"8851:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8860:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8851:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8865:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8851:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2438,"nodeType":"IfStatement","src":"8847:96:16","trueBody":{"id":2437,"nodeType":"Block","src":"8868:75:16","statements":[{"expression":{"id":2431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2429,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"8886:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8896:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8886:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2432,"nodeType":"ExpressionStatement","src":"8886:12:16"},{"expression":{"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2433,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"8916:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8926:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8916:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2436,"nodeType":"ExpressionStatement","src":"8916:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2439,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"8960:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8969:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8960:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8973:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8960:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2453,"nodeType":"IfStatement","src":"8956:93:16","trueBody":{"id":2452,"nodeType":"Block","src":"8976:73:16","statements":[{"expression":{"id":2446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2444,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"8994:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9004:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8994:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2447,"nodeType":"ExpressionStatement","src":"8994:11:16"},{"expression":{"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2448,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"9023:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9033:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9023:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2451,"nodeType":"ExpressionStatement","src":"9023:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2454,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"9066:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9075:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9066:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9079:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9066:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2468,"nodeType":"IfStatement","src":"9062:93:16","trueBody":{"id":2467,"nodeType":"Block","src":"9082:73:16","statements":[{"expression":{"id":2461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2459,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"9100:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9100:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2462,"nodeType":"ExpressionStatement","src":"9100:11:16"},{"expression":{"id":2465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2463,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"9129:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9139:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9129:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2466,"nodeType":"ExpressionStatement","src":"9129:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2469,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"9172:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9181:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9172:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9185:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9172:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2483,"nodeType":"IfStatement","src":"9168:93:16","trueBody":{"id":2482,"nodeType":"Block","src":"9188:73:16","statements":[{"expression":{"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2474,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"9206:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9216:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9206:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2477,"nodeType":"ExpressionStatement","src":"9206:11:16"},{"expression":{"id":2480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2478,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"9235:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9245:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9235:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2481,"nodeType":"ExpressionStatement","src":"9235:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2484,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"9278:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9287:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9278:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9291:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9278:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2494,"nodeType":"IfStatement","src":"9274:64:16","trueBody":{"id":2493,"nodeType":"Block","src":"9294:44:16","statements":[{"expression":{"id":2491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2489,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"9312:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9322:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9312:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2492,"nodeType":"ExpressionStatement","src":"9312:11:16"}]}}]},{"expression":{"id":2496,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"9364:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2374,"id":2497,"nodeType":"Return","src":"9357:13:16"}]},"documentation":{"id":2368,"nodeType":"StructuredDocumentation","src":"8276:113:16","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2499,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8403:4:16","nodeType":"FunctionDefinition","parameters":{"id":2371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2370,"mutability":"mutable","name":"value","nameLocation":"8416:5:16","nodeType":"VariableDeclaration","scope":2499,"src":"8408:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2369,"name":"uint256","nodeType":"ElementaryTypeName","src":"8408:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8407:15:16"},"returnParameters":{"id":2374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2373,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2499,"src":"8446:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2372,"name":"uint256","nodeType":"ElementaryTypeName","src":"8446:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8445:9:16"},"scope":2827,"src":"8394:983:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2534,"nodeType":"Block","src":"9610:165:16","statements":[{"id":2533,"nodeType":"UncheckedBlock","src":"9620:149:16","statements":[{"assignments":[2511],"declarations":[{"constant":false,"id":2511,"mutability":"mutable","name":"result","nameLocation":"9652:6:16","nodeType":"VariableDeclaration","scope":2533,"src":"9644:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2510,"name":"uint256","nodeType":"ElementaryTypeName","src":"9644:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2515,"initialValue":{"arguments":[{"id":2513,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2502,"src":"9666:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2512,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2499,2535],"referencedDeclaration":2499,"src":"9661:4:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9661:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9644:28:16"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2516,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2511,"src":"9693:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"},"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2517,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"9703:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2518,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"9715:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1969_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2519,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9724:2:16","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1967,"src":"9715:11:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"}},"src":"9703:23:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9730:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2522,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2511,"src":"9735:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9730:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2524,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2502,"src":"9744:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9730:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9703:46:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9756:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9703:54:16","trueExpression":{"hexValue":"31","id":2527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9752:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2530,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9702:56:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9693:65:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2509,"id":2532,"nodeType":"Return","src":"9686:72:16"}]}]},"documentation":{"id":2500,"nodeType":"StructuredDocumentation","src":"9383:142:16","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2535,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9539:4:16","nodeType":"FunctionDefinition","parameters":{"id":2506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2502,"mutability":"mutable","name":"value","nameLocation":"9552:5:16","nodeType":"VariableDeclaration","scope":2535,"src":"9544:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2501,"name":"uint256","nodeType":"ElementaryTypeName","src":"9544:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2505,"mutability":"mutable","name":"rounding","nameLocation":"9568:8:16","nodeType":"VariableDeclaration","scope":2535,"src":"9559:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2504,"nodeType":"UserDefinedTypeName","pathNode":{"id":2503,"name":"Rounding","nameLocations":["9559:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":1969,"src":"9559:8:16"},"referencedDeclaration":1969,"src":"9559:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9543:34:16"},"returnParameters":{"id":2509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2508,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2535,"src":"9601:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2507,"name":"uint256","nodeType":"ElementaryTypeName","src":"9601:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9600:9:16"},"scope":2827,"src":"9530:245:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2663,"nodeType":"Block","src":"9962:828:16","statements":[{"assignments":[2544],"declarations":[{"constant":false,"id":2544,"mutability":"mutable","name":"result","nameLocation":"9980:6:16","nodeType":"VariableDeclaration","scope":2663,"src":"9972:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2543,"name":"uint256","nodeType":"ElementaryTypeName","src":"9972:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2546,"initialValue":{"hexValue":"30","id":2545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9989:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9972:18:16"},{"id":2660,"nodeType":"UncheckedBlock","src":"10000:761:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2547,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"10028:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2550,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10037:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10041:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10037:6:16","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10028:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2563,"nodeType":"IfStatement","src":"10024:99:16","trueBody":{"id":2562,"nodeType":"Block","src":"10045:78:16","statements":[{"expression":{"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2552,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"10063:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2555,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10072:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10076:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10072:6:16","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10063:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2557,"nodeType":"ExpressionStatement","src":"10063:15:16"},{"expression":{"id":2560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2558,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"10096:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10106:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10096:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2561,"nodeType":"ExpressionStatement","src":"10096:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2564,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"10140:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2567,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10149:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10153:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10149:6:16","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10140:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2580,"nodeType":"IfStatement","src":"10136:99:16","trueBody":{"id":2579,"nodeType":"Block","src":"10157:78:16","statements":[{"expression":{"id":2573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2569,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"10175:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2572,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10184:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10188:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10184:6:16","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10175:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2574,"nodeType":"ExpressionStatement","src":"10175:15:16"},{"expression":{"id":2577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2575,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"10208:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10218:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10208:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2578,"nodeType":"ExpressionStatement","src":"10208:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2581,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"10252:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2584,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10261:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10265:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10261:6:16","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10252:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2597,"nodeType":"IfStatement","src":"10248:99:16","trueBody":{"id":2596,"nodeType":"Block","src":"10269:78:16","statements":[{"expression":{"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2586,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"10287:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2589,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10296:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10300:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10296:6:16","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10287:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2591,"nodeType":"ExpressionStatement","src":"10287:15:16"},{"expression":{"id":2594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2592,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"10320:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10330:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10320:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2595,"nodeType":"ExpressionStatement","src":"10320:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2598,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"10364:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2601,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10373:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10377:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10373:5:16","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10364:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2614,"nodeType":"IfStatement","src":"10360:96:16","trueBody":{"id":2613,"nodeType":"Block","src":"10380:76:16","statements":[{"expression":{"id":2607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2603,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"10398:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2606,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10407:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10411:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10407:5:16","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10398:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2608,"nodeType":"ExpressionStatement","src":"10398:14:16"},{"expression":{"id":2611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2609,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"10430:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10440:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10430:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2612,"nodeType":"ExpressionStatement","src":"10430:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2615,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"10473:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2618,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10482:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10486:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10482:5:16","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10473:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2631,"nodeType":"IfStatement","src":"10469:96:16","trueBody":{"id":2630,"nodeType":"Block","src":"10489:76:16","statements":[{"expression":{"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2620,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"10507:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10516:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10520:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10516:5:16","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10507:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2625,"nodeType":"ExpressionStatement","src":"10507:14:16"},{"expression":{"id":2628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2626,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"10539:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10549:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10539:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2629,"nodeType":"ExpressionStatement","src":"10539:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2632,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"10582:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2635,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10591:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10595:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10591:5:16","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10582:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2648,"nodeType":"IfStatement","src":"10578:96:16","trueBody":{"id":2647,"nodeType":"Block","src":"10598:76:16","statements":[{"expression":{"id":2641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2637,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"10616:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10625:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10629:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10625:5:16","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10616:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2642,"nodeType":"ExpressionStatement","src":"10616:14:16"},{"expression":{"id":2645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2643,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"10648:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10658:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10648:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2646,"nodeType":"ExpressionStatement","src":"10648:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2649,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"10691:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2652,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10700:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10704:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10700:5:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10691:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2659,"nodeType":"IfStatement","src":"10687:64:16","trueBody":{"id":2658,"nodeType":"Block","src":"10707:44:16","statements":[{"expression":{"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2654,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"10725:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10735:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10725:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2657,"nodeType":"ExpressionStatement","src":"10725:11:16"}]}}]},{"expression":{"id":2661,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"10777:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2542,"id":2662,"nodeType":"Return","src":"10770:13:16"}]},"documentation":{"id":2536,"nodeType":"StructuredDocumentation","src":"9781:114:16","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2664,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9909:5:16","nodeType":"FunctionDefinition","parameters":{"id":2539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2538,"mutability":"mutable","name":"value","nameLocation":"9923:5:16","nodeType":"VariableDeclaration","scope":2664,"src":"9915:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2537,"name":"uint256","nodeType":"ElementaryTypeName","src":"9915:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9914:15:16"},"returnParameters":{"id":2542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2541,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2664,"src":"9953:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2540,"name":"uint256","nodeType":"ElementaryTypeName","src":"9953:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9952:9:16"},"scope":2827,"src":"9900:890:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2699,"nodeType":"Block","src":"11025:165:16","statements":[{"id":2698,"nodeType":"UncheckedBlock","src":"11035:149:16","statements":[{"assignments":[2676],"declarations":[{"constant":false,"id":2676,"mutability":"mutable","name":"result","nameLocation":"11067:6:16","nodeType":"VariableDeclaration","scope":2698,"src":"11059:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2675,"name":"uint256","nodeType":"ElementaryTypeName","src":"11059:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2680,"initialValue":{"arguments":[{"id":2678,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"11082:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2677,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2664,2700],"referencedDeclaration":2664,"src":"11076:5:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11076:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11059:29:16"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2681,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2676,"src":"11109:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"},"id":2685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2682,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"11119:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2683,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"11131:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1969_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2684,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11140:2:16","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1967,"src":"11131:11:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"}},"src":"11119:23:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11146:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2687,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2676,"src":"11150:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11146:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2689,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"11159:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11146:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11119:45:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11171:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11119:53:16","trueExpression":{"hexValue":"31","id":2692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11167:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2695,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11118:55:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11109:64:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2674,"id":2697,"nodeType":"Return","src":"11102:71:16"}]}]},"documentation":{"id":2665,"nodeType":"StructuredDocumentation","src":"10796:143:16","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2700,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10953:5:16","nodeType":"FunctionDefinition","parameters":{"id":2671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2667,"mutability":"mutable","name":"value","nameLocation":"10967:5:16","nodeType":"VariableDeclaration","scope":2700,"src":"10959:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2666,"name":"uint256","nodeType":"ElementaryTypeName","src":"10959:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2670,"mutability":"mutable","name":"rounding","nameLocation":"10983:8:16","nodeType":"VariableDeclaration","scope":2700,"src":"10974:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2669,"nodeType":"UserDefinedTypeName","pathNode":{"id":2668,"name":"Rounding","nameLocations":["10974:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":1969,"src":"10974:8:16"},"referencedDeclaration":1969,"src":"10974:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"10958:34:16"},"returnParameters":{"id":2674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2673,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2700,"src":"11016:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2672,"name":"uint256","nodeType":"ElementaryTypeName","src":"11016:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11015:9:16"},"scope":2827,"src":"10944:246:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2786,"nodeType":"Block","src":"11504:600:16","statements":[{"assignments":[2709],"declarations":[{"constant":false,"id":2709,"mutability":"mutable","name":"result","nameLocation":"11522:6:16","nodeType":"VariableDeclaration","scope":2786,"src":"11514:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2708,"name":"uint256","nodeType":"ElementaryTypeName","src":"11514:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2711,"initialValue":{"hexValue":"30","id":2710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11531:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11514:18:16"},{"id":2783,"nodeType":"UncheckedBlock","src":"11542:533:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2712,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2703,"src":"11570:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11579:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11570:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11585:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11570:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2726,"nodeType":"IfStatement","src":"11566:98:16","trueBody":{"id":2725,"nodeType":"Block","src":"11588:76:16","statements":[{"expression":{"id":2719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2717,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2703,"src":"11606:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11616:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11606:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2720,"nodeType":"ExpressionStatement","src":"11606:13:16"},{"expression":{"id":2723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2721,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"11637:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11647:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11637:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2724,"nodeType":"ExpressionStatement","src":"11637:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2727,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2703,"src":"11681:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11690:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11681:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11695:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11681:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2741,"nodeType":"IfStatement","src":"11677:95:16","trueBody":{"id":2740,"nodeType":"Block","src":"11698:74:16","statements":[{"expression":{"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2732,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2703,"src":"11716:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11726:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11716:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2735,"nodeType":"ExpressionStatement","src":"11716:12:16"},{"expression":{"id":2738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2736,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"11746:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11756:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11746:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2739,"nodeType":"ExpressionStatement","src":"11746:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2742,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2703,"src":"11789:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11789:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11803:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11789:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2756,"nodeType":"IfStatement","src":"11785:95:16","trueBody":{"id":2755,"nodeType":"Block","src":"11806:74:16","statements":[{"expression":{"id":2749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2747,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2703,"src":"11824:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11834:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11824:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2750,"nodeType":"ExpressionStatement","src":"11824:12:16"},{"expression":{"id":2753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2751,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"11854:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11864:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11854:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2754,"nodeType":"ExpressionStatement","src":"11854:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2757,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2703,"src":"11897:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11906:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11897:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11911:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11897:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2771,"nodeType":"IfStatement","src":"11893:95:16","trueBody":{"id":2770,"nodeType":"Block","src":"11914:74:16","statements":[{"expression":{"id":2764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2762,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2703,"src":"11932:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11942:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11932:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2765,"nodeType":"ExpressionStatement","src":"11932:12:16"},{"expression":{"id":2768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2766,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"11962:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11972:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11962:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2769,"nodeType":"ExpressionStatement","src":"11962:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2772,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2703,"src":"12005:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12014:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12005:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12018:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12005:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2782,"nodeType":"IfStatement","src":"12001:64:16","trueBody":{"id":2781,"nodeType":"Block","src":"12021:44:16","statements":[{"expression":{"id":2779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2777,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"12039:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12049:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12039:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2780,"nodeType":"ExpressionStatement","src":"12039:11:16"}]}}]},{"expression":{"id":2784,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"12091:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2707,"id":2785,"nodeType":"Return","src":"12084:13:16"}]},"documentation":{"id":2701,"nodeType":"StructuredDocumentation","src":"11196:240:16","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2787,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11450:6:16","nodeType":"FunctionDefinition","parameters":{"id":2704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2703,"mutability":"mutable","name":"value","nameLocation":"11465:5:16","nodeType":"VariableDeclaration","scope":2787,"src":"11457:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2702,"name":"uint256","nodeType":"ElementaryTypeName","src":"11457:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11456:15:16"},"returnParameters":{"id":2707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2706,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2787,"src":"11495:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2705,"name":"uint256","nodeType":"ElementaryTypeName","src":"11495:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11494:9:16"},"scope":2827,"src":"11441:663:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2825,"nodeType":"Block","src":"12340:173:16","statements":[{"id":2824,"nodeType":"UncheckedBlock","src":"12350:157:16","statements":[{"assignments":[2799],"declarations":[{"constant":false,"id":2799,"mutability":"mutable","name":"result","nameLocation":"12382:6:16","nodeType":"VariableDeclaration","scope":2824,"src":"12374:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2798,"name":"uint256","nodeType":"ElementaryTypeName","src":"12374:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2803,"initialValue":{"arguments":[{"id":2801,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2790,"src":"12398:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2800,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2787,2826],"referencedDeclaration":2787,"src":"12391:6:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12391:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12374:30:16"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2804,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2799,"src":"12425:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"},"id":2808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2805,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2793,"src":"12435:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2806,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"12447:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1969_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2807,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12456:2:16","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1967,"src":"12447:11:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"}},"src":"12435:23:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12462:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2810,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2799,"src":"12468:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":2811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12477:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12468:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2813,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12467:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12462:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2815,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2790,"src":"12482:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12462:25:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12435:52:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12494:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12435:60:16","trueExpression":{"hexValue":"31","id":2818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12490:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2821,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12434:62:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12425:71:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2797,"id":2823,"nodeType":"Return","src":"12418:78:16"}]}]},"documentation":{"id":2788,"nodeType":"StructuredDocumentation","src":"12110:143:16","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2826,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12267:6:16","nodeType":"FunctionDefinition","parameters":{"id":2794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2790,"mutability":"mutable","name":"value","nameLocation":"12282:5:16","nodeType":"VariableDeclaration","scope":2826,"src":"12274:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2789,"name":"uint256","nodeType":"ElementaryTypeName","src":"12274:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2793,"mutability":"mutable","name":"rounding","nameLocation":"12298:8:16","nodeType":"VariableDeclaration","scope":2826,"src":"12289:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2792,"nodeType":"UserDefinedTypeName","pathNode":{"id":2791,"name":"Rounding","nameLocations":["12289:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":1969,"src":"12289:8:16"},"referencedDeclaration":1969,"src":"12289:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1969","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12273:34:16"},"returnParameters":{"id":2797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2796,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2826,"src":"12331:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2795,"name":"uint256","nodeType":"ElementaryTypeName","src":"12331:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12330:9:16"},"scope":2827,"src":"12258:255:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2828,"src":"202:12313:16","usedErrors":[]}],"src":"103:12413:16"},"id":16},"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol","exportedSymbols":{"EnumerableSetUpgradeable":[3440]},"id":3441,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2829,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"205:23:17"},{"abstract":false,"baseContracts":[],"canonicalName":"EnumerableSetUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2830,"nodeType":"StructuredDocumentation","src":"230:1090:17","text":" @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported.\n [WARNING]\n ====\n Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n unusable.\n See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n array of EnumerableSet.\n ===="},"fullyImplemented":true,"id":3440,"linearizedBaseContracts":[3440],"name":"EnumerableSetUpgradeable","nameLocation":"1329:24:17","nodeType":"ContractDefinition","nodes":[{"canonicalName":"EnumerableSetUpgradeable.Set","id":2838,"members":[{"constant":false,"id":2833,"mutability":"mutable","name":"_values","nameLocation":"1864:7:17","nodeType":"VariableDeclaration","scope":2838,"src":"1854:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2831,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1854:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2832,"nodeType":"ArrayTypeName","src":"1854:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2837,"mutability":"mutable","name":"_indexes","nameLocation":"2032:8:17","nodeType":"VariableDeclaration","scope":2838,"src":"2004:36:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":2836,"keyType":{"id":2834,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2012:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2004:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueType":{"id":2835,"name":"uint256","nodeType":"ElementaryTypeName","src":"2023:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"Set","nameLocation":"1807:3:17","nodeType":"StructDefinition","scope":3440,"src":"1800:247:17","visibility":"public"},{"body":{"id":2879,"nodeType":"Block","src":"2286:335:17","statements":[{"condition":{"id":2853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2300:22:17","subExpression":{"arguments":[{"id":2850,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"2311:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},{"id":2851,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"2316:5:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2849,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"2301:9:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2838_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) view returns (bool)"}},"id":2852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2301:21:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2877,"nodeType":"Block","src":"2578:37:17","statements":[{"expression":{"hexValue":"66616c7365","id":2875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2599:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":2848,"id":2876,"nodeType":"Return","src":"2592:12:17"}]},"id":2878,"nodeType":"IfStatement","src":"2296:319:17","trueBody":{"id":2874,"nodeType":"Block","src":"2324:248:17","statements":[{"expression":{"arguments":[{"id":2859,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"2355:5:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":2854,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"2338:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2857,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2342:7:17","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2833,"src":"2338:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2350:4:17","memberName":"push","nodeType":"MemberAccess","src":"2338:16:17","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer,bytes32)"}},"id":2860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2338:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2861,"nodeType":"ExpressionStatement","src":"2338:23:17"},{"expression":{"id":2870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2862,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"2496:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2865,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2500:8:17","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":2837,"src":"2496:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2866,"indexExpression":{"id":2864,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"2509:5:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2496:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":2867,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"2518:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2868,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2522:7:17","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2833,"src":"2518:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2530:6:17","memberName":"length","nodeType":"MemberAccess","src":"2518:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2496:40:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2871,"nodeType":"ExpressionStatement","src":"2496:40:17"},{"expression":{"hexValue":"74727565","id":2872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2557:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2848,"id":2873,"nodeType":"Return","src":"2550:11:17"}]}}]},"documentation":{"id":2839,"nodeType":"StructuredDocumentation","src":"2053:159:17","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":2880,"implemented":true,"kind":"function","modifiers":[],"name":"_add","nameLocation":"2226:4:17","nodeType":"FunctionDefinition","parameters":{"id":2845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2842,"mutability":"mutable","name":"set","nameLocation":"2243:3:17","nodeType":"VariableDeclaration","scope":2880,"src":"2231:15:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":2841,"nodeType":"UserDefinedTypeName","pathNode":{"id":2840,"name":"Set","nameLocations":["2231:3:17"],"nodeType":"IdentifierPath","referencedDeclaration":2838,"src":"2231:3:17"},"referencedDeclaration":2838,"src":"2231:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"},{"constant":false,"id":2844,"mutability":"mutable","name":"value","nameLocation":"2256:5:17","nodeType":"VariableDeclaration","scope":2880,"src":"2248:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2843,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2248:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2230:32:17"},"returnParameters":{"id":2848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2847,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2880,"src":"2280:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2846,"name":"bool","nodeType":"ElementaryTypeName","src":"2280:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2279:6:17"},"scope":3440,"src":"2217:404:17","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2963,"nodeType":"Block","src":"2861:1316:17","statements":[{"assignments":[2892],"declarations":[{"constant":false,"id":2892,"mutability":"mutable","name":"valueIndex","nameLocation":"2979:10:17","nodeType":"VariableDeclaration","scope":2963,"src":"2971:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2891,"name":"uint256","nodeType":"ElementaryTypeName","src":"2971:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2897,"initialValue":{"baseExpression":{"expression":{"id":2893,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"2992:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2894,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2996:8:17","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":2837,"src":"2992:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2896,"indexExpression":{"id":2895,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"3005:5:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2992:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2971:40:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2898,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"3026:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3040:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3026:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2961,"nodeType":"Block","src":"4134:37:17","statements":[{"expression":{"hexValue":"66616c7365","id":2959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4155:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":2890,"id":2960,"nodeType":"Return","src":"4148:12:17"}]},"id":2962,"nodeType":"IfStatement","src":"3022:1149:17","trueBody":{"id":2958,"nodeType":"Block","src":"3043:1085:17","statements":[{"assignments":[2902],"declarations":[{"constant":false,"id":2902,"mutability":"mutable","name":"toDeleteIndex","nameLocation":"3403:13:17","nodeType":"VariableDeclaration","scope":2958,"src":"3395:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2901,"name":"uint256","nodeType":"ElementaryTypeName","src":"3395:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2906,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2903,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"3419:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3432:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3419:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3395:38:17"},{"assignments":[2908],"declarations":[{"constant":false,"id":2908,"mutability":"mutable","name":"lastIndex","nameLocation":"3455:9:17","nodeType":"VariableDeclaration","scope":2958,"src":"3447:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2907,"name":"uint256","nodeType":"ElementaryTypeName","src":"3447:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2914,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2909,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"3467:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2910,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3471:7:17","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2833,"src":"3467:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3479:6:17","memberName":"length","nodeType":"MemberAccess","src":"3467:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3488:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3467:22:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3447:42:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2915,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"3508:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2916,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"3521:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3508:26:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2942,"nodeType":"IfStatement","src":"3504:398:17","trueBody":{"id":2941,"nodeType":"Block","src":"3536:366:17","statements":[{"assignments":[2919],"declarations":[{"constant":false,"id":2919,"mutability":"mutable","name":"lastValue","nameLocation":"3562:9:17","nodeType":"VariableDeclaration","scope":2941,"src":"3554:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2918,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3554:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2924,"initialValue":{"baseExpression":{"expression":{"id":2920,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"3574:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2921,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3578:7:17","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2833,"src":"3574:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2923,"indexExpression":{"id":2922,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"3586:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3574:22:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3554:42:17"},{"expression":{"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2925,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"3696:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2928,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3700:7:17","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2833,"src":"3696:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2929,"indexExpression":{"id":2927,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"3708:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3696:26:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2930,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2919,"src":"3725:9:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3696:38:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2932,"nodeType":"ExpressionStatement","src":"3696:38:17"},{"expression":{"id":2939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2933,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"3808:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2936,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3812:8:17","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":2837,"src":"3808:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2937,"indexExpression":{"id":2935,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2919,"src":"3821:9:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3808:23:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2938,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"3834:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3808:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2940,"nodeType":"ExpressionStatement","src":"3808:36:17"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":2943,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"3980:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2946,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3984:7:17","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2833,"src":"3980:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3992:3:17","memberName":"pop","nodeType":"MemberAccess","src":"3980:15:17","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer)"}},"id":2948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3980:17:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2949,"nodeType":"ExpressionStatement","src":"3980:17:17"},{"expression":{"id":2954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4065:26:17","subExpression":{"baseExpression":{"expression":{"id":2950,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"4072:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2951,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4076:8:17","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":2837,"src":"4072:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2953,"indexExpression":{"id":2952,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"4085:5:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4072:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2955,"nodeType":"ExpressionStatement","src":"4065:26:17"},{"expression":{"hexValue":"74727565","id":2956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4113:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2890,"id":2957,"nodeType":"Return","src":"4106:11:17"}]}}]},"documentation":{"id":2881,"nodeType":"StructuredDocumentation","src":"2627:157:17","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":2964,"implemented":true,"kind":"function","modifiers":[],"name":"_remove","nameLocation":"2798:7:17","nodeType":"FunctionDefinition","parameters":{"id":2887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2884,"mutability":"mutable","name":"set","nameLocation":"2818:3:17","nodeType":"VariableDeclaration","scope":2964,"src":"2806:15:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":2883,"nodeType":"UserDefinedTypeName","pathNode":{"id":2882,"name":"Set","nameLocations":["2806:3:17"],"nodeType":"IdentifierPath","referencedDeclaration":2838,"src":"2806:3:17"},"referencedDeclaration":2838,"src":"2806:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"},{"constant":false,"id":2886,"mutability":"mutable","name":"value","nameLocation":"2831:5:17","nodeType":"VariableDeclaration","scope":2964,"src":"2823:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2885,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2823:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2805:32:17"},"returnParameters":{"id":2890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2889,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2964,"src":"2855:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2888,"name":"bool","nodeType":"ElementaryTypeName","src":"2855:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2854:6:17"},"scope":3440,"src":"2789:1388:17","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2982,"nodeType":"Block","src":"4337:48:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":2975,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2968,"src":"4354:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2976,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4358:8:17","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":2837,"src":"4354:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2978,"indexExpression":{"id":2977,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2970,"src":"4367:5:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4354:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4377:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4354:24:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2974,"id":2981,"nodeType":"Return","src":"4347:31:17"}]},"documentation":{"id":2965,"nodeType":"StructuredDocumentation","src":"4183:70:17","text":" @dev Returns true if the value is in the set. O(1)."},"id":2983,"implemented":true,"kind":"function","modifiers":[],"name":"_contains","nameLocation":"4267:9:17","nodeType":"FunctionDefinition","parameters":{"id":2971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2968,"mutability":"mutable","name":"set","nameLocation":"4289:3:17","nodeType":"VariableDeclaration","scope":2983,"src":"4277:15:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":2967,"nodeType":"UserDefinedTypeName","pathNode":{"id":2966,"name":"Set","nameLocations":["4277:3:17"],"nodeType":"IdentifierPath","referencedDeclaration":2838,"src":"4277:3:17"},"referencedDeclaration":2838,"src":"4277:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"},{"constant":false,"id":2970,"mutability":"mutable","name":"value","nameLocation":"4302:5:17","nodeType":"VariableDeclaration","scope":2983,"src":"4294:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2969,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4294:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4276:32:17"},"returnParameters":{"id":2974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2973,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2983,"src":"4331:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2972,"name":"bool","nodeType":"ElementaryTypeName","src":"4331:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4330:6:17"},"scope":3440,"src":"4258:127:17","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":2996,"nodeType":"Block","src":"4531:42:17","statements":[{"expression":{"expression":{"expression":{"id":2992,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"4548:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2993,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4552:7:17","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2833,"src":"4548:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4560:6:17","memberName":"length","nodeType":"MemberAccess","src":"4548:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2991,"id":2995,"nodeType":"Return","src":"4541:25:17"}]},"documentation":{"id":2984,"nodeType":"StructuredDocumentation","src":"4391:70:17","text":" @dev Returns the number of values on the set. O(1)."},"id":2997,"implemented":true,"kind":"function","modifiers":[],"name":"_length","nameLocation":"4475:7:17","nodeType":"FunctionDefinition","parameters":{"id":2988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2987,"mutability":"mutable","name":"set","nameLocation":"4495:3:17","nodeType":"VariableDeclaration","scope":2997,"src":"4483:15:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":2986,"nodeType":"UserDefinedTypeName","pathNode":{"id":2985,"name":"Set","nameLocations":["4483:3:17"],"nodeType":"IdentifierPath","referencedDeclaration":2838,"src":"4483:3:17"},"referencedDeclaration":2838,"src":"4483:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"}],"src":"4482:17:17"},"returnParameters":{"id":2991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2990,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2997,"src":"4522:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2989,"name":"uint256","nodeType":"ElementaryTypeName","src":"4522:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4521:9:17"},"scope":3440,"src":"4466:107:17","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":3013,"nodeType":"Block","src":"4991:42:17","statements":[{"expression":{"baseExpression":{"expression":{"id":3008,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"5008:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":3009,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5012:7:17","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2833,"src":"5008:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3011,"indexExpression":{"id":3010,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"5020:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5008:18:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3007,"id":3012,"nodeType":"Return","src":"5001:25:17"}]},"documentation":{"id":2998,"nodeType":"StructuredDocumentation","src":"4579:331:17","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":3014,"implemented":true,"kind":"function","modifiers":[],"name":"_at","nameLocation":"4924:3:17","nodeType":"FunctionDefinition","parameters":{"id":3004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3001,"mutability":"mutable","name":"set","nameLocation":"4940:3:17","nodeType":"VariableDeclaration","scope":3014,"src":"4928:15:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":3000,"nodeType":"UserDefinedTypeName","pathNode":{"id":2999,"name":"Set","nameLocations":["4928:3:17"],"nodeType":"IdentifierPath","referencedDeclaration":2838,"src":"4928:3:17"},"referencedDeclaration":2838,"src":"4928:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"},{"constant":false,"id":3003,"mutability":"mutable","name":"index","nameLocation":"4953:5:17","nodeType":"VariableDeclaration","scope":3014,"src":"4945:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3002,"name":"uint256","nodeType":"ElementaryTypeName","src":"4945:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4927:32:17"},"returnParameters":{"id":3007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3006,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3014,"src":"4982:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3005,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4982:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4981:9:17"},"scope":3440,"src":"4915:118:17","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":3027,"nodeType":"Block","src":"5647:35:17","statements":[{"expression":{"expression":{"id":3024,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"5664:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":3025,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5668:7:17","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2833,"src":"5664:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"functionReturnParameters":3023,"id":3026,"nodeType":"Return","src":"5657:18:17"}]},"documentation":{"id":3015,"nodeType":"StructuredDocumentation","src":"5039:529:17","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":3028,"implemented":true,"kind":"function","modifiers":[],"name":"_values","nameLocation":"5582:7:17","nodeType":"FunctionDefinition","parameters":{"id":3019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3018,"mutability":"mutable","name":"set","nameLocation":"5602:3:17","nodeType":"VariableDeclaration","scope":3028,"src":"5590:15:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":3017,"nodeType":"UserDefinedTypeName","pathNode":{"id":3016,"name":"Set","nameLocations":["5590:3:17"],"nodeType":"IdentifierPath","referencedDeclaration":2838,"src":"5590:3:17"},"referencedDeclaration":2838,"src":"5590:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"}],"src":"5589:17:17"},"returnParameters":{"id":3023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3022,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3028,"src":"5629:16:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3020,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5629:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3021,"nodeType":"ArrayTypeName","src":"5629:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"5628:18:17"},"scope":3440,"src":"5573:109:17","stateMutability":"view","virtual":false,"visibility":"private"},{"canonicalName":"EnumerableSetUpgradeable.Bytes32Set","id":3032,"members":[{"constant":false,"id":3031,"mutability":"mutable","name":"_inner","nameLocation":"5739:6:17","nodeType":"VariableDeclaration","scope":3032,"src":"5735:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":3030,"nodeType":"UserDefinedTypeName","pathNode":{"id":3029,"name":"Set","nameLocations":["5735:3:17"],"nodeType":"IdentifierPath","referencedDeclaration":2838,"src":"5735:3:17"},"referencedDeclaration":2838,"src":"5735:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"}],"name":"Bytes32Set","nameLocation":"5714:10:17","nodeType":"StructDefinition","scope":3440,"src":"5707:45:17","visibility":"public"},{"body":{"id":3049,"nodeType":"Block","src":"5998:47:17","statements":[{"expression":{"arguments":[{"expression":{"id":3044,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3036,"src":"6020:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3032_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set storage pointer"}},"id":3045,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6024:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3031,"src":"6020:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"id":3046,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3038,"src":"6032:5:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3043,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"6015:4:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2838_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) returns (bool)"}},"id":3047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6015:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3042,"id":3048,"nodeType":"Return","src":"6008:30:17"}]},"documentation":{"id":3033,"nodeType":"StructuredDocumentation","src":"5758:159:17","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":3050,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"5931:3:17","nodeType":"FunctionDefinition","parameters":{"id":3039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3036,"mutability":"mutable","name":"set","nameLocation":"5954:3:17","nodeType":"VariableDeclaration","scope":3050,"src":"5935:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3032_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"},"typeName":{"id":3035,"nodeType":"UserDefinedTypeName","pathNode":{"id":3034,"name":"Bytes32Set","nameLocations":["5935:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":3032,"src":"5935:10:17"},"referencedDeclaration":3032,"src":"5935:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3032_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":3038,"mutability":"mutable","name":"value","nameLocation":"5967:5:17","nodeType":"VariableDeclaration","scope":3050,"src":"5959:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3037,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5959:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5934:39:17"},"returnParameters":{"id":3042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3041,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3050,"src":"5992:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3040,"name":"bool","nodeType":"ElementaryTypeName","src":"5992:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5991:6:17"},"scope":3440,"src":"5922:123:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3067,"nodeType":"Block","src":"6292:50:17","statements":[{"expression":{"arguments":[{"expression":{"id":3062,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3054,"src":"6317:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3032_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set storage pointer"}},"id":3063,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6321:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3031,"src":"6317:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"id":3064,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3056,"src":"6329:5:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3061,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2964,"src":"6309:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2838_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) returns (bool)"}},"id":3065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6309:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3060,"id":3066,"nodeType":"Return","src":"6302:33:17"}]},"documentation":{"id":3051,"nodeType":"StructuredDocumentation","src":"6051:157:17","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":3068,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"6222:6:17","nodeType":"FunctionDefinition","parameters":{"id":3057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3054,"mutability":"mutable","name":"set","nameLocation":"6248:3:17","nodeType":"VariableDeclaration","scope":3068,"src":"6229:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3032_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"},"typeName":{"id":3053,"nodeType":"UserDefinedTypeName","pathNode":{"id":3052,"name":"Bytes32Set","nameLocations":["6229:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":3032,"src":"6229:10:17"},"referencedDeclaration":3032,"src":"6229:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3032_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":3056,"mutability":"mutable","name":"value","nameLocation":"6261:5:17","nodeType":"VariableDeclaration","scope":3068,"src":"6253:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3055,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6253:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6228:39:17"},"returnParameters":{"id":3060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3059,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3068,"src":"6286:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3058,"name":"bool","nodeType":"ElementaryTypeName","src":"6286:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6285:6:17"},"scope":3440,"src":"6213:129:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3085,"nodeType":"Block","src":"6509:52:17","statements":[{"expression":{"arguments":[{"expression":{"id":3080,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"6536:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3032_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set storage pointer"}},"id":3081,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6540:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3031,"src":"6536:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"id":3082,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"6548:5:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3079,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"6526:9:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2838_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) view returns (bool)"}},"id":3083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6526:28:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3078,"id":3084,"nodeType":"Return","src":"6519:35:17"}]},"documentation":{"id":3069,"nodeType":"StructuredDocumentation","src":"6348:70:17","text":" @dev Returns true if the value is in the set. O(1)."},"id":3086,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"6432:8:17","nodeType":"FunctionDefinition","parameters":{"id":3075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3072,"mutability":"mutable","name":"set","nameLocation":"6460:3:17","nodeType":"VariableDeclaration","scope":3086,"src":"6441:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3032_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"},"typeName":{"id":3071,"nodeType":"UserDefinedTypeName","pathNode":{"id":3070,"name":"Bytes32Set","nameLocations":["6441:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":3032,"src":"6441:10:17"},"referencedDeclaration":3032,"src":"6441:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3032_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":3074,"mutability":"mutable","name":"value","nameLocation":"6473:5:17","nodeType":"VariableDeclaration","scope":3086,"src":"6465:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3073,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6465:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6440:39:17"},"returnParameters":{"id":3078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3077,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3086,"src":"6503:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3076,"name":"bool","nodeType":"ElementaryTypeName","src":"6503:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6502:6:17"},"scope":3440,"src":"6423:138:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3100,"nodeType":"Block","src":"6714:43:17","statements":[{"expression":{"arguments":[{"expression":{"id":3096,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3090,"src":"6739:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3032_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set storage pointer"}},"id":3097,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6743:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3031,"src":"6739:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}],"id":3095,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2997,"src":"6731:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2838_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer) view returns (uint256)"}},"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6731:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3094,"id":3099,"nodeType":"Return","src":"6724:26:17"}]},"documentation":{"id":3087,"nodeType":"StructuredDocumentation","src":"6567:70:17","text":" @dev Returns the number of values in the set. O(1)."},"id":3101,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"6651:6:17","nodeType":"FunctionDefinition","parameters":{"id":3091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3090,"mutability":"mutable","name":"set","nameLocation":"6677:3:17","nodeType":"VariableDeclaration","scope":3101,"src":"6658:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3032_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"},"typeName":{"id":3089,"nodeType":"UserDefinedTypeName","pathNode":{"id":3088,"name":"Bytes32Set","nameLocations":["6658:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":3032,"src":"6658:10:17"},"referencedDeclaration":3032,"src":"6658:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3032_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"}},"visibility":"internal"}],"src":"6657:24:17"},"returnParameters":{"id":3094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3093,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3101,"src":"6705:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3092,"name":"uint256","nodeType":"ElementaryTypeName","src":"6705:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6704:9:17"},"scope":3440,"src":"6642:115:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3118,"nodeType":"Block","src":"7182:46:17","statements":[{"expression":{"arguments":[{"expression":{"id":3113,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3105,"src":"7203:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3032_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set storage pointer"}},"id":3114,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7207:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3031,"src":"7203:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"id":3115,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"7215:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3112,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"7199:3:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2838_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,uint256) view returns (bytes32)"}},"id":3116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7199:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3111,"id":3117,"nodeType":"Return","src":"7192:29:17"}]},"documentation":{"id":3102,"nodeType":"StructuredDocumentation","src":"6763:331:17","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":3119,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"7108:2:17","nodeType":"FunctionDefinition","parameters":{"id":3108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3105,"mutability":"mutable","name":"set","nameLocation":"7130:3:17","nodeType":"VariableDeclaration","scope":3119,"src":"7111:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3032_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"},"typeName":{"id":3104,"nodeType":"UserDefinedTypeName","pathNode":{"id":3103,"name":"Bytes32Set","nameLocations":["7111:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":3032,"src":"7111:10:17"},"referencedDeclaration":3032,"src":"7111:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3032_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":3107,"mutability":"mutable","name":"index","nameLocation":"7143:5:17","nodeType":"VariableDeclaration","scope":3119,"src":"7135:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3106,"name":"uint256","nodeType":"ElementaryTypeName","src":"7135:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7110:39:17"},"returnParameters":{"id":3111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3110,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3119,"src":"7173:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3109,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7173:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7172:9:17"},"scope":3440,"src":"7099:129:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3148,"nodeType":"Block","src":"7849:219:17","statements":[{"assignments":[3133],"declarations":[{"constant":false,"id":3133,"mutability":"mutable","name":"store","nameLocation":"7876:5:17","nodeType":"VariableDeclaration","scope":3148,"src":"7859:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3131,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7859:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3132,"nodeType":"ArrayTypeName","src":"7859:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":3138,"initialValue":{"arguments":[{"expression":{"id":3135,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3123,"src":"7892:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3032_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set storage pointer"}},"id":3136,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7896:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3031,"src":"7892:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}],"id":3134,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3028,"src":"7884:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2838_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer) view returns (bytes32[] memory)"}},"id":3137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7884:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7859:44:17"},{"assignments":[3143],"declarations":[{"constant":false,"id":3143,"mutability":"mutable","name":"result","nameLocation":"7930:6:17","nodeType":"VariableDeclaration","scope":3148,"src":"7913:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3141,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7913:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3142,"nodeType":"ArrayTypeName","src":"7913:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":3144,"nodeType":"VariableDeclarationStatement","src":"7913:23:17"},{"AST":{"nodeType":"YulBlock","src":"7999:39:17","statements":[{"nodeType":"YulAssignment","src":"8013:15:17","value":{"name":"store","nodeType":"YulIdentifier","src":"8023:5:17"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"8013:6:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3143,"isOffset":false,"isSlot":false,"src":"8013:6:17","valueSize":1},{"declaration":3133,"isOffset":false,"isSlot":false,"src":"8023:5:17","valueSize":1}],"id":3145,"nodeType":"InlineAssembly","src":"7990:48:17"},{"expression":{"id":3146,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3143,"src":"8055:6:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"functionReturnParameters":3128,"id":3147,"nodeType":"Return","src":"8048:13:17"}]},"documentation":{"id":3120,"nodeType":"StructuredDocumentation","src":"7234:529:17","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":3149,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"7777:6:17","nodeType":"FunctionDefinition","parameters":{"id":3124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3123,"mutability":"mutable","name":"set","nameLocation":"7803:3:17","nodeType":"VariableDeclaration","scope":3149,"src":"7784:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3032_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"},"typeName":{"id":3122,"nodeType":"UserDefinedTypeName","pathNode":{"id":3121,"name":"Bytes32Set","nameLocations":["7784:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":3032,"src":"7784:10:17"},"referencedDeclaration":3032,"src":"7784:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3032_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"}},"visibility":"internal"}],"src":"7783:24:17"},"returnParameters":{"id":3128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3127,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3149,"src":"7831:16:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3125,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7831:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3126,"nodeType":"ArrayTypeName","src":"7831:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7830:18:17"},"scope":3440,"src":"7768:300:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSetUpgradeable.AddressSet","id":3153,"members":[{"constant":false,"id":3152,"mutability":"mutable","name":"_inner","nameLocation":"8125:6:17","nodeType":"VariableDeclaration","scope":3153,"src":"8121:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":3151,"nodeType":"UserDefinedTypeName","pathNode":{"id":3150,"name":"Set","nameLocations":["8121:3:17"],"nodeType":"IdentifierPath","referencedDeclaration":2838,"src":"8121:3:17"},"referencedDeclaration":2838,"src":"8121:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"}],"name":"AddressSet","nameLocation":"8100:10:17","nodeType":"StructDefinition","scope":3440,"src":"8093:45:17","visibility":"public"},{"body":{"id":3179,"nodeType":"Block","src":"8384:74:17","statements":[{"expression":{"arguments":[{"expression":{"id":3165,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"8406:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet storage pointer"}},"id":3166,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8410:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3152,"src":"8406:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":3173,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"8442:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3172,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8434:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3171,"name":"uint160","nodeType":"ElementaryTypeName","src":"8434:7:17","typeDescriptions":{}}},"id":3174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8434:14:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3170,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8426:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3169,"name":"uint256","nodeType":"ElementaryTypeName","src":"8426:7:17","typeDescriptions":{}}},"id":3175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8426:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8418:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3167,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8418:7:17","typeDescriptions":{}}},"id":3176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8418:32:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3164,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"8401:4:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2838_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) returns (bool)"}},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8401:50:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3163,"id":3178,"nodeType":"Return","src":"8394:57:17"}]},"documentation":{"id":3154,"nodeType":"StructuredDocumentation","src":"8144:159:17","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":3180,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"8317:3:17","nodeType":"FunctionDefinition","parameters":{"id":3160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3157,"mutability":"mutable","name":"set","nameLocation":"8340:3:17","nodeType":"VariableDeclaration","scope":3180,"src":"8321:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"},"typeName":{"id":3156,"nodeType":"UserDefinedTypeName","pathNode":{"id":3155,"name":"AddressSet","nameLocations":["8321:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":3153,"src":"8321:10:17"},"referencedDeclaration":3153,"src":"8321:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}},"visibility":"internal"},{"constant":false,"id":3159,"mutability":"mutable","name":"value","nameLocation":"8353:5:17","nodeType":"VariableDeclaration","scope":3180,"src":"8345:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3158,"name":"address","nodeType":"ElementaryTypeName","src":"8345:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8320:39:17"},"returnParameters":{"id":3163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3162,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3180,"src":"8378:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3161,"name":"bool","nodeType":"ElementaryTypeName","src":"8378:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8377:6:17"},"scope":3440,"src":"8308:150:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3206,"nodeType":"Block","src":"8705:77:17","statements":[{"expression":{"arguments":[{"expression":{"id":3192,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3184,"src":"8730:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet storage pointer"}},"id":3193,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8734:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3152,"src":"8730:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":3200,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3186,"src":"8766:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3199,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8758:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3198,"name":"uint160","nodeType":"ElementaryTypeName","src":"8758:7:17","typeDescriptions":{}}},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8758:14:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3197,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8750:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3196,"name":"uint256","nodeType":"ElementaryTypeName","src":"8750:7:17","typeDescriptions":{}}},"id":3202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8750:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3195,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8742:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3194,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8742:7:17","typeDescriptions":{}}},"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8742:32:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3191,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2964,"src":"8722:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2838_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) returns (bool)"}},"id":3204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8722:53:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3190,"id":3205,"nodeType":"Return","src":"8715:60:17"}]},"documentation":{"id":3181,"nodeType":"StructuredDocumentation","src":"8464:157:17","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":3207,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"8635:6:17","nodeType":"FunctionDefinition","parameters":{"id":3187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3184,"mutability":"mutable","name":"set","nameLocation":"8661:3:17","nodeType":"VariableDeclaration","scope":3207,"src":"8642:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"},"typeName":{"id":3183,"nodeType":"UserDefinedTypeName","pathNode":{"id":3182,"name":"AddressSet","nameLocations":["8642:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":3153,"src":"8642:10:17"},"referencedDeclaration":3153,"src":"8642:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}},"visibility":"internal"},{"constant":false,"id":3186,"mutability":"mutable","name":"value","nameLocation":"8674:5:17","nodeType":"VariableDeclaration","scope":3207,"src":"8666:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3185,"name":"address","nodeType":"ElementaryTypeName","src":"8666:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8641:39:17"},"returnParameters":{"id":3190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3189,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3207,"src":"8699:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3188,"name":"bool","nodeType":"ElementaryTypeName","src":"8699:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8698:6:17"},"scope":3440,"src":"8626:156:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3233,"nodeType":"Block","src":"8949:79:17","statements":[{"expression":{"arguments":[{"expression":{"id":3219,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3211,"src":"8976:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet storage pointer"}},"id":3220,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8980:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3152,"src":"8976:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":3227,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3213,"src":"9012:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3226,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9004:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3225,"name":"uint160","nodeType":"ElementaryTypeName","src":"9004:7:17","typeDescriptions":{}}},"id":3228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9004:14:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3224,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8996:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3223,"name":"uint256","nodeType":"ElementaryTypeName","src":"8996:7:17","typeDescriptions":{}}},"id":3229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8996:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8988:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3221,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8988:7:17","typeDescriptions":{}}},"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8988:32:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3218,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"8966:9:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2838_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) view returns (bool)"}},"id":3231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8966:55:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3217,"id":3232,"nodeType":"Return","src":"8959:62:17"}]},"documentation":{"id":3208,"nodeType":"StructuredDocumentation","src":"8788:70:17","text":" @dev Returns true if the value is in the set. O(1)."},"id":3234,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"8872:8:17","nodeType":"FunctionDefinition","parameters":{"id":3214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3211,"mutability":"mutable","name":"set","nameLocation":"8900:3:17","nodeType":"VariableDeclaration","scope":3234,"src":"8881:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"},"typeName":{"id":3210,"nodeType":"UserDefinedTypeName","pathNode":{"id":3209,"name":"AddressSet","nameLocations":["8881:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":3153,"src":"8881:10:17"},"referencedDeclaration":3153,"src":"8881:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}},"visibility":"internal"},{"constant":false,"id":3213,"mutability":"mutable","name":"value","nameLocation":"8913:5:17","nodeType":"VariableDeclaration","scope":3234,"src":"8905:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3212,"name":"address","nodeType":"ElementaryTypeName","src":"8905:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8880:39:17"},"returnParameters":{"id":3217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3216,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3234,"src":"8943:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3215,"name":"bool","nodeType":"ElementaryTypeName","src":"8943:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8942:6:17"},"scope":3440,"src":"8863:165:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3248,"nodeType":"Block","src":"9181:43:17","statements":[{"expression":{"arguments":[{"expression":{"id":3244,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3238,"src":"9206:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet storage pointer"}},"id":3245,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9210:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3152,"src":"9206:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}],"id":3243,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2997,"src":"9198:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2838_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer) view returns (uint256)"}},"id":3246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9198:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3242,"id":3247,"nodeType":"Return","src":"9191:26:17"}]},"documentation":{"id":3235,"nodeType":"StructuredDocumentation","src":"9034:70:17","text":" @dev Returns the number of values in the set. O(1)."},"id":3249,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"9118:6:17","nodeType":"FunctionDefinition","parameters":{"id":3239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3238,"mutability":"mutable","name":"set","nameLocation":"9144:3:17","nodeType":"VariableDeclaration","scope":3249,"src":"9125:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"},"typeName":{"id":3237,"nodeType":"UserDefinedTypeName","pathNode":{"id":3236,"name":"AddressSet","nameLocations":["9125:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":3153,"src":"9125:10:17"},"referencedDeclaration":3153,"src":"9125:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}},"visibility":"internal"}],"src":"9124:24:17"},"returnParameters":{"id":3242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3241,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3249,"src":"9172:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3240,"name":"uint256","nodeType":"ElementaryTypeName","src":"9172:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9171:9:17"},"scope":3440,"src":"9109:115:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3275,"nodeType":"Block","src":"9649:73:17","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":3267,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"9694:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet storage pointer"}},"id":3268,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9698:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3152,"src":"9694:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"id":3269,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"9706:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3266,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"9690:3:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2838_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,uint256) view returns (bytes32)"}},"id":3270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9690:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9682:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3264,"name":"uint256","nodeType":"ElementaryTypeName","src":"9682:7:17","typeDescriptions":{}}},"id":3271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9682:31:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3263,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9674:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3262,"name":"uint160","nodeType":"ElementaryTypeName","src":"9674:7:17","typeDescriptions":{}}},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9674:40:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9666:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3260,"name":"address","nodeType":"ElementaryTypeName","src":"9666:7:17","typeDescriptions":{}}},"id":3273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9666:49:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3259,"id":3274,"nodeType":"Return","src":"9659:56:17"}]},"documentation":{"id":3250,"nodeType":"StructuredDocumentation","src":"9230:331:17","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":3276,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"9575:2:17","nodeType":"FunctionDefinition","parameters":{"id":3256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3253,"mutability":"mutable","name":"set","nameLocation":"9597:3:17","nodeType":"VariableDeclaration","scope":3276,"src":"9578:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"},"typeName":{"id":3252,"nodeType":"UserDefinedTypeName","pathNode":{"id":3251,"name":"AddressSet","nameLocations":["9578:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":3153,"src":"9578:10:17"},"referencedDeclaration":3153,"src":"9578:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}},"visibility":"internal"},{"constant":false,"id":3255,"mutability":"mutable","name":"index","nameLocation":"9610:5:17","nodeType":"VariableDeclaration","scope":3276,"src":"9602:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3254,"name":"uint256","nodeType":"ElementaryTypeName","src":"9602:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9577:39:17"},"returnParameters":{"id":3259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3258,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3276,"src":"9640:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3257,"name":"address","nodeType":"ElementaryTypeName","src":"9640:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9639:9:17"},"scope":3440,"src":"9566:156:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3305,"nodeType":"Block","src":"10343:219:17","statements":[{"assignments":[3290],"declarations":[{"constant":false,"id":3290,"mutability":"mutable","name":"store","nameLocation":"10370:5:17","nodeType":"VariableDeclaration","scope":3305,"src":"10353:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3288,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10353:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3289,"nodeType":"ArrayTypeName","src":"10353:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":3295,"initialValue":{"arguments":[{"expression":{"id":3292,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"10386:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet storage pointer"}},"id":3293,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10390:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3152,"src":"10386:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}],"id":3291,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3028,"src":"10378:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2838_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer) view returns (bytes32[] memory)"}},"id":3294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10378:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10353:44:17"},{"assignments":[3300],"declarations":[{"constant":false,"id":3300,"mutability":"mutable","name":"result","nameLocation":"10424:6:17","nodeType":"VariableDeclaration","scope":3305,"src":"10407:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3298,"name":"address","nodeType":"ElementaryTypeName","src":"10407:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3299,"nodeType":"ArrayTypeName","src":"10407:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":3301,"nodeType":"VariableDeclarationStatement","src":"10407:23:17"},{"AST":{"nodeType":"YulBlock","src":"10493:39:17","statements":[{"nodeType":"YulAssignment","src":"10507:15:17","value":{"name":"store","nodeType":"YulIdentifier","src":"10517:5:17"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"10507:6:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3300,"isOffset":false,"isSlot":false,"src":"10507:6:17","valueSize":1},{"declaration":3290,"isOffset":false,"isSlot":false,"src":"10517:5:17","valueSize":1}],"id":3302,"nodeType":"InlineAssembly","src":"10484:48:17"},{"expression":{"id":3303,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3300,"src":"10549:6:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":3285,"id":3304,"nodeType":"Return","src":"10542:13:17"}]},"documentation":{"id":3277,"nodeType":"StructuredDocumentation","src":"9728:529:17","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":3306,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"10271:6:17","nodeType":"FunctionDefinition","parameters":{"id":3281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3280,"mutability":"mutable","name":"set","nameLocation":"10297:3:17","nodeType":"VariableDeclaration","scope":3306,"src":"10278:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"},"typeName":{"id":3279,"nodeType":"UserDefinedTypeName","pathNode":{"id":3278,"name":"AddressSet","nameLocations":["10278:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":3153,"src":"10278:10:17"},"referencedDeclaration":3153,"src":"10278:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3153_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}},"visibility":"internal"}],"src":"10277:24:17"},"returnParameters":{"id":3285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3284,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3306,"src":"10325:16:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3282,"name":"address","nodeType":"ElementaryTypeName","src":"10325:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3283,"nodeType":"ArrayTypeName","src":"10325:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"10324:18:17"},"scope":3440,"src":"10262:300:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSetUpgradeable.UintSet","id":3310,"members":[{"constant":false,"id":3309,"mutability":"mutable","name":"_inner","nameLocation":"10613:6:17","nodeType":"VariableDeclaration","scope":3310,"src":"10609:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":3308,"nodeType":"UserDefinedTypeName","pathNode":{"id":3307,"name":"Set","nameLocations":["10609:3:17"],"nodeType":"IdentifierPath","referencedDeclaration":2838,"src":"10609:3:17"},"referencedDeclaration":2838,"src":"10609:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"}],"name":"UintSet","nameLocation":"10591:7:17","nodeType":"StructDefinition","scope":3440,"src":"10584:42:17","visibility":"public"},{"body":{"id":3330,"nodeType":"Block","src":"10869:56:17","statements":[{"expression":{"arguments":[{"expression":{"id":3322,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3314,"src":"10891:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3310_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet storage pointer"}},"id":3323,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10895:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3309,"src":"10891:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"arguments":[{"id":3326,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3316,"src":"10911:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3325,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10903:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3324,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10903:7:17","typeDescriptions":{}}},"id":3327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10903:14:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3321,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"10886:4:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2838_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) returns (bool)"}},"id":3328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10886:32:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3320,"id":3329,"nodeType":"Return","src":"10879:39:17"}]},"documentation":{"id":3311,"nodeType":"StructuredDocumentation","src":"10632:159:17","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":3331,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"10805:3:17","nodeType":"FunctionDefinition","parameters":{"id":3317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3314,"mutability":"mutable","name":"set","nameLocation":"10825:3:17","nodeType":"VariableDeclaration","scope":3331,"src":"10809:19:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3310_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"},"typeName":{"id":3313,"nodeType":"UserDefinedTypeName","pathNode":{"id":3312,"name":"UintSet","nameLocations":["10809:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":3310,"src":"10809:7:17"},"referencedDeclaration":3310,"src":"10809:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3310_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"}},"visibility":"internal"},{"constant":false,"id":3316,"mutability":"mutable","name":"value","nameLocation":"10838:5:17","nodeType":"VariableDeclaration","scope":3331,"src":"10830:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3315,"name":"uint256","nodeType":"ElementaryTypeName","src":"10830:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10808:36:17"},"returnParameters":{"id":3320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3319,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3331,"src":"10863:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3318,"name":"bool","nodeType":"ElementaryTypeName","src":"10863:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10862:6:17"},"scope":3440,"src":"10796:129:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3351,"nodeType":"Block","src":"11169:59:17","statements":[{"expression":{"arguments":[{"expression":{"id":3343,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3335,"src":"11194:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3310_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet storage pointer"}},"id":3344,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11198:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3309,"src":"11194:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"arguments":[{"id":3347,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3337,"src":"11214:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3346,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11206:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3345,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11206:7:17","typeDescriptions":{}}},"id":3348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11206:14:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3342,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2964,"src":"11186:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2838_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) returns (bool)"}},"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11186:35:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3341,"id":3350,"nodeType":"Return","src":"11179:42:17"}]},"documentation":{"id":3332,"nodeType":"StructuredDocumentation","src":"10931:157:17","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":3352,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"11102:6:17","nodeType":"FunctionDefinition","parameters":{"id":3338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3335,"mutability":"mutable","name":"set","nameLocation":"11125:3:17","nodeType":"VariableDeclaration","scope":3352,"src":"11109:19:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3310_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"},"typeName":{"id":3334,"nodeType":"UserDefinedTypeName","pathNode":{"id":3333,"name":"UintSet","nameLocations":["11109:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":3310,"src":"11109:7:17"},"referencedDeclaration":3310,"src":"11109:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3310_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"}},"visibility":"internal"},{"constant":false,"id":3337,"mutability":"mutable","name":"value","nameLocation":"11138:5:17","nodeType":"VariableDeclaration","scope":3352,"src":"11130:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3336,"name":"uint256","nodeType":"ElementaryTypeName","src":"11130:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11108:36:17"},"returnParameters":{"id":3341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3340,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3352,"src":"11163:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3339,"name":"bool","nodeType":"ElementaryTypeName","src":"11163:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11162:6:17"},"scope":3440,"src":"11093:135:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3372,"nodeType":"Block","src":"11392:61:17","statements":[{"expression":{"arguments":[{"expression":{"id":3364,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3356,"src":"11419:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3310_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet storage pointer"}},"id":3365,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11423:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3309,"src":"11419:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"arguments":[{"id":3368,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3358,"src":"11439:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3367,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11431:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3366,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11431:7:17","typeDescriptions":{}}},"id":3369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11431:14:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3363,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"11409:9:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2838_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) view returns (bool)"}},"id":3370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11409:37:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3362,"id":3371,"nodeType":"Return","src":"11402:44:17"}]},"documentation":{"id":3353,"nodeType":"StructuredDocumentation","src":"11234:70:17","text":" @dev Returns true if the value is in the set. O(1)."},"id":3373,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"11318:8:17","nodeType":"FunctionDefinition","parameters":{"id":3359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3356,"mutability":"mutable","name":"set","nameLocation":"11343:3:17","nodeType":"VariableDeclaration","scope":3373,"src":"11327:19:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3310_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"},"typeName":{"id":3355,"nodeType":"UserDefinedTypeName","pathNode":{"id":3354,"name":"UintSet","nameLocations":["11327:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":3310,"src":"11327:7:17"},"referencedDeclaration":3310,"src":"11327:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3310_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"}},"visibility":"internal"},{"constant":false,"id":3358,"mutability":"mutable","name":"value","nameLocation":"11356:5:17","nodeType":"VariableDeclaration","scope":3373,"src":"11348:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3357,"name":"uint256","nodeType":"ElementaryTypeName","src":"11348:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11326:36:17"},"returnParameters":{"id":3362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3361,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3373,"src":"11386:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3360,"name":"bool","nodeType":"ElementaryTypeName","src":"11386:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11385:6:17"},"scope":3440,"src":"11309:144:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3387,"nodeType":"Block","src":"11603:43:17","statements":[{"expression":{"arguments":[{"expression":{"id":3383,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3377,"src":"11628:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3310_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet storage pointer"}},"id":3384,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11632:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3309,"src":"11628:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}],"id":3382,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2997,"src":"11620:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2838_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer) view returns (uint256)"}},"id":3385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11620:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3381,"id":3386,"nodeType":"Return","src":"11613:26:17"}]},"documentation":{"id":3374,"nodeType":"StructuredDocumentation","src":"11459:70:17","text":" @dev Returns the number of values in the set. O(1)."},"id":3388,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"11543:6:17","nodeType":"FunctionDefinition","parameters":{"id":3378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3377,"mutability":"mutable","name":"set","nameLocation":"11566:3:17","nodeType":"VariableDeclaration","scope":3388,"src":"11550:19:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3310_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"},"typeName":{"id":3376,"nodeType":"UserDefinedTypeName","pathNode":{"id":3375,"name":"UintSet","nameLocations":["11550:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":3310,"src":"11550:7:17"},"referencedDeclaration":3310,"src":"11550:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3310_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"}},"visibility":"internal"}],"src":"11549:21:17"},"returnParameters":{"id":3381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3388,"src":"11594:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3379,"name":"uint256","nodeType":"ElementaryTypeName","src":"11594:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11593:9:17"},"scope":3440,"src":"11534:112:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3408,"nodeType":"Block","src":"12068:55:17","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":3402,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"12097:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3310_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet storage pointer"}},"id":3403,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12101:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3309,"src":"12097:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"id":3404,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"12109:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3401,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"12093:3:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2838_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,uint256) view returns (bytes32)"}},"id":3405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12093:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3400,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12085:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3399,"name":"uint256","nodeType":"ElementaryTypeName","src":"12085:7:17","typeDescriptions":{}}},"id":3406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12085:31:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3398,"id":3407,"nodeType":"Return","src":"12078:38:17"}]},"documentation":{"id":3389,"nodeType":"StructuredDocumentation","src":"11652:331:17","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":3409,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"11997:2:17","nodeType":"FunctionDefinition","parameters":{"id":3395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3392,"mutability":"mutable","name":"set","nameLocation":"12016:3:17","nodeType":"VariableDeclaration","scope":3409,"src":"12000:19:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3310_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"},"typeName":{"id":3391,"nodeType":"UserDefinedTypeName","pathNode":{"id":3390,"name":"UintSet","nameLocations":["12000:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":3310,"src":"12000:7:17"},"referencedDeclaration":3310,"src":"12000:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3310_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"}},"visibility":"internal"},{"constant":false,"id":3394,"mutability":"mutable","name":"index","nameLocation":"12029:5:17","nodeType":"VariableDeclaration","scope":3409,"src":"12021:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3393,"name":"uint256","nodeType":"ElementaryTypeName","src":"12021:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11999:36:17"},"returnParameters":{"id":3398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3397,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3409,"src":"12059:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3396,"name":"uint256","nodeType":"ElementaryTypeName","src":"12059:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12058:9:17"},"scope":3440,"src":"11988:135:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3438,"nodeType":"Block","src":"12741:219:17","statements":[{"assignments":[3423],"declarations":[{"constant":false,"id":3423,"mutability":"mutable","name":"store","nameLocation":"12768:5:17","nodeType":"VariableDeclaration","scope":3438,"src":"12751:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3421,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12751:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3422,"nodeType":"ArrayTypeName","src":"12751:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":3428,"initialValue":{"arguments":[{"expression":{"id":3425,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3413,"src":"12784:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3310_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet storage pointer"}},"id":3426,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12788:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3309,"src":"12784:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2838_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}],"id":3424,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3028,"src":"12776:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2838_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer) view returns (bytes32[] memory)"}},"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12776:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"12751:44:17"},{"assignments":[3433],"declarations":[{"constant":false,"id":3433,"mutability":"mutable","name":"result","nameLocation":"12822:6:17","nodeType":"VariableDeclaration","scope":3438,"src":"12805:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3431,"name":"uint256","nodeType":"ElementaryTypeName","src":"12805:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3432,"nodeType":"ArrayTypeName","src":"12805:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":3434,"nodeType":"VariableDeclarationStatement","src":"12805:23:17"},{"AST":{"nodeType":"YulBlock","src":"12891:39:17","statements":[{"nodeType":"YulAssignment","src":"12905:15:17","value":{"name":"store","nodeType":"YulIdentifier","src":"12915:5:17"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12905:6:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3433,"isOffset":false,"isSlot":false,"src":"12905:6:17","valueSize":1},{"declaration":3423,"isOffset":false,"isSlot":false,"src":"12915:5:17","valueSize":1}],"id":3435,"nodeType":"InlineAssembly","src":"12882:48:17"},{"expression":{"id":3436,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3433,"src":"12947:6:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":3418,"id":3437,"nodeType":"Return","src":"12940:13:17"}]},"documentation":{"id":3410,"nodeType":"StructuredDocumentation","src":"12129:529:17","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":3439,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"12672:6:17","nodeType":"FunctionDefinition","parameters":{"id":3414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3413,"mutability":"mutable","name":"set","nameLocation":"12695:3:17","nodeType":"VariableDeclaration","scope":3439,"src":"12679:19:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3310_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"},"typeName":{"id":3412,"nodeType":"UserDefinedTypeName","pathNode":{"id":3411,"name":"UintSet","nameLocations":["12679:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":3310,"src":"12679:7:17"},"referencedDeclaration":3310,"src":"12679:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3310_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"}},"visibility":"internal"}],"src":"12678:21:17"},"returnParameters":{"id":3418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3439,"src":"12723:16:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3415,"name":"uint256","nodeType":"ElementaryTypeName","src":"12723:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3416,"nodeType":"ArrayTypeName","src":"12723:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12722:18:17"},"scope":3440,"src":"12663:297:17","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3441,"src":"1321:11641:17","usedErrors":[]}],"src":"205:12758:17"},"id":17},"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[5011],"Ownable":[3553]},"id":3554,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3442,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:18"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":3443,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3554,"sourceUnit":5012,"src":"127:30:18","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3445,"name":"Context","nameLocations":["683:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":5011,"src":"683:7:18"},"id":3446,"nodeType":"InheritanceSpecifier","src":"683:7:18"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3444,"nodeType":"StructuredDocumentation","src":"159:494:18","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":3553,"linearizedBaseContracts":[3553,5011],"name":"Ownable","nameLocation":"672:7:18","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3448,"mutability":"mutable","name":"_owner","nameLocation":"713:6:18","nodeType":"VariableDeclaration","scope":3553,"src":"697:22:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3447,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":3454,"name":"OwnershipTransferred","nameLocation":"732:20:18","nodeType":"EventDefinition","parameters":{"id":3453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3450,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:18","nodeType":"VariableDeclaration","scope":3454,"src":"753:29:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3449,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3452,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:18","nodeType":"VariableDeclaration","scope":3454,"src":"784:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3451,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:18"},"src":"726:84:18"},{"body":{"id":3463,"nodeType":"Block","src":"926:49:18","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3459,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5001,"src":"955:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3458,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3552,"src":"936:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"936:32:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3462,"nodeType":"ExpressionStatement","src":"936:32:18"}]},"documentation":{"id":3455,"nodeType":"StructuredDocumentation","src":"816:91:18","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":3464,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3456,"nodeType":"ParameterList","parameters":[],"src":"923:2:18"},"returnParameters":{"id":3457,"nodeType":"ParameterList","parameters":[],"src":"926:0:18"},"scope":3553,"src":"912:63:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3471,"nodeType":"Block","src":"1084:41:18","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3467,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3495,"src":"1094:11:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":3468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1094:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3469,"nodeType":"ExpressionStatement","src":"1094:13:18"},{"id":3470,"nodeType":"PlaceholderStatement","src":"1117:1:18"}]},"documentation":{"id":3465,"nodeType":"StructuredDocumentation","src":"981:77:18","text":" @dev Throws if called by any account other than the owner."},"id":3472,"name":"onlyOwner","nameLocation":"1072:9:18","nodeType":"ModifierDefinition","parameters":{"id":3466,"nodeType":"ParameterList","parameters":[],"src":"1081:2:18"},"src":"1063:62:18","virtual":false,"visibility":"internal"},{"body":{"id":3480,"nodeType":"Block","src":"1256:30:18","statements":[{"expression":{"id":3478,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3448,"src":"1273:6:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3477,"id":3479,"nodeType":"Return","src":"1266:13:18"}]},"documentation":{"id":3473,"nodeType":"StructuredDocumentation","src":"1131:65:18","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":3481,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:18","nodeType":"FunctionDefinition","parameters":{"id":3474,"nodeType":"ParameterList","parameters":[],"src":"1215:2:18"},"returnParameters":{"id":3477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3476,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3481,"src":"1247:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3475,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:18"},"scope":3553,"src":"1201:85:18","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3494,"nodeType":"Block","src":"1404:85:18","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3486,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3481,"src":"1422:5:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1422:7:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3488,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5001,"src":"1433:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":3491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":3485,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1414:68:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3493,"nodeType":"ExpressionStatement","src":"1414:68:18"}]},"documentation":{"id":3482,"nodeType":"StructuredDocumentation","src":"1292:62:18","text":" @dev Throws if the sender is not the owner."},"id":3495,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:18","nodeType":"FunctionDefinition","parameters":{"id":3483,"nodeType":"ParameterList","parameters":[],"src":"1379:2:18"},"returnParameters":{"id":3484,"nodeType":"ParameterList","parameters":[],"src":"1404:0:18"},"scope":3553,"src":"1359:130:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3508,"nodeType":"Block","src":"1885:47:18","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1922:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3503,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1914:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3502,"name":"address","nodeType":"ElementaryTypeName","src":"1914:7:18","typeDescriptions":{}}},"id":3505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1914:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3501,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3552,"src":"1895:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1895:30:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3507,"nodeType":"ExpressionStatement","src":"1895:30:18"}]},"documentation":{"id":3496,"nodeType":"StructuredDocumentation","src":"1495:331:18","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":3509,"implemented":true,"kind":"function","modifiers":[{"id":3499,"kind":"modifierInvocation","modifierName":{"id":3498,"name":"onlyOwner","nameLocations":["1875:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":3472,"src":"1875:9:18"},"nodeType":"ModifierInvocation","src":"1875:9:18"}],"name":"renounceOwnership","nameLocation":"1840:17:18","nodeType":"FunctionDefinition","parameters":{"id":3497,"nodeType":"ParameterList","parameters":[],"src":"1857:2:18"},"returnParameters":{"id":3500,"nodeType":"ParameterList","parameters":[],"src":"1885:0:18"},"scope":3553,"src":"1831:101:18","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":3531,"nodeType":"Block","src":"2151:128:18","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3518,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3512,"src":"2169:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2189:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3520,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2181:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3519,"name":"address","nodeType":"ElementaryTypeName","src":"2181:7:18","typeDescriptions":{}}},"id":3522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2181:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2169:22:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":3524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2193:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":3517,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2161:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2161:73:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3526,"nodeType":"ExpressionStatement","src":"2161:73:18"},{"expression":{"arguments":[{"id":3528,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3512,"src":"2263:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3527,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3552,"src":"2244:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2244:28:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3530,"nodeType":"ExpressionStatement","src":"2244:28:18"}]},"documentation":{"id":3510,"nodeType":"StructuredDocumentation","src":"1938:138:18","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":3532,"implemented":true,"kind":"function","modifiers":[{"id":3515,"kind":"modifierInvocation","modifierName":{"id":3514,"name":"onlyOwner","nameLocations":["2141:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":3472,"src":"2141:9:18"},"nodeType":"ModifierInvocation","src":"2141:9:18"}],"name":"transferOwnership","nameLocation":"2090:17:18","nodeType":"FunctionDefinition","parameters":{"id":3513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3512,"mutability":"mutable","name":"newOwner","nameLocation":"2116:8:18","nodeType":"VariableDeclaration","scope":3532,"src":"2108:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3511,"name":"address","nodeType":"ElementaryTypeName","src":"2108:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2107:18:18"},"returnParameters":{"id":3516,"nodeType":"ParameterList","parameters":[],"src":"2151:0:18"},"scope":3553,"src":"2081:198:18","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":3551,"nodeType":"Block","src":"2496:124:18","statements":[{"assignments":[3539],"declarations":[{"constant":false,"id":3539,"mutability":"mutable","name":"oldOwner","nameLocation":"2514:8:18","nodeType":"VariableDeclaration","scope":3551,"src":"2506:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3538,"name":"address","nodeType":"ElementaryTypeName","src":"2506:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3541,"initialValue":{"id":3540,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3448,"src":"2525:6:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2506:25:18"},{"expression":{"id":3544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3542,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3448,"src":"2541:6:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3543,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3535,"src":"2550:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2541:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3545,"nodeType":"ExpressionStatement","src":"2541:17:18"},{"eventCall":{"arguments":[{"id":3547,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"2594:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3548,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3535,"src":"2604:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3546,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3454,"src":"2573:20:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":3549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2573:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3550,"nodeType":"EmitStatement","src":"2568:45:18"}]},"documentation":{"id":3533,"nodeType":"StructuredDocumentation","src":"2285:143:18","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":3552,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2442:18:18","nodeType":"FunctionDefinition","parameters":{"id":3536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3535,"mutability":"mutable","name":"newOwner","nameLocation":"2469:8:18","nodeType":"VariableDeclaration","scope":3552,"src":"2461:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3534,"name":"address","nodeType":"ElementaryTypeName","src":"2461:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2460:18:18"},"returnParameters":{"id":3537,"nodeType":"ParameterList","parameters":[],"src":"2496:0:18"},"scope":3553,"src":"2433:187:18","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":3554,"src":"654:1968:18","usedErrors":[]}],"src":"102:2521:18"},"id":18},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Address":[4989],"Context":[5011],"ERC165":[5284],"ERC721":[4498],"IERC165":[5296],"IERC721":[4614],"IERC721Metadata":[4659],"IERC721Receiver":[4632],"Math":[6161],"Strings":[5260]},"id":4499,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3555,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:19"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":3556,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4499,"sourceUnit":4615,"src":"132:23:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":3557,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4499,"sourceUnit":4633,"src":"156:31:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":3558,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4499,"sourceUnit":4660,"src":"188:42:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":3559,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4499,"sourceUnit":4990,"src":"231:33:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":3560,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4499,"sourceUnit":5012,"src":"265:33:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":3561,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4499,"sourceUnit":5261,"src":"299:33:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":3562,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4499,"sourceUnit":5285,"src":"333:46:19","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3564,"name":"Context","nameLocations":["647:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":5011,"src":"647:7:19"},"id":3565,"nodeType":"InheritanceSpecifier","src":"647:7:19"},{"baseName":{"id":3566,"name":"ERC165","nameLocations":["656:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":5284,"src":"656:6:19"},"id":3567,"nodeType":"InheritanceSpecifier","src":"656:6:19"},{"baseName":{"id":3568,"name":"IERC721","nameLocations":["664:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":4614,"src":"664:7:19"},"id":3569,"nodeType":"InheritanceSpecifier","src":"664:7:19"},{"baseName":{"id":3570,"name":"IERC721Metadata","nameLocations":["673:15:19"],"nodeType":"IdentifierPath","referencedDeclaration":4659,"src":"673:15:19"},"id":3571,"nodeType":"InheritanceSpecifier","src":"673:15:19"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":3563,"nodeType":"StructuredDocumentation","src":"381:246:19","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":4498,"linearizedBaseContracts":[4498,4659,4614,5284,5296,5011],"name":"ERC721","nameLocation":"637:6:19","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3574,"libraryName":{"id":3572,"name":"Address","nameLocations":["701:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":4989,"src":"701:7:19"},"nodeType":"UsingForDirective","src":"695:26:19","typeName":{"id":3573,"name":"address","nodeType":"ElementaryTypeName","src":"713:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":3577,"libraryName":{"id":3575,"name":"Strings","nameLocations":["732:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":5260,"src":"732:7:19"},"nodeType":"UsingForDirective","src":"726:26:19","typeName":{"id":3576,"name":"uint256","nodeType":"ElementaryTypeName","src":"744:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":3579,"mutability":"mutable","name":"_name","nameLocation":"791:5:19","nodeType":"VariableDeclaration","scope":4498,"src":"776:20:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3578,"name":"string","nodeType":"ElementaryTypeName","src":"776:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":3581,"mutability":"mutable","name":"_symbol","nameLocation":"838:7:19","nodeType":"VariableDeclaration","scope":4498,"src":"823:22:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3580,"name":"string","nodeType":"ElementaryTypeName","src":"823:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":3585,"mutability":"mutable","name":"_owners","nameLocation":"934:7:19","nodeType":"VariableDeclaration","scope":4498,"src":"898:43:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":3584,"keyType":{"id":3582,"name":"uint256","nodeType":"ElementaryTypeName","src":"906:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"898:27:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":3583,"name":"address","nodeType":"ElementaryTypeName","src":"917:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":3589,"mutability":"mutable","name":"_balances","nameLocation":"1028:9:19","nodeType":"VariableDeclaration","scope":4498,"src":"992:45:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":3588,"keyType":{"id":3586,"name":"address","nodeType":"ElementaryTypeName","src":"1000:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"992:27:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":3587,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":3593,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1129:15:19","nodeType":"VariableDeclaration","scope":4498,"src":"1093:51:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":3592,"keyType":{"id":3590,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1093:27:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":3591,"name":"address","nodeType":"ElementaryTypeName","src":"1112:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":3599,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1252:18:19","nodeType":"VariableDeclaration","scope":4498,"src":"1199:71:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":3598,"keyType":{"id":3594,"name":"address","nodeType":"ElementaryTypeName","src":"1207:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1199:44:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":3597,"keyType":{"id":3595,"name":"address","nodeType":"ElementaryTypeName","src":"1226:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1218:24:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":3596,"name":"bool","nodeType":"ElementaryTypeName","src":"1237:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":3615,"nodeType":"Block","src":"1446:57:19","statements":[{"expression":{"id":3609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3607,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3579,"src":"1456:5:19","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3608,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3602,"src":"1464:5:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1456:13:19","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3610,"nodeType":"ExpressionStatement","src":"1456:13:19"},{"expression":{"id":3613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3611,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"1479:7:19","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3612,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3604,"src":"1489:7:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1479:17:19","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3614,"nodeType":"ExpressionStatement","src":"1479:17:19"}]},"documentation":{"id":3600,"nodeType":"StructuredDocumentation","src":"1277:108:19","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":3616,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3602,"mutability":"mutable","name":"name_","nameLocation":"1416:5:19","nodeType":"VariableDeclaration","scope":3616,"src":"1402:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3601,"name":"string","nodeType":"ElementaryTypeName","src":"1402:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3604,"mutability":"mutable","name":"symbol_","nameLocation":"1437:7:19","nodeType":"VariableDeclaration","scope":3616,"src":"1423:21:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3603,"name":"string","nodeType":"ElementaryTypeName","src":"1423:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1401:44:19"},"returnParameters":{"id":3606,"nodeType":"ParameterList","parameters":[],"src":"1446:0:19"},"scope":4498,"src":"1390:113:19","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[5283,5295],"body":{"id":3646,"nodeType":"Block","src":"1678:192:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3627,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3619,"src":"1707:11:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3629,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4614,"src":"1727:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$4614_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$4614_$","typeString":"type(contract IERC721)"}],"id":3628,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1722:4:19","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1722:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$4614","typeString":"type(contract IERC721)"}},"id":3631,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1736:11:19","memberName":"interfaceId","nodeType":"MemberAccess","src":"1722:25:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1707:40:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3633,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3619,"src":"1763:11:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3635,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"1783:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$4659_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$4659_$","typeString":"type(contract IERC721Metadata)"}],"id":3634,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1778:4:19","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1778:21:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$4659","typeString":"type(contract IERC721Metadata)"}},"id":3637,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1800:11:19","memberName":"interfaceId","nodeType":"MemberAccess","src":"1778:33:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1763:48:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:104:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3642,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3619,"src":"1851:11:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":3640,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1827:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$4498_$","typeString":"type(contract super ERC721)"}},"id":3641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1833:17:19","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":5283,"src":"1827:23:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":3643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1827:36:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:156:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3626,"id":3645,"nodeType":"Return","src":"1688:175:19"}]},"documentation":{"id":3617,"nodeType":"StructuredDocumentation","src":"1509:56:19","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":3647,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1579:17:19","nodeType":"FunctionDefinition","overrides":{"id":3623,"nodeType":"OverrideSpecifier","overrides":[{"id":3621,"name":"ERC165","nameLocations":["1646:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":5284,"src":"1646:6:19"},{"id":3622,"name":"IERC165","nameLocations":["1654:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":5296,"src":"1654:7:19"}],"src":"1637:25:19"},"parameters":{"id":3620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3619,"mutability":"mutable","name":"interfaceId","nameLocation":"1604:11:19","nodeType":"VariableDeclaration","scope":3647,"src":"1597:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3618,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1597:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1596:20:19"},"returnParameters":{"id":3626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3625,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3647,"src":"1672:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3624,"name":"bool","nodeType":"ElementaryTypeName","src":"1672:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1671:6:19"},"scope":4498,"src":"1570:300:19","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[4539],"body":{"id":3670,"nodeType":"Block","src":"2010:123:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3657,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3650,"src":"2028:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2045:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3659,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2037:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3658,"name":"address","nodeType":"ElementaryTypeName","src":"2037:7:19","typeDescriptions":{}}},"id":3661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2037:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2028:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":3663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2049:43:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""},"value":"ERC721: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""}],"id":3656,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2020:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2020:73:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3665,"nodeType":"ExpressionStatement","src":"2020:73:19"},{"expression":{"baseExpression":{"id":3666,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"2110:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3668,"indexExpression":{"id":3667,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3650,"src":"2120:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2110:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3655,"id":3669,"nodeType":"Return","src":"2103:23:19"}]},"documentation":{"id":3648,"nodeType":"StructuredDocumentation","src":"1876:48:19","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":3671,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1938:9:19","nodeType":"FunctionDefinition","overrides":{"id":3652,"nodeType":"OverrideSpecifier","overrides":[],"src":"1983:8:19"},"parameters":{"id":3651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3650,"mutability":"mutable","name":"owner","nameLocation":"1956:5:19","nodeType":"VariableDeclaration","scope":3671,"src":"1948:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3649,"name":"address","nodeType":"ElementaryTypeName","src":"1948:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1947:15:19"},"returnParameters":{"id":3655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3654,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3671,"src":"2001:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3653,"name":"uint256","nodeType":"ElementaryTypeName","src":"2001:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2000:9:19"},"scope":4498,"src":"1929:204:19","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[4547],"body":{"id":3698,"nodeType":"Block","src":"2271:138:19","statements":[{"assignments":[3681],"declarations":[{"constant":false,"id":3681,"mutability":"mutable","name":"owner","nameLocation":"2289:5:19","nodeType":"VariableDeclaration","scope":3698,"src":"2281:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3680,"name":"address","nodeType":"ElementaryTypeName","src":"2281:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3685,"initialValue":{"arguments":[{"id":3683,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3674,"src":"2306:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3682,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"2297:8:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2297:17:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2281:33:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3687,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"2332:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3689,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2341:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3688,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:19","typeDescriptions":{}}},"id":3691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2341:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2332:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":3693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2353:26:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":3686,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2324:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2324:56:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3695,"nodeType":"ExpressionStatement","src":"2324:56:19"},{"expression":{"id":3696,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"2397:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3679,"id":3697,"nodeType":"Return","src":"2390:12:19"}]},"documentation":{"id":3672,"nodeType":"StructuredDocumentation","src":"2139:46:19","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":3699,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2199:7:19","nodeType":"FunctionDefinition","overrides":{"id":3676,"nodeType":"OverrideSpecifier","overrides":[],"src":"2244:8:19"},"parameters":{"id":3675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3674,"mutability":"mutable","name":"tokenId","nameLocation":"2215:7:19","nodeType":"VariableDeclaration","scope":3699,"src":"2207:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3673,"name":"uint256","nodeType":"ElementaryTypeName","src":"2207:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2206:17:19"},"returnParameters":{"id":3679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3678,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3699,"src":"2262:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3677,"name":"address","nodeType":"ElementaryTypeName","src":"2262:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2261:9:19"},"scope":4498,"src":"2190:219:19","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[4644],"body":{"id":3708,"nodeType":"Block","src":"2540:29:19","statements":[{"expression":{"id":3706,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3579,"src":"2557:5:19","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":3705,"id":3707,"nodeType":"Return","src":"2550:12:19"}]},"documentation":{"id":3700,"nodeType":"StructuredDocumentation","src":"2415:51:19","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":3709,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2480:4:19","nodeType":"FunctionDefinition","overrides":{"id":3702,"nodeType":"OverrideSpecifier","overrides":[],"src":"2507:8:19"},"parameters":{"id":3701,"nodeType":"ParameterList","parameters":[],"src":"2484:2:19"},"returnParameters":{"id":3705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3704,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3709,"src":"2525:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3703,"name":"string","nodeType":"ElementaryTypeName","src":"2525:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2524:15:19"},"scope":4498,"src":"2471:98:19","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[4650],"body":{"id":3718,"nodeType":"Block","src":"2704:31:19","statements":[{"expression":{"id":3716,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"2721:7:19","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":3715,"id":3717,"nodeType":"Return","src":"2714:14:19"}]},"documentation":{"id":3710,"nodeType":"StructuredDocumentation","src":"2575:53:19","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":3719,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2642:6:19","nodeType":"FunctionDefinition","overrides":{"id":3712,"nodeType":"OverrideSpecifier","overrides":[],"src":"2671:8:19"},"parameters":{"id":3711,"nodeType":"ParameterList","parameters":[],"src":"2648:2:19"},"returnParameters":{"id":3715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3714,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3719,"src":"2689:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3713,"name":"string","nodeType":"ElementaryTypeName","src":"2689:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2688:15:19"},"scope":4498,"src":"2633:102:19","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[4658],"body":{"id":3757,"nodeType":"Block","src":"2889:188:19","statements":[{"expression":{"arguments":[{"id":3729,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"2914:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3728,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4376,"src":"2899:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":3730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2899:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3731,"nodeType":"ExpressionStatement","src":"2899:23:19"},{"assignments":[3733],"declarations":[{"constant":false,"id":3733,"mutability":"mutable","name":"baseURI","nameLocation":"2947:7:19","nodeType":"VariableDeclaration","scope":3757,"src":"2933:21:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3732,"name":"string","nodeType":"ElementaryTypeName","src":"2933:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":3736,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3734,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3767,"src":"2957:8:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":3735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2957:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2933:34:19"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3739,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"2990:7:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3738,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2984:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3737,"name":"bytes","nodeType":"ElementaryTypeName","src":"2984:5:19","typeDescriptions":{}}},"id":3740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2984:14:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2999:6:19","memberName":"length","nodeType":"MemberAccess","src":"2984:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3008:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2984:25:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":3754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3068:2:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":3755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2984:86:19","trueExpression":{"arguments":[{"arguments":[{"id":3748,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"3036:7:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3749,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"3045:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3053:8:19","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":5143,"src":"3045:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":3751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3045:18:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":3746,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3019:3:19","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3747,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3023:12:19","memberName":"encodePacked","nodeType":"MemberAccess","src":"3019:16:19","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3019:45:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3745,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3012:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3744,"name":"string","nodeType":"ElementaryTypeName","src":"3012:6:19","typeDescriptions":{}}},"id":3753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3012:53:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3727,"id":3756,"nodeType":"Return","src":"2977:93:19"}]},"documentation":{"id":3720,"nodeType":"StructuredDocumentation","src":"2741:55:19","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":3758,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2810:8:19","nodeType":"FunctionDefinition","overrides":{"id":3724,"nodeType":"OverrideSpecifier","overrides":[],"src":"2856:8:19"},"parameters":{"id":3723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3722,"mutability":"mutable","name":"tokenId","nameLocation":"2827:7:19","nodeType":"VariableDeclaration","scope":3758,"src":"2819:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3721,"name":"uint256","nodeType":"ElementaryTypeName","src":"2819:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2818:17:19"},"returnParameters":{"id":3727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3726,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3758,"src":"2874:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3725,"name":"string","nodeType":"ElementaryTypeName","src":"2874:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2873:15:19"},"scope":4498,"src":"2801:276:19","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3766,"nodeType":"Block","src":"3385:26:19","statements":[{"expression":{"hexValue":"","id":3764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3402:2:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":3763,"id":3765,"nodeType":"Return","src":"3395:9:19"}]},"documentation":{"id":3759,"nodeType":"StructuredDocumentation","src":"3083:231:19","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":3767,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3328:8:19","nodeType":"FunctionDefinition","parameters":{"id":3760,"nodeType":"ParameterList","parameters":[],"src":"3336:2:19"},"returnParameters":{"id":3763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3762,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3767,"src":"3370:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3761,"name":"string","nodeType":"ElementaryTypeName","src":"3370:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3369:15:19"},"scope":4498,"src":"3319:92:19","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[4587],"body":{"id":3809,"nodeType":"Block","src":"3538:336:19","statements":[{"assignments":[3777],"declarations":[{"constant":false,"id":3777,"mutability":"mutable","name":"owner","nameLocation":"3556:5:19","nodeType":"VariableDeclaration","scope":3809,"src":"3548:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3776,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3782,"initialValue":{"arguments":[{"id":3780,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"3579:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3778,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4498,"src":"3564:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$4498_$","typeString":"type(contract ERC721)"}},"id":3779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3571:7:19","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":3699,"src":"3564:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3564:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3548:39:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3784,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3770,"src":"3605:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3785,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3777,"src":"3611:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3605:11:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572","id":3787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3618:35:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""},"value":"ERC721: approval to current owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""}],"id":3783,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3597:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3597:57:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3789,"nodeType":"ExpressionStatement","src":"3597:57:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3791,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5001,"src":"3686:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3686:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3793,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3777,"src":"3702:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3686:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3796,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3777,"src":"3728:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3797,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5001,"src":"3735:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3735:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3795,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3863,"src":"3711:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":3799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3711:37:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3686:62:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","id":3801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3762:63:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""},"value":"ERC721: approve caller is not token owner or approved for all"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""}],"id":3790,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3665:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3665:170:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3803,"nodeType":"ExpressionStatement","src":"3665:170:19"},{"expression":{"arguments":[{"id":3805,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3770,"src":"3855:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3806,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"3859:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3804,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"3846:8:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3846:21:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3808,"nodeType":"ExpressionStatement","src":"3846:21:19"}]},"documentation":{"id":3768,"nodeType":"StructuredDocumentation","src":"3417:46:19","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":3810,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3477:7:19","nodeType":"FunctionDefinition","overrides":{"id":3774,"nodeType":"OverrideSpecifier","overrides":[],"src":"3529:8:19"},"parameters":{"id":3773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3770,"mutability":"mutable","name":"to","nameLocation":"3493:2:19","nodeType":"VariableDeclaration","scope":3810,"src":"3485:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3769,"name":"address","nodeType":"ElementaryTypeName","src":"3485:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3772,"mutability":"mutable","name":"tokenId","nameLocation":"3505:7:19","nodeType":"VariableDeclaration","scope":3810,"src":"3497:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3771,"name":"uint256","nodeType":"ElementaryTypeName","src":"3497:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3484:29:19"},"returnParameters":{"id":3775,"nodeType":"ParameterList","parameters":[],"src":"3538:0:19"},"scope":4498,"src":"3468:406:19","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[4603],"body":{"id":3827,"nodeType":"Block","src":"4020:82:19","statements":[{"expression":{"arguments":[{"id":3820,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3813,"src":"4045:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3819,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4376,"src":"4030:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":3821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4030:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3822,"nodeType":"ExpressionStatement","src":"4030:23:19"},{"expression":{"baseExpression":{"id":3823,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"4071:15:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3825,"indexExpression":{"id":3824,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3813,"src":"4087:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4071:24:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3818,"id":3826,"nodeType":"Return","src":"4064:31:19"}]},"documentation":{"id":3811,"nodeType":"StructuredDocumentation","src":"3880:50:19","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":3828,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3944:11:19","nodeType":"FunctionDefinition","overrides":{"id":3815,"nodeType":"OverrideSpecifier","overrides":[],"src":"3993:8:19"},"parameters":{"id":3814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3813,"mutability":"mutable","name":"tokenId","nameLocation":"3964:7:19","nodeType":"VariableDeclaration","scope":3828,"src":"3956:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3812,"name":"uint256","nodeType":"ElementaryTypeName","src":"3956:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3955:17:19"},"returnParameters":{"id":3818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3817,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3828,"src":"4011:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3816,"name":"address","nodeType":"ElementaryTypeName","src":"4011:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4010:9:19"},"scope":4498,"src":"3935:167:19","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[4595],"body":{"id":3844,"nodeType":"Block","src":"4253:69:19","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3838,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5001,"src":"4282:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4282:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3840,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"4296:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3841,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"4306:8:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3837,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4362,"src":"4263:18:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":3842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4263:52:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3843,"nodeType":"ExpressionStatement","src":"4263:52:19"}]},"documentation":{"id":3829,"nodeType":"StructuredDocumentation","src":"4108:56:19","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":3845,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4178:17:19","nodeType":"FunctionDefinition","overrides":{"id":3835,"nodeType":"OverrideSpecifier","overrides":[],"src":"4244:8:19"},"parameters":{"id":3834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3831,"mutability":"mutable","name":"operator","nameLocation":"4204:8:19","nodeType":"VariableDeclaration","scope":3845,"src":"4196:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3830,"name":"address","nodeType":"ElementaryTypeName","src":"4196:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3833,"mutability":"mutable","name":"approved","nameLocation":"4219:8:19","nodeType":"VariableDeclaration","scope":3845,"src":"4214:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3832,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4195:33:19"},"returnParameters":{"id":3836,"nodeType":"ParameterList","parameters":[],"src":"4253:0:19"},"scope":4498,"src":"4169:153:19","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[4613],"body":{"id":3862,"nodeType":"Block","src":"4491:59:19","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":3856,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3599,"src":"4508:18:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":3858,"indexExpression":{"id":3857,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3848,"src":"4527:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:25:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3860,"indexExpression":{"id":3859,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"4534:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:35:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3855,"id":3861,"nodeType":"Return","src":"4501:42:19"}]},"documentation":{"id":3846,"nodeType":"StructuredDocumentation","src":"4328:55:19","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":3863,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4397:16:19","nodeType":"FunctionDefinition","overrides":{"id":3852,"nodeType":"OverrideSpecifier","overrides":[],"src":"4467:8:19"},"parameters":{"id":3851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3848,"mutability":"mutable","name":"owner","nameLocation":"4422:5:19","nodeType":"VariableDeclaration","scope":3863,"src":"4414:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3847,"name":"address","nodeType":"ElementaryTypeName","src":"4414:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3850,"mutability":"mutable","name":"operator","nameLocation":"4437:8:19","nodeType":"VariableDeclaration","scope":3863,"src":"4429:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3849,"name":"address","nodeType":"ElementaryTypeName","src":"4429:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4413:33:19"},"returnParameters":{"id":3855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3854,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3863,"src":"4485:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3853,"name":"bool","nodeType":"ElementaryTypeName","src":"4485:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4484:6:19"},"scope":4498,"src":"4388:162:19","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[4579],"body":{"id":3889,"nodeType":"Block","src":"4731:207:19","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3876,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5001,"src":"4820:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4820:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3878,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"4834:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3875,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"4801:18:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":3879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4801:41:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":3880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4844:47:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":3874,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4793:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4793:99:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3882,"nodeType":"ExpressionStatement","src":"4793:99:19"},{"expression":{"arguments":[{"id":3884,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3866,"src":"4913:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3885,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"4919:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3886,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"4923:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3883,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4306,"src":"4903:9:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4903:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3888,"nodeType":"ExpressionStatement","src":"4903:28:19"}]},"documentation":{"id":3864,"nodeType":"StructuredDocumentation","src":"4556:51:19","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":3890,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4621:12:19","nodeType":"FunctionDefinition","overrides":{"id":3872,"nodeType":"OverrideSpecifier","overrides":[],"src":"4722:8:19"},"parameters":{"id":3871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3866,"mutability":"mutable","name":"from","nameLocation":"4651:4:19","nodeType":"VariableDeclaration","scope":3890,"src":"4643:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3865,"name":"address","nodeType":"ElementaryTypeName","src":"4643:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3868,"mutability":"mutable","name":"to","nameLocation":"4673:2:19","nodeType":"VariableDeclaration","scope":3890,"src":"4665:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3867,"name":"address","nodeType":"ElementaryTypeName","src":"4665:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3870,"mutability":"mutable","name":"tokenId","nameLocation":"4693:7:19","nodeType":"VariableDeclaration","scope":3890,"src":"4685:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3869,"name":"uint256","nodeType":"ElementaryTypeName","src":"4685:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4633:73:19"},"returnParameters":{"id":3873,"nodeType":"ParameterList","parameters":[],"src":"4731:0:19"},"scope":4498,"src":"4612:326:19","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[4569],"body":{"id":3908,"nodeType":"Block","src":"5127:56:19","statements":[{"expression":{"arguments":[{"id":3902,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"5154:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3903,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3895,"src":"5160:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3904,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3897,"src":"5164:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":3905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5173:2:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":3901,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[3909,3939],"referencedDeclaration":3939,"src":"5137:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":3906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5137:39:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3907,"nodeType":"ExpressionStatement","src":"5137:39:19"}]},"documentation":{"id":3891,"nodeType":"StructuredDocumentation","src":"4944:55:19","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":3909,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5013:16:19","nodeType":"FunctionDefinition","overrides":{"id":3899,"nodeType":"OverrideSpecifier","overrides":[],"src":"5118:8:19"},"parameters":{"id":3898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3893,"mutability":"mutable","name":"from","nameLocation":"5047:4:19","nodeType":"VariableDeclaration","scope":3909,"src":"5039:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3892,"name":"address","nodeType":"ElementaryTypeName","src":"5039:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3895,"mutability":"mutable","name":"to","nameLocation":"5069:2:19","nodeType":"VariableDeclaration","scope":3909,"src":"5061:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3894,"name":"address","nodeType":"ElementaryTypeName","src":"5061:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3897,"mutability":"mutable","name":"tokenId","nameLocation":"5089:7:19","nodeType":"VariableDeclaration","scope":3909,"src":"5081:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3896,"name":"uint256","nodeType":"ElementaryTypeName","src":"5081:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5029:73:19"},"returnParameters":{"id":3900,"nodeType":"ParameterList","parameters":[],"src":"5127:0:19"},"scope":4498,"src":"5004:179:19","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[4559],"body":{"id":3938,"nodeType":"Block","src":"5399:164:19","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3924,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5001,"src":"5436:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5436:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3926,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"5450:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3923,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"5417:18:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":3927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5417:41:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":3928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5460:47:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":3922,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5409:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5409:99:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3930,"nodeType":"ExpressionStatement","src":"5409:99:19"},{"expression":{"arguments":[{"id":3932,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3912,"src":"5532:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3933,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"5538:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3934,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"5542:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3935,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3918,"src":"5551:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3931,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3968,"src":"5518:13:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":3936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5518:38:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3937,"nodeType":"ExpressionStatement","src":"5518:38:19"}]},"documentation":{"id":3910,"nodeType":"StructuredDocumentation","src":"5189:55:19","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":3939,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5258:16:19","nodeType":"FunctionDefinition","overrides":{"id":3920,"nodeType":"OverrideSpecifier","overrides":[],"src":"5390:8:19"},"parameters":{"id":3919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3912,"mutability":"mutable","name":"from","nameLocation":"5292:4:19","nodeType":"VariableDeclaration","scope":3939,"src":"5284:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3911,"name":"address","nodeType":"ElementaryTypeName","src":"5284:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3914,"mutability":"mutable","name":"to","nameLocation":"5314:2:19","nodeType":"VariableDeclaration","scope":3939,"src":"5306:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3913,"name":"address","nodeType":"ElementaryTypeName","src":"5306:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3916,"mutability":"mutable","name":"tokenId","nameLocation":"5334:7:19","nodeType":"VariableDeclaration","scope":3939,"src":"5326:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3915,"name":"uint256","nodeType":"ElementaryTypeName","src":"5326:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3918,"mutability":"mutable","name":"data","nameLocation":"5364:4:19","nodeType":"VariableDeclaration","scope":3939,"src":"5351:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3917,"name":"bytes","nodeType":"ElementaryTypeName","src":"5351:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5274:100:19"},"returnParameters":{"id":3921,"nodeType":"ParameterList","parameters":[],"src":"5399:0:19"},"scope":4498,"src":"5249:314:19","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":3967,"nodeType":"Block","src":"6564:165:19","statements":[{"expression":{"arguments":[{"id":3952,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3942,"src":"6584:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3953,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3944,"src":"6590:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3954,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3946,"src":"6594:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3951,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4306,"src":"6574:9:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6574:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3956,"nodeType":"ExpressionStatement","src":"6574:28:19"},{"expression":{"arguments":[{"arguments":[{"id":3959,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3942,"src":"6643:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3960,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3944,"src":"6649:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3961,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3946,"src":"6653:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3962,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3948,"src":"6662:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3958,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4438,"src":"6620:22:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":3963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6620:47:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":3964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6669:52:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":3957,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6612:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6612:110:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3966,"nodeType":"ExpressionStatement","src":"6612:110:19"}]},"documentation":{"id":3940,"nodeType":"StructuredDocumentation","src":"5569:850:19","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":3968,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"6433:13:19","nodeType":"FunctionDefinition","parameters":{"id":3949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3942,"mutability":"mutable","name":"from","nameLocation":"6464:4:19","nodeType":"VariableDeclaration","scope":3968,"src":"6456:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3941,"name":"address","nodeType":"ElementaryTypeName","src":"6456:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3944,"mutability":"mutable","name":"to","nameLocation":"6486:2:19","nodeType":"VariableDeclaration","scope":3968,"src":"6478:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3943,"name":"address","nodeType":"ElementaryTypeName","src":"6478:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3946,"mutability":"mutable","name":"tokenId","nameLocation":"6506:7:19","nodeType":"VariableDeclaration","scope":3968,"src":"6498:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3945,"name":"uint256","nodeType":"ElementaryTypeName","src":"6498:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3948,"mutability":"mutable","name":"data","nameLocation":"6536:4:19","nodeType":"VariableDeclaration","scope":3968,"src":"6523:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3947,"name":"bytes","nodeType":"ElementaryTypeName","src":"6523:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6446:100:19"},"returnParameters":{"id":3950,"nodeType":"ParameterList","parameters":[],"src":"6564:0:19"},"scope":4498,"src":"6424:305:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3980,"nodeType":"Block","src":"6913:40:19","statements":[{"expression":{"baseExpression":{"id":3976,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3585,"src":"6930:7:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3978,"indexExpression":{"id":3977,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3971,"src":"6938:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6930:16:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3975,"id":3979,"nodeType":"Return","src":"6923:23:19"}]},"documentation":{"id":3969,"nodeType":"StructuredDocumentation","src":"6735:98:19","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"},"id":3981,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"6847:8:19","nodeType":"FunctionDefinition","parameters":{"id":3972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3971,"mutability":"mutable","name":"tokenId","nameLocation":"6864:7:19","nodeType":"VariableDeclaration","scope":3981,"src":"6856:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3970,"name":"uint256","nodeType":"ElementaryTypeName","src":"6856:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6855:17:19"},"returnParameters":{"id":3975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3974,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3981,"src":"6904:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3973,"name":"address","nodeType":"ElementaryTypeName","src":"6904:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6903:9:19"},"scope":4498,"src":"6838:115:19","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3998,"nodeType":"Block","src":"7327:55:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3990,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3984,"src":"7353:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3989,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"7344:8:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:17:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7373:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3993,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7365:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3992,"name":"address","nodeType":"ElementaryTypeName","src":"7365:7:19","typeDescriptions":{}}},"id":3995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7365:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7344:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3988,"id":3997,"nodeType":"Return","src":"7337:38:19"}]},"documentation":{"id":3982,"nodeType":"StructuredDocumentation","src":"6959:292:19","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."},"id":3999,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"7265:7:19","nodeType":"FunctionDefinition","parameters":{"id":3985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3984,"mutability":"mutable","name":"tokenId","nameLocation":"7281:7:19","nodeType":"VariableDeclaration","scope":3999,"src":"7273:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3983,"name":"uint256","nodeType":"ElementaryTypeName","src":"7273:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7272:17:19"},"returnParameters":{"id":3988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3987,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3999,"src":"7321:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3986,"name":"bool","nodeType":"ElementaryTypeName","src":"7321:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7320:6:19"},"scope":4498,"src":"7256:126:19","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4032,"nodeType":"Block","src":"7639:162:19","statements":[{"assignments":[4010],"declarations":[{"constant":false,"id":4010,"mutability":"mutable","name":"owner","nameLocation":"7657:5:19","nodeType":"VariableDeclaration","scope":4032,"src":"7649:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4009,"name":"address","nodeType":"ElementaryTypeName","src":"7649:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4015,"initialValue":{"arguments":[{"id":4013,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4004,"src":"7680:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4011,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4498,"src":"7665:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$4498_$","typeString":"type(contract ERC721)"}},"id":4012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7672:7:19","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":3699,"src":"7665:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":4014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7665:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7649:39:19"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4016,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4002,"src":"7706:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4017,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4010,"src":"7717:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7706:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":4020,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4010,"src":"7743:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4021,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4002,"src":"7750:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4019,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3863,"src":"7726:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":4022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7726:32:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:52:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4025,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4004,"src":"7774:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4024,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"7762:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":4026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7762:20:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4027,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4002,"src":"7786:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7762:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:87:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4030,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7705:89:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4008,"id":4031,"nodeType":"Return","src":"7698:96:19"}]},"documentation":{"id":4000,"nodeType":"StructuredDocumentation","src":"7388:147:19","text":" @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":4033,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"7549:18:19","nodeType":"FunctionDefinition","parameters":{"id":4005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4002,"mutability":"mutable","name":"spender","nameLocation":"7576:7:19","nodeType":"VariableDeclaration","scope":4033,"src":"7568:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4001,"name":"address","nodeType":"ElementaryTypeName","src":"7568:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4004,"mutability":"mutable","name":"tokenId","nameLocation":"7593:7:19","nodeType":"VariableDeclaration","scope":4033,"src":"7585:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4003,"name":"uint256","nodeType":"ElementaryTypeName","src":"7585:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7567:34:19"},"returnParameters":{"id":4008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4007,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4033,"src":"7633:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4006,"name":"bool","nodeType":"ElementaryTypeName","src":"7633:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7632:6:19"},"scope":4498,"src":"7540:261:19","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4047,"nodeType":"Block","src":"8196:43:19","statements":[{"expression":{"arguments":[{"id":4042,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4036,"src":"8216:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4043,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4038,"src":"8220:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":4044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8229:2:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":4041,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[4048,4077],"referencedDeclaration":4077,"src":"8206:9:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":4045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8206:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4046,"nodeType":"ExpressionStatement","src":"8206:26:19"}]},"documentation":{"id":4034,"nodeType":"StructuredDocumentation","src":"7807:319:19","text":" @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":4048,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8140:9:19","nodeType":"FunctionDefinition","parameters":{"id":4039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4036,"mutability":"mutable","name":"to","nameLocation":"8158:2:19","nodeType":"VariableDeclaration","scope":4048,"src":"8150:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4035,"name":"address","nodeType":"ElementaryTypeName","src":"8150:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4038,"mutability":"mutable","name":"tokenId","nameLocation":"8170:7:19","nodeType":"VariableDeclaration","scope":4048,"src":"8162:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4037,"name":"uint256","nodeType":"ElementaryTypeName","src":"8162:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8149:29:19"},"returnParameters":{"id":4040,"nodeType":"ParameterList","parameters":[],"src":"8196:0:19"},"scope":4498,"src":"8131:108:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4076,"nodeType":"Block","src":"8574:195:19","statements":[{"expression":{"arguments":[{"id":4059,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4051,"src":"8590:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4060,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4053,"src":"8594:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4058,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4154,"src":"8584:5:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8584:18:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4062,"nodeType":"ExpressionStatement","src":"8584:18:19"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":4067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8664:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4066,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8656:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4065,"name":"address","nodeType":"ElementaryTypeName","src":"8656:7:19","typeDescriptions":{}}},"id":4068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8656:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4069,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4051,"src":"8668:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4070,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4053,"src":"8672:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4071,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4055,"src":"8681:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4064,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4438,"src":"8633:22:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":4072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8633:53:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":4073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8700:52:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":4063,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8612:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8612:150:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4075,"nodeType":"ExpressionStatement","src":"8612:150:19"}]},"documentation":{"id":4049,"nodeType":"StructuredDocumentation","src":"8245:210:19","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":4077,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8469:9:19","nodeType":"FunctionDefinition","parameters":{"id":4056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4051,"mutability":"mutable","name":"to","nameLocation":"8496:2:19","nodeType":"VariableDeclaration","scope":4077,"src":"8488:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4050,"name":"address","nodeType":"ElementaryTypeName","src":"8488:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4053,"mutability":"mutable","name":"tokenId","nameLocation":"8516:7:19","nodeType":"VariableDeclaration","scope":4077,"src":"8508:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4052,"name":"uint256","nodeType":"ElementaryTypeName","src":"8508:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4055,"mutability":"mutable","name":"data","nameLocation":"8546:4:19","nodeType":"VariableDeclaration","scope":4077,"src":"8533:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4054,"name":"bytes","nodeType":"ElementaryTypeName","src":"8533:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8478:78:19"},"returnParameters":{"id":4057,"nodeType":"ParameterList","parameters":[],"src":"8574:0:19"},"scope":4498,"src":"8460:309:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4153,"nodeType":"Block","src":"9152:859:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4086,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"9170:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9184:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4088,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9176:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4087,"name":"address","nodeType":"ElementaryTypeName","src":"9176:7:19","typeDescriptions":{}}},"id":4090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9176:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9170:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":4092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9188:34:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":4085,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9162:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9162:61:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4094,"nodeType":"ExpressionStatement","src":"9162:61:19"},{"expression":{"arguments":[{"id":4099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9241:17:19","subExpression":{"arguments":[{"id":4097,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"9250:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4096,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3999,"src":"9242:7:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":4098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9242:16:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":4100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9260:30:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":4095,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9233:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9233:58:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4102,"nodeType":"ExpressionStatement","src":"9233:58:19"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":4106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9331:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4105,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9323:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4104,"name":"address","nodeType":"ElementaryTypeName","src":"9323:7:19","typeDescriptions":{}}},"id":4107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9323:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4108,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"9335:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4109,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"9339:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":4110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9348:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":4103,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"9302:20:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":4111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9302:48:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4112,"nodeType":"ExpressionStatement","src":"9302:48:19"},{"expression":{"arguments":[{"id":4117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9445:17:19","subExpression":{"arguments":[{"id":4115,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"9454:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4114,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3999,"src":"9446:7:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":4116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9446:16:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":4118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9464:30:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":4113,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9437:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9437:58:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4120,"nodeType":"ExpressionStatement","src":"9437:58:19"},{"id":4127,"nodeType":"UncheckedBlock","src":"9506:360:19","statements":[{"expression":{"id":4125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4121,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"9837:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4123,"indexExpression":{"id":4122,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"9847:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9837:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9854:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9837:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4126,"nodeType":"ExpressionStatement","src":"9837:18:19"}]},{"expression":{"id":4132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4128,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3585,"src":"9876:7:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":4130,"indexExpression":{"id":4129,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"9884:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9876:16:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4131,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"9895:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9876:21:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4133,"nodeType":"ExpressionStatement","src":"9876:21:19"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":4137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9930:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9922:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4135,"name":"address","nodeType":"ElementaryTypeName","src":"9922:7:19","typeDescriptions":{}}},"id":4138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9922:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4139,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"9934:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4140,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"9938:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4134,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4513,"src":"9913:8:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9913:33:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4142,"nodeType":"EmitStatement","src":"9908:38:19"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":4146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9985:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9977:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4144,"name":"address","nodeType":"ElementaryTypeName","src":"9977:7:19","typeDescriptions":{}}},"id":4147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9977:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4148,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"9989:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4149,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"9993:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":4150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":4143,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4497,"src":"9957:19:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":4151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9957:47:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4152,"nodeType":"ExpressionStatement","src":"9957:47:19"}]},"documentation":{"id":4078,"nodeType":"StructuredDocumentation","src":"8775:311:19","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":4154,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9100:5:19","nodeType":"FunctionDefinition","parameters":{"id":4083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4080,"mutability":"mutable","name":"to","nameLocation":"9114:2:19","nodeType":"VariableDeclaration","scope":4154,"src":"9106:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4079,"name":"address","nodeType":"ElementaryTypeName","src":"9106:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4082,"mutability":"mutable","name":"tokenId","nameLocation":"9126:7:19","nodeType":"VariableDeclaration","scope":4154,"src":"9118:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4081,"name":"uint256","nodeType":"ElementaryTypeName","src":"9118:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9105:29:19"},"returnParameters":{"id":4084,"nodeType":"ParameterList","parameters":[],"src":"9152:0:19"},"scope":4498,"src":"9091:920:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4220,"nodeType":"Block","src":"10386:713:19","statements":[{"assignments":[4161],"declarations":[{"constant":false,"id":4161,"mutability":"mutable","name":"owner","nameLocation":"10404:5:19","nodeType":"VariableDeclaration","scope":4220,"src":"10396:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4160,"name":"address","nodeType":"ElementaryTypeName","src":"10396:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4166,"initialValue":{"arguments":[{"id":4164,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4157,"src":"10427:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4162,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4498,"src":"10412:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$4498_$","typeString":"type(contract ERC721)"}},"id":4163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10419:7:19","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":3699,"src":"10412:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":4165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10412:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10396:39:19"},{"expression":{"arguments":[{"id":4168,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4161,"src":"10467:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10482:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4170,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10474:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4169,"name":"address","nodeType":"ElementaryTypeName","src":"10474:7:19","typeDescriptions":{}}},"id":4172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10474:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4173,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4157,"src":"10486:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":4174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10495:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":4167,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"10446:20:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":4175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10446:51:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4176,"nodeType":"ExpressionStatement","src":"10446:51:19"},{"expression":{"id":4182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4177,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4161,"src":"10599:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4180,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4157,"src":"10622:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4178,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4498,"src":"10607:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$4498_$","typeString":"type(contract ERC721)"}},"id":4179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10614:7:19","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":3699,"src":"10607:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":4181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10607:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10599:31:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4183,"nodeType":"ExpressionStatement","src":"10599:31:19"},{"expression":{"id":4187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10668:31:19","subExpression":{"baseExpression":{"id":4184,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"10675:15:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":4186,"indexExpression":{"id":4185,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4157,"src":"10691:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10675:24:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4188,"nodeType":"ExpressionStatement","src":"10668:31:19"},{"id":4195,"nodeType":"UncheckedBlock","src":"10710:237:19","statements":[{"expression":{"id":4193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4189,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"10915:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4191,"indexExpression":{"id":4190,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4161,"src":"10925:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10915:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":4192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10935:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10915:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4194,"nodeType":"ExpressionStatement","src":"10915:21:19"}]},{"expression":{"id":4199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10956:23:19","subExpression":{"baseExpression":{"id":4196,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3585,"src":"10963:7:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":4198,"indexExpression":{"id":4197,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4157,"src":"10971:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10963:16:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4200,"nodeType":"ExpressionStatement","src":"10956:23:19"},{"eventCall":{"arguments":[{"id":4202,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4161,"src":"11004:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11019:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4204,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11011:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4203,"name":"address","nodeType":"ElementaryTypeName","src":"11011:7:19","typeDescriptions":{}}},"id":4206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11011:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4207,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4157,"src":"11023:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4201,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4513,"src":"10995:8:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10995:36:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4209,"nodeType":"EmitStatement","src":"10990:41:19"},{"expression":{"arguments":[{"id":4211,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4161,"src":"11062:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11077:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4213,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11069:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4212,"name":"address","nodeType":"ElementaryTypeName","src":"11069:7:19","typeDescriptions":{}}},"id":4215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11069:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4216,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4157,"src":"11081:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":4217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11090:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":4210,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4497,"src":"11042:19:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":4218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11042:50:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4219,"nodeType":"ExpressionStatement","src":"11042:50:19"}]},"documentation":{"id":4155,"nodeType":"StructuredDocumentation","src":"10017:315:19","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":4221,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10346:5:19","nodeType":"FunctionDefinition","parameters":{"id":4158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4157,"mutability":"mutable","name":"tokenId","nameLocation":"10360:7:19","nodeType":"VariableDeclaration","scope":4221,"src":"10352:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4156,"name":"uint256","nodeType":"ElementaryTypeName","src":"10352:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10351:17:19"},"returnParameters":{"id":4159,"nodeType":"ParameterList","parameters":[],"src":"10386:0:19"},"scope":4498,"src":"10337:762:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4305,"nodeType":"Block","src":"11532:1124:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4234,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4228,"src":"11565:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4232,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4498,"src":"11550:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$4498_$","typeString":"type(contract ERC721)"}},"id":4233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11557:7:19","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":3699,"src":"11550:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":4235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11550:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4236,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"11577:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11550:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":4238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11583:39:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":4231,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11542:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11542:81:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4240,"nodeType":"ExpressionStatement","src":"11542:81:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4242,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4226,"src":"11641:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11655:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11647:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4243,"name":"address","nodeType":"ElementaryTypeName","src":"11647:7:19","typeDescriptions":{}}},"id":4246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11647:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11641:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373","id":4248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11659:38:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""},"value":"ERC721: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""}],"id":4241,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11633:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11633:65:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4250,"nodeType":"ExpressionStatement","src":"11633:65:19"},{"expression":{"arguments":[{"id":4252,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"11730:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4253,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4226,"src":"11736:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4254,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4228,"src":"11740:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":4255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11749:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":4251,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"11709:20:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":4256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11709:42:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4257,"nodeType":"ExpressionStatement","src":"11709:42:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4261,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4228,"src":"11866:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4259,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4498,"src":"11851:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$4498_$","typeString":"type(contract ERC721)"}},"id":4260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11858:7:19","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":3699,"src":"11851:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":4262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11851:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4263,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"11878:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11851:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":4265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11884:39:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":4258,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11843:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11843:81:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4267,"nodeType":"ExpressionStatement","src":"11843:81:19"},{"expression":{"id":4271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"11986:31:19","subExpression":{"baseExpression":{"id":4268,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"11993:15:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":4270,"indexExpression":{"id":4269,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4228,"src":"12009:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11993:24:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4272,"nodeType":"ExpressionStatement","src":"11986:31:19"},{"id":4285,"nodeType":"UncheckedBlock","src":"12028:496:19","statements":[{"expression":{"id":4277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4273,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"12461:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4275,"indexExpression":{"id":4274,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"12471:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12461:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":4276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12480:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12461:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4278,"nodeType":"ExpressionStatement","src":"12461:20:19"},{"expression":{"id":4283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4279,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"12495:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4281,"indexExpression":{"id":4280,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4226,"src":"12505:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12495:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12512:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12495:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4284,"nodeType":"ExpressionStatement","src":"12495:18:19"}]},{"expression":{"id":4290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4286,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3585,"src":"12533:7:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":4288,"indexExpression":{"id":4287,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4228,"src":"12541:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12533:16:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4289,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4226,"src":"12552:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12533:21:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4291,"nodeType":"ExpressionStatement","src":"12533:21:19"},{"eventCall":{"arguments":[{"id":4293,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"12579:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4294,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4226,"src":"12585:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4295,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4228,"src":"12589:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4292,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4513,"src":"12570:8:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12570:27:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4297,"nodeType":"EmitStatement","src":"12565:32:19"},{"expression":{"arguments":[{"id":4299,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"12628:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4300,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4226,"src":"12634:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4301,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4228,"src":"12638:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":4302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12647:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":4298,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4497,"src":"12608:19:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":4303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12608:41:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4304,"nodeType":"ExpressionStatement","src":"12608:41:19"}]},"documentation":{"id":4222,"nodeType":"StructuredDocumentation","src":"11105:313:19","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":4306,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"11432:9:19","nodeType":"FunctionDefinition","parameters":{"id":4229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4224,"mutability":"mutable","name":"from","nameLocation":"11459:4:19","nodeType":"VariableDeclaration","scope":4306,"src":"11451:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4223,"name":"address","nodeType":"ElementaryTypeName","src":"11451:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4226,"mutability":"mutable","name":"to","nameLocation":"11481:2:19","nodeType":"VariableDeclaration","scope":4306,"src":"11473:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4225,"name":"address","nodeType":"ElementaryTypeName","src":"11473:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4228,"mutability":"mutable","name":"tokenId","nameLocation":"11501:7:19","nodeType":"VariableDeclaration","scope":4306,"src":"11493:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4227,"name":"uint256","nodeType":"ElementaryTypeName","src":"11493:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11441:73:19"},"returnParameters":{"id":4230,"nodeType":"ParameterList","parameters":[],"src":"11532:0:19"},"scope":4498,"src":"11423:1233:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4329,"nodeType":"Block","src":"12832:107:19","statements":[{"expression":{"id":4318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4314,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"12842:15:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":4316,"indexExpression":{"id":4315,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4311,"src":"12858:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12842:24:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4317,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4309,"src":"12869:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12842:29:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4319,"nodeType":"ExpressionStatement","src":"12842:29:19"},{"eventCall":{"arguments":[{"arguments":[{"id":4323,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4311,"src":"12910:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4321,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4498,"src":"12895:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$4498_$","typeString":"type(contract ERC721)"}},"id":4322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12902:7:19","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":3699,"src":"12895:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":4324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12895:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4325,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4309,"src":"12920:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4326,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4311,"src":"12924:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4320,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4522,"src":"12886:8:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12886:46:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4328,"nodeType":"EmitStatement","src":"12881:51:19"}]},"documentation":{"id":4307,"nodeType":"StructuredDocumentation","src":"12662:101:19","text":" @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."},"id":4330,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"12777:8:19","nodeType":"FunctionDefinition","parameters":{"id":4312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4309,"mutability":"mutable","name":"to","nameLocation":"12794:2:19","nodeType":"VariableDeclaration","scope":4330,"src":"12786:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4308,"name":"address","nodeType":"ElementaryTypeName","src":"12786:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4311,"mutability":"mutable","name":"tokenId","nameLocation":"12806:7:19","nodeType":"VariableDeclaration","scope":4330,"src":"12798:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4310,"name":"uint256","nodeType":"ElementaryTypeName","src":"12798:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12785:29:19"},"returnParameters":{"id":4313,"nodeType":"ParameterList","parameters":[],"src":"12832:0:19"},"scope":4498,"src":"12768:171:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4361,"nodeType":"Block","src":"13198:184:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4341,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4333,"src":"13216:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4342,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4335,"src":"13225:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13216:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","id":4344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13235:27:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""},"value":"ERC721: approve to caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""}],"id":4340,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13208:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13208:55:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4346,"nodeType":"ExpressionStatement","src":"13208:55:19"},{"expression":{"id":4353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4347,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3599,"src":"13273:18:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":4350,"indexExpression":{"id":4348,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4333,"src":"13292:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13273:25:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4351,"indexExpression":{"id":4349,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4335,"src":"13299:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13273:35:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4352,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4337,"src":"13311:8:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13273:46:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4354,"nodeType":"ExpressionStatement","src":"13273:46:19"},{"eventCall":{"arguments":[{"id":4356,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4333,"src":"13349:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4357,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4335,"src":"13356:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4358,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4337,"src":"13366:8:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4355,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"13334:14:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":4359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13334:41:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4360,"nodeType":"EmitStatement","src":"13329:46:19"}]},"documentation":{"id":4331,"nodeType":"StructuredDocumentation","src":"12945:125:19","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":4362,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"13084:18:19","nodeType":"FunctionDefinition","parameters":{"id":4338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4333,"mutability":"mutable","name":"owner","nameLocation":"13120:5:19","nodeType":"VariableDeclaration","scope":4362,"src":"13112:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4332,"name":"address","nodeType":"ElementaryTypeName","src":"13112:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4335,"mutability":"mutable","name":"operator","nameLocation":"13143:8:19","nodeType":"VariableDeclaration","scope":4362,"src":"13135:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4334,"name":"address","nodeType":"ElementaryTypeName","src":"13135:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4337,"mutability":"mutable","name":"approved","nameLocation":"13166:8:19","nodeType":"VariableDeclaration","scope":4362,"src":"13161:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4336,"name":"bool","nodeType":"ElementaryTypeName","src":"13161:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13102:78:19"},"returnParameters":{"id":4339,"nodeType":"ParameterList","parameters":[],"src":"13198:0:19"},"scope":4498,"src":"13075:307:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4375,"nodeType":"Block","src":"13529:70:19","statements":[{"expression":{"arguments":[{"arguments":[{"id":4370,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"13555:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4369,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3999,"src":"13547:7:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":4371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13547:16:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":4372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13565:26:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":4368,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13539:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13539:53:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4374,"nodeType":"ExpressionStatement","src":"13539:53:19"}]},"documentation":{"id":4363,"nodeType":"StructuredDocumentation","src":"13388:73:19","text":" @dev Reverts if the `tokenId` has not been minted yet."},"id":4376,"implemented":true,"kind":"function","modifiers":[],"name":"_requireMinted","nameLocation":"13475:14:19","nodeType":"FunctionDefinition","parameters":{"id":4366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4365,"mutability":"mutable","name":"tokenId","nameLocation":"13498:7:19","nodeType":"VariableDeclaration","scope":4376,"src":"13490:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4364,"name":"uint256","nodeType":"ElementaryTypeName","src":"13490:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13489:17:19"},"returnParameters":{"id":4367,"nodeType":"ParameterList","parameters":[],"src":"13529:0:19"},"scope":4498,"src":"13466:133:19","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4437,"nodeType":"Block","src":"14306:676:19","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4390,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4381,"src":"14320:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14323:10:19","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":4677,"src":"14320:13:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":4392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14320:15:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4435,"nodeType":"Block","src":"14940:36:19","statements":[{"expression":{"hexValue":"74727565","id":4433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14961:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4389,"id":4434,"nodeType":"Return","src":"14954:11:19"}]},"id":4436,"nodeType":"IfStatement","src":"14316:660:19","trueBody":{"id":4432,"nodeType":"Block","src":"14337:597:19","statements":[{"clauses":[{"block":{"id":4412,"nodeType":"Block","src":"14451:91:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4406,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"14476:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":4407,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4632,"src":"14486:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$4632_$","typeString":"type(contract IERC721Receiver)"}},"id":4408,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14502:16:19","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":4631,"src":"14486:32:19","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":4409,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14519:8:19","memberName":"selector","nodeType":"MemberAccess","src":"14486:41:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"14476:51:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4389,"id":4411,"nodeType":"Return","src":"14469:58:19"}]},"errorName":"","id":4413,"nodeType":"TryCatchClause","parameters":{"id":4405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4404,"mutability":"mutable","name":"retval","nameLocation":"14443:6:19","nodeType":"VariableDeclaration","scope":4413,"src":"14436:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4403,"name":"bytes4","nodeType":"ElementaryTypeName","src":"14436:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"14435:15:19"},"src":"14427:115:19"},{"block":{"id":4429,"nodeType":"Block","src":"14571:353:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4417,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4415,"src":"14593:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14600:6:19","memberName":"length","nodeType":"MemberAccess","src":"14593:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14610:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14593:18:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4427,"nodeType":"Block","src":"14720:190:19","statements":[{"AST":{"nodeType":"YulBlock","src":"14806:86:19","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14843:2:19","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"14847:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14839:3:19"},"nodeType":"YulFunctionCall","src":"14839:15:19"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"14862:6:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14856:5:19"},"nodeType":"YulFunctionCall","src":"14856:13:19"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14832:6:19"},"nodeType":"YulFunctionCall","src":"14832:38:19"},"nodeType":"YulExpressionStatement","src":"14832:38:19"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":4415,"isOffset":false,"isSlot":false,"src":"14847:6:19","valueSize":1},{"declaration":4415,"isOffset":false,"isSlot":false,"src":"14862:6:19","valueSize":1}],"id":4426,"nodeType":"InlineAssembly","src":"14797:95:19"}]},"id":4428,"nodeType":"IfStatement","src":"14589:321:19","trueBody":{"id":4425,"nodeType":"Block","src":"14613:101:19","statements":[{"expression":{"arguments":[{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":4422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14642:52:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":4421,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"14635:6:19","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":4423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14635:60:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4424,"nodeType":"ExpressionStatement","src":"14635:60:19"}]}}]},"errorName":"","id":4430,"nodeType":"TryCatchClause","parameters":{"id":4416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4415,"mutability":"mutable","name":"reason","nameLocation":"14563:6:19","nodeType":"VariableDeclaration","scope":4430,"src":"14550:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4414,"name":"bytes","nodeType":"ElementaryTypeName","src":"14550:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14549:21:19"},"src":"14543:381:19"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4397,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5001,"src":"14392:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14392:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4399,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4379,"src":"14406:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4400,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4383,"src":"14412:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4401,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4385,"src":"14421:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":4394,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4381,"src":"14371:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4393,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4632,"src":"14355:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$4632_$","typeString":"type(contract IERC721Receiver)"}},"id":4395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14355:19:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$4632","typeString":"contract IERC721Receiver"}},"id":4396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14375:16:19","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":4631,"src":"14355:36:19","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":4402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14355:71:19","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":4431,"nodeType":"TryStatement","src":"14351:573:19"}]}}]},"documentation":{"id":4377,"nodeType":"StructuredDocumentation","src":"13605:541:19","text":" @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"},"id":4438,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"14160:22:19","nodeType":"FunctionDefinition","parameters":{"id":4386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4379,"mutability":"mutable","name":"from","nameLocation":"14200:4:19","nodeType":"VariableDeclaration","scope":4438,"src":"14192:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4378,"name":"address","nodeType":"ElementaryTypeName","src":"14192:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4381,"mutability":"mutable","name":"to","nameLocation":"14222:2:19","nodeType":"VariableDeclaration","scope":4438,"src":"14214:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4380,"name":"address","nodeType":"ElementaryTypeName","src":"14214:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4383,"mutability":"mutable","name":"tokenId","nameLocation":"14242:7:19","nodeType":"VariableDeclaration","scope":4438,"src":"14234:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4382,"name":"uint256","nodeType":"ElementaryTypeName","src":"14234:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4385,"mutability":"mutable","name":"data","nameLocation":"14272:4:19","nodeType":"VariableDeclaration","scope":4438,"src":"14259:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4384,"name":"bytes","nodeType":"ElementaryTypeName","src":"14259:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14182:100:19"},"returnParameters":{"id":4389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4388,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4438,"src":"14300:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4387,"name":"bool","nodeType":"ElementaryTypeName","src":"14300:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14299:6:19"},"scope":4498,"src":"14151:831:19","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4483,"nodeType":"Block","src":"15856:238:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4450,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4447,"src":"15870:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":4451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15882:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15870:13:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4482,"nodeType":"IfStatement","src":"15866:222:19","trueBody":{"id":4481,"nodeType":"Block","src":"15885:203:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4453,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4441,"src":"15903:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15919:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4455,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15911:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4454,"name":"address","nodeType":"ElementaryTypeName","src":"15911:7:19","typeDescriptions":{}}},"id":4457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15911:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15903:18:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4466,"nodeType":"IfStatement","src":"15899:85:19","trueBody":{"id":4465,"nodeType":"Block","src":"15923:61:19","statements":[{"expression":{"id":4463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4459,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"15941:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4461,"indexExpression":{"id":4460,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4441,"src":"15951:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15941:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4462,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4447,"src":"15960:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15941:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4464,"nodeType":"ExpressionStatement","src":"15941:28:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4467,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4443,"src":"16001:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16015:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4469,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16007:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4468,"name":"address","nodeType":"ElementaryTypeName","src":"16007:7:19","typeDescriptions":{}}},"id":4471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16007:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16001:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4480,"nodeType":"IfStatement","src":"15997:81:19","trueBody":{"id":4479,"nodeType":"Block","src":"16019:59:19","statements":[{"expression":{"id":4477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4473,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"16037:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4475,"indexExpression":{"id":4474,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4443,"src":"16047:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16037:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4476,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4447,"src":"16054:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16037:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4478,"nodeType":"ExpressionStatement","src":"16037:26:19"}]}}]}}]},"documentation":{"id":4439,"nodeType":"StructuredDocumentation","src":"14988:705:19","text":" @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n - When `from` is zero, the tokens will be minted for `to`.\n - When `to` is zero, ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":4484,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"15707:20:19","nodeType":"FunctionDefinition","parameters":{"id":4448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4441,"mutability":"mutable","name":"from","nameLocation":"15745:4:19","nodeType":"VariableDeclaration","scope":4484,"src":"15737:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4440,"name":"address","nodeType":"ElementaryTypeName","src":"15737:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4443,"mutability":"mutable","name":"to","nameLocation":"15767:2:19","nodeType":"VariableDeclaration","scope":4484,"src":"15759:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4442,"name":"address","nodeType":"ElementaryTypeName","src":"15759:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4445,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4484,"src":"15779:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4444,"name":"uint256","nodeType":"ElementaryTypeName","src":"15779:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4447,"mutability":"mutable","name":"batchSize","nameLocation":"15823:9:19","nodeType":"VariableDeclaration","scope":4484,"src":"15815:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4446,"name":"uint256","nodeType":"ElementaryTypeName","src":"15815:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15727:111:19"},"returnParameters":{"id":4449,"nodeType":"ParameterList","parameters":[],"src":"15856:0:19"},"scope":4498,"src":"15698:396:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4496,"nodeType":"Block","src":"16951:2:19","statements":[]},"documentation":{"id":4485,"nodeType":"StructuredDocumentation","src":"16100:695:19","text":" @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n - When `from` is zero, the tokens were minted for `to`.\n - When `to` is zero, ``from``'s tokens were burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":4497,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"16809:19:19","nodeType":"FunctionDefinition","parameters":{"id":4494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4487,"mutability":"mutable","name":"from","nameLocation":"16846:4:19","nodeType":"VariableDeclaration","scope":4497,"src":"16838:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4486,"name":"address","nodeType":"ElementaryTypeName","src":"16838:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4489,"mutability":"mutable","name":"to","nameLocation":"16868:2:19","nodeType":"VariableDeclaration","scope":4497,"src":"16860:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4488,"name":"address","nodeType":"ElementaryTypeName","src":"16860:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4491,"mutability":"mutable","name":"firstTokenId","nameLocation":"16888:12:19","nodeType":"VariableDeclaration","scope":4497,"src":"16880:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4490,"name":"uint256","nodeType":"ElementaryTypeName","src":"16880:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4493,"mutability":"mutable","name":"batchSize","nameLocation":"16918:9:19","nodeType":"VariableDeclaration","scope":4497,"src":"16910:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4492,"name":"uint256","nodeType":"ElementaryTypeName","src":"16910:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16828:105:19"},"returnParameters":{"id":4495,"nodeType":"ParameterList","parameters":[],"src":"16951:0:19"},"scope":4498,"src":"16800:153:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":4499,"src":"628:16327:19","usedErrors":[]}],"src":"107:16849:19"},"id":19},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[5296],"IERC721":[4614]},"id":4615,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4500,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:20"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":4501,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4615,"sourceUnit":5297,"src":"133:47:20","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4503,"name":"IERC165","nameLocations":["271:7:20"],"nodeType":"IdentifierPath","referencedDeclaration":5296,"src":"271:7:20"},"id":4504,"nodeType":"InheritanceSpecifier","src":"271:7:20"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":4502,"nodeType":"StructuredDocumentation","src":"182:67:20","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":4614,"linearizedBaseContracts":[4614,5296],"name":"IERC721","nameLocation":"260:7:20","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":4505,"nodeType":"StructuredDocumentation","src":"285:88:20","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":4513,"name":"Transfer","nameLocation":"384:8:20","nodeType":"EventDefinition","parameters":{"id":4512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4507,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"409:4:20","nodeType":"VariableDeclaration","scope":4513,"src":"393:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4506,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4509,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"431:2:20","nodeType":"VariableDeclaration","scope":4513,"src":"415:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4508,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4511,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"451:7:20","nodeType":"VariableDeclaration","scope":4513,"src":"435:23:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4510,"name":"uint256","nodeType":"ElementaryTypeName","src":"435:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"392:67:20"},"src":"378:82:20"},{"anonymous":false,"documentation":{"id":4514,"nodeType":"StructuredDocumentation","src":"466:94:20","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":4522,"name":"Approval","nameLocation":"571:8:20","nodeType":"EventDefinition","parameters":{"id":4521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4516,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"596:5:20","nodeType":"VariableDeclaration","scope":4522,"src":"580:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4515,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4518,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"619:8:20","nodeType":"VariableDeclaration","scope":4522,"src":"603:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4517,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4520,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"645:7:20","nodeType":"VariableDeclaration","scope":4522,"src":"629:23:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4519,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:74:20"},"src":"565:89:20"},{"anonymous":false,"documentation":{"id":4523,"nodeType":"StructuredDocumentation","src":"660:117:20","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":4531,"name":"ApprovalForAll","nameLocation":"788:14:20","nodeType":"EventDefinition","parameters":{"id":4530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4525,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"819:5:20","nodeType":"VariableDeclaration","scope":4531,"src":"803:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4524,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4527,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"842:8:20","nodeType":"VariableDeclaration","scope":4531,"src":"826:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4526,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4529,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"857:8:20","nodeType":"VariableDeclaration","scope":4531,"src":"852:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4528,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"802:64:20"},"src":"782:85:20"},{"documentation":{"id":4532,"nodeType":"StructuredDocumentation","src":"873:76:20","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":4539,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"963:9:20","nodeType":"FunctionDefinition","parameters":{"id":4535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4534,"mutability":"mutable","name":"owner","nameLocation":"981:5:20","nodeType":"VariableDeclaration","scope":4539,"src":"973:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4533,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"972:15:20"},"returnParameters":{"id":4538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4537,"mutability":"mutable","name":"balance","nameLocation":"1019:7:20","nodeType":"VariableDeclaration","scope":4539,"src":"1011:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4536,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:17:20"},"scope":4614,"src":"954:74:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4540,"nodeType":"StructuredDocumentation","src":"1034:131:20","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":4547,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1179:7:20","nodeType":"FunctionDefinition","parameters":{"id":4543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4542,"mutability":"mutable","name":"tokenId","nameLocation":"1195:7:20","nodeType":"VariableDeclaration","scope":4547,"src":"1187:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4541,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:17:20"},"returnParameters":{"id":4546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4545,"mutability":"mutable","name":"owner","nameLocation":"1235:5:20","nodeType":"VariableDeclaration","scope":4547,"src":"1227:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4544,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1226:15:20"},"scope":4614,"src":"1170:72:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4548,"nodeType":"StructuredDocumentation","src":"1248:556:20","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":4559,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1818:16:20","nodeType":"FunctionDefinition","parameters":{"id":4557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4550,"mutability":"mutable","name":"from","nameLocation":"1852:4:20","nodeType":"VariableDeclaration","scope":4559,"src":"1844:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4549,"name":"address","nodeType":"ElementaryTypeName","src":"1844:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4552,"mutability":"mutable","name":"to","nameLocation":"1874:2:20","nodeType":"VariableDeclaration","scope":4559,"src":"1866:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4551,"name":"address","nodeType":"ElementaryTypeName","src":"1866:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4554,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:20","nodeType":"VariableDeclaration","scope":4559,"src":"1886:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4553,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4556,"mutability":"mutable","name":"data","nameLocation":"1926:4:20","nodeType":"VariableDeclaration","scope":4559,"src":"1911:19:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4555,"name":"bytes","nodeType":"ElementaryTypeName","src":"1911:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1834:102:20"},"returnParameters":{"id":4558,"nodeType":"ParameterList","parameters":[],"src":"1945:0:20"},"scope":4614,"src":"1809:137:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4560,"nodeType":"StructuredDocumentation","src":"1952:687:20","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":4569,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2653:16:20","nodeType":"FunctionDefinition","parameters":{"id":4567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4562,"mutability":"mutable","name":"from","nameLocation":"2687:4:20","nodeType":"VariableDeclaration","scope":4569,"src":"2679:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4561,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4564,"mutability":"mutable","name":"to","nameLocation":"2709:2:20","nodeType":"VariableDeclaration","scope":4569,"src":"2701:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4563,"name":"address","nodeType":"ElementaryTypeName","src":"2701:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4566,"mutability":"mutable","name":"tokenId","nameLocation":"2729:7:20","nodeType":"VariableDeclaration","scope":4569,"src":"2721:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4565,"name":"uint256","nodeType":"ElementaryTypeName","src":"2721:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2669:73:20"},"returnParameters":{"id":4568,"nodeType":"ParameterList","parameters":[],"src":"2751:0:20"},"scope":4614,"src":"2644:108:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4570,"nodeType":"StructuredDocumentation","src":"2758:732:20","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":4579,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3504:12:20","nodeType":"FunctionDefinition","parameters":{"id":4577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4572,"mutability":"mutable","name":"from","nameLocation":"3534:4:20","nodeType":"VariableDeclaration","scope":4579,"src":"3526:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4571,"name":"address","nodeType":"ElementaryTypeName","src":"3526:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4574,"mutability":"mutable","name":"to","nameLocation":"3556:2:20","nodeType":"VariableDeclaration","scope":4579,"src":"3548:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4573,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4576,"mutability":"mutable","name":"tokenId","nameLocation":"3576:7:20","nodeType":"VariableDeclaration","scope":4579,"src":"3568:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4575,"name":"uint256","nodeType":"ElementaryTypeName","src":"3568:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3516:73:20"},"returnParameters":{"id":4578,"nodeType":"ParameterList","parameters":[],"src":"3598:0:20"},"scope":4614,"src":"3495:104:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4580,"nodeType":"StructuredDocumentation","src":"3605:452:20","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":4587,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4071:7:20","nodeType":"FunctionDefinition","parameters":{"id":4585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4582,"mutability":"mutable","name":"to","nameLocation":"4087:2:20","nodeType":"VariableDeclaration","scope":4587,"src":"4079:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4581,"name":"address","nodeType":"ElementaryTypeName","src":"4079:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4584,"mutability":"mutable","name":"tokenId","nameLocation":"4099:7:20","nodeType":"VariableDeclaration","scope":4587,"src":"4091:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4583,"name":"uint256","nodeType":"ElementaryTypeName","src":"4091:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4078:29:20"},"returnParameters":{"id":4586,"nodeType":"ParameterList","parameters":[],"src":"4116:0:20"},"scope":4614,"src":"4062:55:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4588,"nodeType":"StructuredDocumentation","src":"4123:309:20","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":4595,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4446:17:20","nodeType":"FunctionDefinition","parameters":{"id":4593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4590,"mutability":"mutable","name":"operator","nameLocation":"4472:8:20","nodeType":"VariableDeclaration","scope":4595,"src":"4464:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4589,"name":"address","nodeType":"ElementaryTypeName","src":"4464:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4592,"mutability":"mutable","name":"_approved","nameLocation":"4487:9:20","nodeType":"VariableDeclaration","scope":4595,"src":"4482:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4591,"name":"bool","nodeType":"ElementaryTypeName","src":"4482:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4463:34:20"},"returnParameters":{"id":4594,"nodeType":"ParameterList","parameters":[],"src":"4506:0:20"},"scope":4614,"src":"4437:70:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4596,"nodeType":"StructuredDocumentation","src":"4513:139:20","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":4603,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4666:11:20","nodeType":"FunctionDefinition","parameters":{"id":4599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4598,"mutability":"mutable","name":"tokenId","nameLocation":"4686:7:20","nodeType":"VariableDeclaration","scope":4603,"src":"4678:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4597,"name":"uint256","nodeType":"ElementaryTypeName","src":"4678:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4677:17:20"},"returnParameters":{"id":4602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4601,"mutability":"mutable","name":"operator","nameLocation":"4726:8:20","nodeType":"VariableDeclaration","scope":4603,"src":"4718:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4600,"name":"address","nodeType":"ElementaryTypeName","src":"4718:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4717:18:20"},"scope":4614,"src":"4657:79:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4604,"nodeType":"StructuredDocumentation","src":"4742:138:20","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":4613,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4894:16:20","nodeType":"FunctionDefinition","parameters":{"id":4609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4606,"mutability":"mutable","name":"owner","nameLocation":"4919:5:20","nodeType":"VariableDeclaration","scope":4613,"src":"4911:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4605,"name":"address","nodeType":"ElementaryTypeName","src":"4911:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4608,"mutability":"mutable","name":"operator","nameLocation":"4934:8:20","nodeType":"VariableDeclaration","scope":4613,"src":"4926:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4607,"name":"address","nodeType":"ElementaryTypeName","src":"4926:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4910:33:20"},"returnParameters":{"id":4612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4611,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4613,"src":"4967:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4610,"name":"bool","nodeType":"ElementaryTypeName","src":"4967:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4966:6:20"},"scope":4614,"src":"4885:88:20","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4615,"src":"250:4725:20","usedErrors":[]}],"src":"108:4868:20"},"id":20},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[4632]},"id":4633,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4616,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"116:23:21"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":4617,"nodeType":"StructuredDocumentation","src":"141:152:21","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":4632,"linearizedBaseContracts":[4632],"name":"IERC721Receiver","nameLocation":"304:15:21","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4618,"nodeType":"StructuredDocumentation","src":"326:493:21","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":4631,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"833:16:21","nodeType":"FunctionDefinition","parameters":{"id":4627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4620,"mutability":"mutable","name":"operator","nameLocation":"867:8:21","nodeType":"VariableDeclaration","scope":4631,"src":"859:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4619,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4622,"mutability":"mutable","name":"from","nameLocation":"893:4:21","nodeType":"VariableDeclaration","scope":4631,"src":"885:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4621,"name":"address","nodeType":"ElementaryTypeName","src":"885:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4624,"mutability":"mutable","name":"tokenId","nameLocation":"915:7:21","nodeType":"VariableDeclaration","scope":4631,"src":"907:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4623,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4626,"mutability":"mutable","name":"data","nameLocation":"947:4:21","nodeType":"VariableDeclaration","scope":4631,"src":"932:19:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4625,"name":"bytes","nodeType":"ElementaryTypeName","src":"932:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"849:108:21"},"returnParameters":{"id":4630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4629,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4631,"src":"976:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4628,"name":"bytes4","nodeType":"ElementaryTypeName","src":"976:6:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"975:8:21"},"scope":4632,"src":"824:160:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4633,"src":"294:692:21","usedErrors":[]}],"src":"116:871:21"},"id":21},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC165":[5296],"IERC721":[4614],"IERC721Metadata":[4659]},"id":4660,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4634,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:22"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":4635,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4660,"sourceUnit":4615,"src":"137:24:22","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4637,"name":"IERC721","nameLocations":["326:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":4614,"src":"326:7:22"},"id":4638,"nodeType":"InheritanceSpecifier","src":"326:7:22"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":4636,"nodeType":"StructuredDocumentation","src":"163:133:22","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":4659,"linearizedBaseContracts":[4659,4614,5296],"name":"IERC721Metadata","nameLocation":"307:15:22","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4639,"nodeType":"StructuredDocumentation","src":"340:58:22","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":4644,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"412:4:22","nodeType":"FunctionDefinition","parameters":{"id":4640,"nodeType":"ParameterList","parameters":[],"src":"416:2:22"},"returnParameters":{"id":4643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4642,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4644,"src":"442:13:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4641,"name":"string","nodeType":"ElementaryTypeName","src":"442:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"441:15:22"},"scope":4659,"src":"403:54:22","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4645,"nodeType":"StructuredDocumentation","src":"463:60:22","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":4650,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"537:6:22","nodeType":"FunctionDefinition","parameters":{"id":4646,"nodeType":"ParameterList","parameters":[],"src":"543:2:22"},"returnParameters":{"id":4649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4648,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4650,"src":"569:13:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4647,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"568:15:22"},"scope":4659,"src":"528:56:22","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4651,"nodeType":"StructuredDocumentation","src":"590:90:22","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":4658,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"694:8:22","nodeType":"FunctionDefinition","parameters":{"id":4654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4653,"mutability":"mutable","name":"tokenId","nameLocation":"711:7:22","nodeType":"VariableDeclaration","scope":4658,"src":"703:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4652,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"702:17:22"},"returnParameters":{"id":4657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4656,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4658,"src":"743:13:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4655,"name":"string","nodeType":"ElementaryTypeName","src":"743:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"742:15:22"},"scope":4659,"src":"685:73:22","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4660,"src":"297:463:22","usedErrors":[]}],"src":"112:649:22"},"id":22},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[4989]},"id":4990,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4661,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:23"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":4662,"nodeType":"StructuredDocumentation","src":"126:67:23","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":4989,"linearizedBaseContracts":[4989],"name":"Address","nameLocation":"202:7:23","nodeType":"ContractDefinition","nodes":[{"body":{"id":4676,"nodeType":"Block","src":"1241:254:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":4670,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4665,"src":"1465:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1473:4:23","memberName":"code","nodeType":"MemberAccess","src":"1465:12:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1478:6:23","memberName":"length","nodeType":"MemberAccess","src":"1465:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4669,"id":4675,"nodeType":"Return","src":"1458:30:23"}]},"documentation":{"id":4663,"nodeType":"StructuredDocumentation","src":"216:954:23","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":4677,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:23","nodeType":"FunctionDefinition","parameters":{"id":4666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4665,"mutability":"mutable","name":"account","nameLocation":"1203:7:23","nodeType":"VariableDeclaration","scope":4677,"src":"1195:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4664,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:23"},"returnParameters":{"id":4669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4668,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4677,"src":"1235:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4667,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:23"},"scope":4989,"src":"1175:320:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4710,"nodeType":"Block","src":"2483:241:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":4688,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$4989","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$4989","typeString":"library Address"}],"id":4687,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4686,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:23","typeDescriptions":{}}},"id":4689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2501:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2515:7:23","memberName":"balance","nodeType":"MemberAccess","src":"2501:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4691,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4682,"src":"2526:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":4693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":4685,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:73:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4695,"nodeType":"ExpressionStatement","src":"2493:73:23"},{"assignments":[4697,null],"declarations":[{"constant":false,"id":4697,"mutability":"mutable","name":"success","nameLocation":"2583:7:23","nodeType":"VariableDeclaration","scope":4710,"src":"2578:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4696,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":4704,"initialValue":{"arguments":[{"hexValue":"","id":4702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":4698,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4680,"src":"2596:9:23","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":4699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2606:4:23","memberName":"call","nodeType":"MemberAccess","src":"2596:14:23","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":4700,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4682,"src":"2618:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:23","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2596:33:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:23"},{"expression":{"arguments":[{"id":4706,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4697,"src":"2647:7:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":4707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":4705,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4709,"nodeType":"ExpressionStatement","src":"2639:78:23"}]},"documentation":{"id":4678,"nodeType":"StructuredDocumentation","src":"1501:906:23","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":4711,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:23","nodeType":"FunctionDefinition","parameters":{"id":4683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4680,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:23","nodeType":"VariableDeclaration","scope":4711,"src":"2431:25:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":4679,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:23","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":4682,"mutability":"mutable","name":"amount","nameLocation":"2466:6:23","nodeType":"VariableDeclaration","scope":4711,"src":"2458:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4681,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:23"},"returnParameters":{"id":4684,"nodeType":"ParameterList","parameters":[],"src":"2483:0:23"},"scope":4989,"src":"2412:312:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4728,"nodeType":"Block","src":"3555:96:23","statements":[{"expression":{"arguments":[{"id":4722,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4714,"src":"3594:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4723,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4716,"src":"3602:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":4724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":4725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":4721,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[4769,4813],"referencedDeclaration":4813,"src":"3572:21:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":4726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:72:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4720,"id":4727,"nodeType":"Return","src":"3565:79:23"}]},"documentation":{"id":4712,"nodeType":"StructuredDocumentation","src":"2730:731:23","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":4729,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:23","nodeType":"FunctionDefinition","parameters":{"id":4717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4714,"mutability":"mutable","name":"target","nameLocation":"3496:6:23","nodeType":"VariableDeclaration","scope":4729,"src":"3488:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4713,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4716,"mutability":"mutable","name":"data","nameLocation":"3517:4:23","nodeType":"VariableDeclaration","scope":4729,"src":"3504:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4715,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:23"},"returnParameters":{"id":4720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4719,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4729,"src":"3541:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4718,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:23"},"scope":4989,"src":"3466:185:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4748,"nodeType":"Block","src":"4020:76:23","statements":[{"expression":{"arguments":[{"id":4742,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4732,"src":"4059:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4743,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4734,"src":"4067:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":4744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":4745,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4736,"src":"4076:12:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4741,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[4769,4813],"referencedDeclaration":4813,"src":"4037:21:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":4746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4037:52:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4740,"id":4747,"nodeType":"Return","src":"4030:59:23"}]},"documentation":{"id":4730,"nodeType":"StructuredDocumentation","src":"3657:211:23","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":4749,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:23","nodeType":"FunctionDefinition","parameters":{"id":4737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4732,"mutability":"mutable","name":"target","nameLocation":"3912:6:23","nodeType":"VariableDeclaration","scope":4749,"src":"3904:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4731,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4734,"mutability":"mutable","name":"data","nameLocation":"3941:4:23","nodeType":"VariableDeclaration","scope":4749,"src":"3928:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4733,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4736,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:23","nodeType":"VariableDeclaration","scope":4749,"src":"3955:26:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4735,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:23"},"returnParameters":{"id":4740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4739,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4749,"src":"4006:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4738,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:23"},"scope":4989,"src":"3873:223:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4768,"nodeType":"Block","src":"4601:111:23","statements":[{"expression":{"arguments":[{"id":4762,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4752,"src":"4640:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4763,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4754,"src":"4648:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4764,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"4654:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":4765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":4761,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[4769,4813],"referencedDeclaration":4813,"src":"4618:21:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":4766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4618:87:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4760,"id":4767,"nodeType":"Return","src":"4611:94:23"}]},"documentation":{"id":4750,"nodeType":"StructuredDocumentation","src":"4102:351:23","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":4769,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:23","nodeType":"FunctionDefinition","parameters":{"id":4757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4752,"mutability":"mutable","name":"target","nameLocation":"4506:6:23","nodeType":"VariableDeclaration","scope":4769,"src":"4498:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4751,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4754,"mutability":"mutable","name":"data","nameLocation":"4535:4:23","nodeType":"VariableDeclaration","scope":4769,"src":"4522:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4753,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4756,"mutability":"mutable","name":"value","nameLocation":"4557:5:23","nodeType":"VariableDeclaration","scope":4769,"src":"4549:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4755,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:23"},"returnParameters":{"id":4760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4759,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4769,"src":"4587:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4758,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:23"},"scope":4989,"src":"4458:254:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4812,"nodeType":"Block","src":"5139:267:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":4786,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$4989","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$4989","typeString":"library Address"}],"id":4785,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4784,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:23","typeDescriptions":{}}},"id":4787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5157:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5171:7:23","memberName":"balance","nodeType":"MemberAccess","src":"5157:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4789,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4776,"src":"5182:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":4791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":4783,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5149:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5149:81:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4793,"nodeType":"ExpressionStatement","src":"5149:81:23"},{"assignments":[4795,4797],"declarations":[{"constant":false,"id":4795,"mutability":"mutable","name":"success","nameLocation":"5246:7:23","nodeType":"VariableDeclaration","scope":4812,"src":"5241:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4794,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4797,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:23","nodeType":"VariableDeclaration","scope":4812,"src":"5255:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4796,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4804,"initialValue":{"arguments":[{"id":4802,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"5308:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4798,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4772,"src":"5282:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5289:4:23","memberName":"call","nodeType":"MemberAccess","src":"5282:11:23","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":4800,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4776,"src":"5301:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:23","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5282:31:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:23"},{"expression":{"arguments":[{"id":4806,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4772,"src":"5357:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4807,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4795,"src":"5365:7:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4808,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"5374:10:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4809,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4778,"src":"5386:12:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4805,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4944,"src":"5330:26:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":4810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5330:69:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4782,"id":4811,"nodeType":"Return","src":"5323:76:23"}]},"documentation":{"id":4770,"nodeType":"StructuredDocumentation","src":"4718:237:23","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":4813,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:23","nodeType":"FunctionDefinition","parameters":{"id":4779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4772,"mutability":"mutable","name":"target","nameLocation":"5008:6:23","nodeType":"VariableDeclaration","scope":4813,"src":"5000:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4771,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4774,"mutability":"mutable","name":"data","nameLocation":"5037:4:23","nodeType":"VariableDeclaration","scope":4813,"src":"5024:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4773,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4776,"mutability":"mutable","name":"value","nameLocation":"5059:5:23","nodeType":"VariableDeclaration","scope":4813,"src":"5051:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4775,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4778,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:23","nodeType":"VariableDeclaration","scope":4813,"src":"5074:26:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4777,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:23"},"returnParameters":{"id":4782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4781,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4813,"src":"5125:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4780,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:23"},"scope":4989,"src":"4960:446:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4829,"nodeType":"Block","src":"5683:97:23","statements":[{"expression":{"arguments":[{"id":4824,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4816,"src":"5719:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4825,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"5727:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":4826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":4823,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[4830,4859],"referencedDeclaration":4859,"src":"5700:18:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":4827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5700:73:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4822,"id":4828,"nodeType":"Return","src":"5693:80:23"}]},"documentation":{"id":4814,"nodeType":"StructuredDocumentation","src":"5412:166:23","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":4830,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:23","nodeType":"FunctionDefinition","parameters":{"id":4819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4816,"mutability":"mutable","name":"target","nameLocation":"5619:6:23","nodeType":"VariableDeclaration","scope":4830,"src":"5611:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4815,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4818,"mutability":"mutable","name":"data","nameLocation":"5640:4:23","nodeType":"VariableDeclaration","scope":4830,"src":"5627:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4817,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:23"},"returnParameters":{"id":4822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4821,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4830,"src":"5669:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4820,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:23"},"scope":4989,"src":"5583:197:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4858,"nodeType":"Block","src":"6122:168:23","statements":[{"assignments":[4843,4845],"declarations":[{"constant":false,"id":4843,"mutability":"mutable","name":"success","nameLocation":"6138:7:23","nodeType":"VariableDeclaration","scope":4858,"src":"6133:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4842,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4845,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:23","nodeType":"VariableDeclaration","scope":4858,"src":"6147:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4844,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4850,"initialValue":{"arguments":[{"id":4848,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4835,"src":"6192:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4846,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4833,"src":"6174:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6181:10:23","memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:23","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":4849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:23:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:23"},{"expression":{"arguments":[{"id":4852,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4833,"src":"6241:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4853,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4843,"src":"6249:7:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4854,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"6258:10:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4855,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"6270:12:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4851,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4944,"src":"6214:26:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":4856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6214:69:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4841,"id":4857,"nodeType":"Return","src":"6207:76:23"}]},"documentation":{"id":4831,"nodeType":"StructuredDocumentation","src":"5786:173:23","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":4859,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:23","nodeType":"FunctionDefinition","parameters":{"id":4838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4833,"mutability":"mutable","name":"target","nameLocation":"6009:6:23","nodeType":"VariableDeclaration","scope":4859,"src":"6001:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4832,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4835,"mutability":"mutable","name":"data","nameLocation":"6038:4:23","nodeType":"VariableDeclaration","scope":4859,"src":"6025:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4834,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4837,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:23","nodeType":"VariableDeclaration","scope":4859,"src":"6052:26:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4836,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:23"},"returnParameters":{"id":4841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4840,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4859,"src":"6108:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4839,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:23"},"scope":4989,"src":"5964:326:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4875,"nodeType":"Block","src":"6566:101:23","statements":[{"expression":{"arguments":[{"id":4870,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4862,"src":"6604:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4871,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4864,"src":"6612:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":4872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":4869,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[4876,4905],"referencedDeclaration":4905,"src":"6583:20:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":4873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6583:77:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4868,"id":4874,"nodeType":"Return","src":"6576:84:23"}]},"documentation":{"id":4860,"nodeType":"StructuredDocumentation","src":"6296:168:23","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":4876,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:23","nodeType":"FunctionDefinition","parameters":{"id":4865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4862,"mutability":"mutable","name":"target","nameLocation":"6507:6:23","nodeType":"VariableDeclaration","scope":4876,"src":"6499:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4861,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4864,"mutability":"mutable","name":"data","nameLocation":"6528:4:23","nodeType":"VariableDeclaration","scope":4876,"src":"6515:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4863,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:23"},"returnParameters":{"id":4868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4876,"src":"6552:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4866,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:23"},"scope":4989,"src":"6469:198:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4904,"nodeType":"Block","src":"7008:170:23","statements":[{"assignments":[4889,4891],"declarations":[{"constant":false,"id":4889,"mutability":"mutable","name":"success","nameLocation":"7024:7:23","nodeType":"VariableDeclaration","scope":4904,"src":"7019:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4888,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4891,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:23","nodeType":"VariableDeclaration","scope":4904,"src":"7033:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4890,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4896,"initialValue":{"arguments":[{"id":4894,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4881,"src":"7080:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4892,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4879,"src":"7060:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7067:12:23","memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:23","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":4895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7060:25:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:23"},{"expression":{"arguments":[{"id":4898,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4879,"src":"7129:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4899,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4889,"src":"7137:7:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4900,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4891,"src":"7146:10:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4901,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4883,"src":"7158:12:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4897,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4944,"src":"7102:26:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":4902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7102:69:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4887,"id":4903,"nodeType":"Return","src":"7095:76:23"}]},"documentation":{"id":4877,"nodeType":"StructuredDocumentation","src":"6673:175:23","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":4905,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:23","nodeType":"FunctionDefinition","parameters":{"id":4884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4879,"mutability":"mutable","name":"target","nameLocation":"6900:6:23","nodeType":"VariableDeclaration","scope":4905,"src":"6892:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4878,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4881,"mutability":"mutable","name":"data","nameLocation":"6929:4:23","nodeType":"VariableDeclaration","scope":4905,"src":"6916:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4880,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4883,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:23","nodeType":"VariableDeclaration","scope":4905,"src":"6943:26:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4882,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:23"},"returnParameters":{"id":4887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4886,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4905,"src":"6994:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4885,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:23"},"scope":4989,"src":"6853:325:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4943,"nodeType":"Block","src":"7660:434:23","statements":[{"condition":{"id":4919,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4910,"src":"7674:7:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4941,"nodeType":"Block","src":"8030:58:23","statements":[{"expression":{"arguments":[{"id":4937,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4912,"src":"8052:10:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4938,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4914,"src":"8064:12:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4936,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4988,"src":"8044:7:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":4939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8044:33:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4940,"nodeType":"ExpressionStatement","src":"8044:33:23"}]},"id":4942,"nodeType":"IfStatement","src":"7670:418:23","trueBody":{"id":4935,"nodeType":"Block","src":"7683:341:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4920,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4912,"src":"7701:10:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7712:6:23","memberName":"length","nodeType":"MemberAccess","src":"7701:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4932,"nodeType":"IfStatement","src":"7697:286:23","trueBody":{"id":4931,"nodeType":"Block","src":"7725:258:23","statements":[{"expression":{"arguments":[{"arguments":[{"id":4926,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4908,"src":"7927:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4925,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4677,"src":"7916:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7916:18:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":4928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":4924,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7908:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:60:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4930,"nodeType":"ExpressionStatement","src":"7908:60:23"}]}},{"expression":{"id":4933,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4912,"src":"8003:10:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4918,"id":4934,"nodeType":"Return","src":"7996:17:23"}]}}]},"documentation":{"id":4906,"nodeType":"StructuredDocumentation","src":"7184:277:23","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":4944,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:23","nodeType":"FunctionDefinition","parameters":{"id":4915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4908,"mutability":"mutable","name":"target","nameLocation":"7519:6:23","nodeType":"VariableDeclaration","scope":4944,"src":"7511:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4907,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4910,"mutability":"mutable","name":"success","nameLocation":"7540:7:23","nodeType":"VariableDeclaration","scope":4944,"src":"7535:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4909,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4912,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:23","nodeType":"VariableDeclaration","scope":4944,"src":"7557:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4911,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4914,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:23","nodeType":"VariableDeclaration","scope":4944,"src":"7590:26:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4913,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:23"},"returnParameters":{"id":4918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4917,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4944,"src":"7646:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4916,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:23"},"scope":4989,"src":"7466:628:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4967,"nodeType":"Block","src":"8475:135:23","statements":[{"condition":{"id":4956,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4947,"src":"8489:7:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4965,"nodeType":"Block","src":"8546:58:23","statements":[{"expression":{"arguments":[{"id":4961,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4949,"src":"8568:10:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4962,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4951,"src":"8580:12:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4960,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4988,"src":"8560:7:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":4963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8560:33:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4964,"nodeType":"ExpressionStatement","src":"8560:33:23"}]},"id":4966,"nodeType":"IfStatement","src":"8485:119:23","trueBody":{"id":4959,"nodeType":"Block","src":"8498:42:23","statements":[{"expression":{"id":4957,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4949,"src":"8519:10:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4955,"id":4958,"nodeType":"Return","src":"8512:17:23"}]}}]},"documentation":{"id":4945,"nodeType":"StructuredDocumentation","src":"8100:210:23","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":4968,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:23","nodeType":"FunctionDefinition","parameters":{"id":4952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4947,"mutability":"mutable","name":"success","nameLocation":"8355:7:23","nodeType":"VariableDeclaration","scope":4968,"src":"8350:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4946,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4949,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:23","nodeType":"VariableDeclaration","scope":4968,"src":"8372:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4948,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4951,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:23","nodeType":"VariableDeclaration","scope":4968,"src":"8405:26:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4950,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:23"},"returnParameters":{"id":4955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4954,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4968,"src":"8461:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4953,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:23"},"scope":4989,"src":"8315:295:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4987,"nodeType":"Block","src":"8699:457:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4975,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4970,"src":"8775:10:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8786:6:23","memberName":"length","nodeType":"MemberAccess","src":"8775:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4985,"nodeType":"Block","src":"9105:45:23","statements":[{"expression":{"arguments":[{"id":4982,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4972,"src":"9126:12:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4981,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:23","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":4983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9119:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4984,"nodeType":"ExpressionStatement","src":"9119:20:23"}]},"id":4986,"nodeType":"IfStatement","src":"8771:379:23","trueBody":{"id":4980,"nodeType":"Block","src":"8798:301:23","statements":[{"AST":{"nodeType":"YulBlock","src":"8956:133:23","statements":[{"nodeType":"YulVariableDeclaration","src":"8974:40:23","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9003:10:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8997:5:23"},"nodeType":"YulFunctionCall","src":"8997:17:23"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8978:15:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9042:2:23","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9046:10:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9038:3:23"},"nodeType":"YulFunctionCall","src":"9038:19:23"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9059:15:23"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9031:6:23"},"nodeType":"YulFunctionCall","src":"9031:44:23"},"nodeType":"YulExpressionStatement","src":"9031:44:23"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":4970,"isOffset":false,"isSlot":false,"src":"9003:10:23","valueSize":1},{"declaration":4970,"isOffset":false,"isSlot":false,"src":"9046:10:23","valueSize":1}],"id":4979,"nodeType":"InlineAssembly","src":"8947:142:23"}]}}]},"id":4988,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:23","nodeType":"FunctionDefinition","parameters":{"id":4973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4970,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:23","nodeType":"VariableDeclaration","scope":4988,"src":"8633:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4969,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4972,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:23","nodeType":"VariableDeclaration","scope":4988,"src":"8658:26:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4971,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:23"},"returnParameters":{"id":4974,"nodeType":"ParameterList","parameters":[],"src":"8699:0:23"},"scope":4989,"src":"8616:540:23","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":4990,"src":"194:8964:23","usedErrors":[]}],"src":"101:9058:23"},"id":23},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[5011]},"id":5012,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4991,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:24"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":4992,"nodeType":"StructuredDocumentation","src":"111:496:24","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":5011,"linearizedBaseContracts":[5011],"name":"Context","nameLocation":"626:7:24","nodeType":"ContractDefinition","nodes":[{"body":{"id":5000,"nodeType":"Block","src":"702:34:24","statements":[{"expression":{"expression":{"id":4997,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:24","memberName":"sender","nodeType":"MemberAccess","src":"719:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4996,"id":4999,"nodeType":"Return","src":"712:17:24"}]},"id":5001,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:24","nodeType":"FunctionDefinition","parameters":{"id":4993,"nodeType":"ParameterList","parameters":[],"src":"659:2:24"},"returnParameters":{"id":4996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4995,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5001,"src":"693:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4994,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:24"},"scope":5011,"src":"640:96:24","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":5009,"nodeType":"Block","src":"809:32:24","statements":[{"expression":{"expression":{"id":5006,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:24","memberName":"data","nodeType":"MemberAccess","src":"826:8:24","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":5005,"id":5008,"nodeType":"Return","src":"819:15:24"}]},"id":5010,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:24","nodeType":"FunctionDefinition","parameters":{"id":5002,"nodeType":"ParameterList","parameters":[],"src":"759:2:24"},"returnParameters":{"id":5005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5004,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5010,"src":"793:14:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5003,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:24"},"scope":5011,"src":"742:99:24","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":5012,"src":"608:235:24","usedErrors":[]}],"src":"86:758:24"},"id":24},"@openzeppelin/contracts/utils/Counters.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","exportedSymbols":{"Counters":[5085]},"id":5086,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5013,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"87:23:25"},{"abstract":false,"baseContracts":[],"canonicalName":"Counters","contractDependencies":[],"contractKind":"library","documentation":{"id":5014,"nodeType":"StructuredDocumentation","src":"112:311:25","text":" @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"},"fullyImplemented":true,"id":5085,"linearizedBaseContracts":[5085],"name":"Counters","nameLocation":"432:8:25","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Counters.Counter","id":5017,"members":[{"constant":false,"id":5016,"mutability":"mutable","name":"_value","nameLocation":"794:6:25","nodeType":"VariableDeclaration","scope":5017,"src":"786:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5015,"name":"uint256","nodeType":"ElementaryTypeName","src":"786:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Counter","nameLocation":"454:7:25","nodeType":"StructDefinition","scope":5085,"src":"447:374:25","visibility":"public"},{"body":{"id":5028,"nodeType":"Block","src":"901:38:25","statements":[{"expression":{"expression":{"id":5025,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5020,"src":"918:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":5026,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"926:6:25","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":5016,"src":"918:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5024,"id":5027,"nodeType":"Return","src":"911:21:25"}]},"id":5029,"implemented":true,"kind":"function","modifiers":[],"name":"current","nameLocation":"836:7:25","nodeType":"FunctionDefinition","parameters":{"id":5021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5020,"mutability":"mutable","name":"counter","nameLocation":"860:7:25","nodeType":"VariableDeclaration","scope":5029,"src":"844:23:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":5019,"nodeType":"UserDefinedTypeName","pathNode":{"id":5018,"name":"Counter","nameLocations":["844:7:25"],"nodeType":"IdentifierPath","referencedDeclaration":5017,"src":"844:7:25"},"referencedDeclaration":5017,"src":"844:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"843:25:25"},"returnParameters":{"id":5024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5023,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5029,"src":"892:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5022,"name":"uint256","nodeType":"ElementaryTypeName","src":"892:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"891:9:25"},"scope":5085,"src":"827:112:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5042,"nodeType":"Block","src":"998:70:25","statements":[{"id":5041,"nodeType":"UncheckedBlock","src":"1008:54:25","statements":[{"expression":{"id":5039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5035,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5032,"src":"1032:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":5037,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1040:6:25","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":5016,"src":"1032:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":5038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1050:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1032:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5040,"nodeType":"ExpressionStatement","src":"1032:19:25"}]}]},"id":5043,"implemented":true,"kind":"function","modifiers":[],"name":"increment","nameLocation":"954:9:25","nodeType":"FunctionDefinition","parameters":{"id":5033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5032,"mutability":"mutable","name":"counter","nameLocation":"980:7:25","nodeType":"VariableDeclaration","scope":5043,"src":"964:23:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":5031,"nodeType":"UserDefinedTypeName","pathNode":{"id":5030,"name":"Counter","nameLocations":["964:7:25"],"nodeType":"IdentifierPath","referencedDeclaration":5017,"src":"964:7:25"},"referencedDeclaration":5017,"src":"964:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"963:25:25"},"returnParameters":{"id":5034,"nodeType":"ParameterList","parameters":[],"src":"998:0:25"},"scope":5085,"src":"945:123:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5070,"nodeType":"Block","src":"1127:176:25","statements":[{"assignments":[5050],"declarations":[{"constant":false,"id":5050,"mutability":"mutable","name":"value","nameLocation":"1145:5:25","nodeType":"VariableDeclaration","scope":5070,"src":"1137:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5049,"name":"uint256","nodeType":"ElementaryTypeName","src":"1137:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5053,"initialValue":{"expression":{"id":5051,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5046,"src":"1153:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":5052,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1161:6:25","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":5016,"src":"1153:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1137:30:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5055,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5050,"src":"1185:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1193:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1185:9:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756e7465723a2064656372656d656e74206f766572666c6f77","id":5058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1196:29:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""},"value":"Counter: decrement overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""}],"id":5054,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1177:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1177:49:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5060,"nodeType":"ExpressionStatement","src":"1177:49:25"},{"id":5069,"nodeType":"UncheckedBlock","src":"1236:61:25","statements":[{"expression":{"id":5067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5061,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5046,"src":"1260:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":5063,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1268:6:25","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":5016,"src":"1260:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5064,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5050,"src":"1277:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1285:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1277:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1260:26:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5068,"nodeType":"ExpressionStatement","src":"1260:26:25"}]}]},"id":5071,"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nameLocation":"1083:9:25","nodeType":"FunctionDefinition","parameters":{"id":5047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5046,"mutability":"mutable","name":"counter","nameLocation":"1109:7:25","nodeType":"VariableDeclaration","scope":5071,"src":"1093:23:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":5045,"nodeType":"UserDefinedTypeName","pathNode":{"id":5044,"name":"Counter","nameLocations":["1093:7:25"],"nodeType":"IdentifierPath","referencedDeclaration":5017,"src":"1093:7:25"},"referencedDeclaration":5017,"src":"1093:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1092:25:25"},"returnParameters":{"id":5048,"nodeType":"ParameterList","parameters":[],"src":"1127:0:25"},"scope":5085,"src":"1074:229:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5083,"nodeType":"Block","src":"1358:35:25","statements":[{"expression":{"id":5081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5077,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"1368:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":5079,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1376:6:25","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":5016,"src":"1368:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":5080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1385:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1368:18:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5082,"nodeType":"ExpressionStatement","src":"1368:18:25"}]},"id":5084,"implemented":true,"kind":"function","modifiers":[],"name":"reset","nameLocation":"1318:5:25","nodeType":"FunctionDefinition","parameters":{"id":5075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5074,"mutability":"mutable","name":"counter","nameLocation":"1340:7:25","nodeType":"VariableDeclaration","scope":5084,"src":"1324:23:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":5073,"nodeType":"UserDefinedTypeName","pathNode":{"id":5072,"name":"Counter","nameLocations":["1324:7:25"],"nodeType":"IdentifierPath","referencedDeclaration":5017,"src":"1324:7:25"},"referencedDeclaration":5017,"src":"1324:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1323:25:25"},"returnParameters":{"id":5076,"nodeType":"ParameterList","parameters":[],"src":"1358:0:25"},"scope":5085,"src":"1309:84:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":5086,"src":"424:971:25","usedErrors":[]}],"src":"87:1309:25"},"id":25},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[6161],"Strings":[5260]},"id":5261,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5087,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:26"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":5088,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5261,"sourceUnit":6162,"src":"126:25:26","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":5089,"nodeType":"StructuredDocumentation","src":"153:34:26","text":" @dev String operations."},"fullyImplemented":true,"id":5260,"linearizedBaseContracts":[5260],"name":"Strings","nameLocation":"196:7:26","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":5092,"mutability":"constant","name":"_SYMBOLS","nameLocation":"235:8:26","nodeType":"VariableDeclaration","scope":5260,"src":"210:54:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":5090,"name":"bytes16","nodeType":"ElementaryTypeName","src":"210:7:26","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":5091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"246:18:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":5095,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"293:15:26","nodeType":"VariableDeclaration","scope":5260,"src":"270:43:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5093,"name":"uint8","nodeType":"ElementaryTypeName","src":"270:5:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":5094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"311:2:26","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":5142,"nodeType":"Block","src":"486:625:26","statements":[{"id":5141,"nodeType":"UncheckedBlock","src":"496:609:26","statements":[{"assignments":[5104],"declarations":[{"constant":false,"id":5104,"mutability":"mutable","name":"length","nameLocation":"528:6:26","nodeType":"VariableDeclaration","scope":5141,"src":"520:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5103,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5111,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5107,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5098,"src":"548:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5105,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6161,"src":"537:4:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$6161_$","typeString":"type(library Math)"}},"id":5106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"542:5:26","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":5998,"src":"537:10:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"537:17:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"537:21:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"520:38:26"},{"assignments":[5113],"declarations":[{"constant":false,"id":5113,"mutability":"mutable","name":"buffer","nameLocation":"586:6:26","nodeType":"VariableDeclaration","scope":5141,"src":"572:20:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5112,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":5118,"initialValue":{"arguments":[{"id":5116,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5104,"src":"606:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5115,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"595:10:26","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":5114,"name":"string","nodeType":"ElementaryTypeName","src":"599:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":5117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"595:18:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"572:41:26"},{"assignments":[5120],"declarations":[{"constant":false,"id":5120,"mutability":"mutable","name":"ptr","nameLocation":"635:3:26","nodeType":"VariableDeclaration","scope":5141,"src":"627:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5119,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5121,"nodeType":"VariableDeclarationStatement","src":"627:11:26"},{"AST":{"nodeType":"YulBlock","src":"708:67:26","statements":[{"nodeType":"YulAssignment","src":"726:35:26","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"737:6:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"749:2:26","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"753:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:26"},"nodeType":"YulFunctionCall","src":"745:15:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"733:3:26"},"nodeType":"YulFunctionCall","src":"733:28:26"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"726:3:26"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5113,"isOffset":false,"isSlot":false,"src":"737:6:26","valueSize":1},{"declaration":5104,"isOffset":false,"isSlot":false,"src":"753:6:26","valueSize":1},{"declaration":5120,"isOffset":false,"isSlot":false,"src":"726:3:26","valueSize":1}],"id":5122,"nodeType":"InlineAssembly","src":"699:76:26"},{"body":{"id":5137,"nodeType":"Block","src":"801:267:26","statements":[{"expression":{"id":5125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"819:5:26","subExpression":{"id":5124,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5120,"src":"819:3:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5126,"nodeType":"ExpressionStatement","src":"819:5:26"},{"AST":{"nodeType":"YulBlock","src":"902:84:26","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"932:3:26"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"946:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"953:2:26","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"942:3:26"},"nodeType":"YulFunctionCall","src":"942:14:26"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"958:8:26"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"937:4:26"},"nodeType":"YulFunctionCall","src":"937:30:26"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"924:7:26"},"nodeType":"YulFunctionCall","src":"924:44:26"},"nodeType":"YulExpressionStatement","src":"924:44:26"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5092,"isOffset":false,"isSlot":false,"src":"958:8:26","valueSize":1},{"declaration":5120,"isOffset":false,"isSlot":false,"src":"932:3:26","valueSize":1},{"declaration":5098,"isOffset":false,"isSlot":false,"src":"946:5:26","valueSize":1}],"id":5127,"nodeType":"InlineAssembly","src":"893:93:26"},{"expression":{"id":5130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5128,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5098,"src":"1003:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":5129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:2:26","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1003:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5131,"nodeType":"ExpressionStatement","src":"1003:11:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5132,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5098,"src":"1036:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1036:10:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5136,"nodeType":"IfStatement","src":"1032:21:26","trueBody":{"id":5135,"nodeType":"Break","src":"1048:5:26"}}]},"condition":{"hexValue":"74727565","id":5123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"795:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":5138,"nodeType":"WhileStatement","src":"788:280:26"},{"expression":{"id":5139,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5113,"src":"1088:6:26","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":5102,"id":5140,"nodeType":"Return","src":"1081:13:26"}]}]},"documentation":{"id":5096,"nodeType":"StructuredDocumentation","src":"320:90:26","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":5143,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"424:8:26","nodeType":"FunctionDefinition","parameters":{"id":5099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5098,"mutability":"mutable","name":"value","nameLocation":"441:5:26","nodeType":"VariableDeclaration","scope":5143,"src":"433:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5097,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:15:26"},"returnParameters":{"id":5102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5101,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5143,"src":"471:13:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5100,"name":"string","nodeType":"ElementaryTypeName","src":"471:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"470:15:26"},"scope":5260,"src":"415:696:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5162,"nodeType":"Block","src":"1290:100:26","statements":[{"id":5161,"nodeType":"UncheckedBlock","src":"1300:84:26","statements":[{"expression":{"arguments":[{"id":5152,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5146,"src":"1343:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5155,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5146,"src":"1362:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5153,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6161,"src":"1350:4:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$6161_$","typeString":"type(library Math)"}},"id":5154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1355:6:26","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":6121,"src":"1350:11:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1350:18:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1350:22:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5151,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[5163,5239,5259],"referencedDeclaration":5239,"src":"1331:11:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":5159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1331:42:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":5150,"id":5160,"nodeType":"Return","src":"1324:49:26"}]}]},"documentation":{"id":5144,"nodeType":"StructuredDocumentation","src":"1117:94:26","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":5163,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1225:11:26","nodeType":"FunctionDefinition","parameters":{"id":5147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5146,"mutability":"mutable","name":"value","nameLocation":"1245:5:26","nodeType":"VariableDeclaration","scope":5163,"src":"1237:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5145,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:15:26"},"returnParameters":{"id":5150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5149,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5163,"src":"1275:13:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5148,"name":"string","nodeType":"ElementaryTypeName","src":"1275:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1274:15:26"},"scope":5260,"src":"1216:174:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5238,"nodeType":"Block","src":"1603:347:26","statements":[{"assignments":[5174],"declarations":[{"constant":false,"id":5174,"mutability":"mutable","name":"buffer","nameLocation":"1626:6:26","nodeType":"VariableDeclaration","scope":5238,"src":"1613:19:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5173,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5183,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":5177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:26","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5178,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5168,"src":"1649:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":5180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:26","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1645:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5176,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1635:9:26","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":5175,"name":"bytes","nodeType":"ElementaryTypeName","src":"1639:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":5182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1635:25:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1613:47:26"},{"expression":{"id":5188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5184,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5174,"src":"1670:6:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5186,"indexExpression":{"hexValue":"30","id":5185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1670:9:26","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":5187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:3:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1670:15:26","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":5189,"nodeType":"ExpressionStatement","src":"1670:15:26"},{"expression":{"id":5194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5190,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5174,"src":"1695:6:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5192,"indexExpression":{"hexValue":"31","id":5191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1695:9:26","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":5193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1695:15:26","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":5195,"nodeType":"ExpressionStatement","src":"1695:15:26"},{"body":{"id":5224,"nodeType":"Block","src":"1765:83:26","statements":[{"expression":{"id":5218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5210,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5174,"src":"1779:6:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5212,"indexExpression":{"id":5211,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5197,"src":"1786:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1779:9:26","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":5213,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5092,"src":"1791:8:26","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":5217,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5214,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5166,"src":"1800:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":5215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:3:26","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1800:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:21:26","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1779:33:26","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":5219,"nodeType":"ExpressionStatement","src":"1779:33:26"},{"expression":{"id":5222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5220,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5166,"src":"1826:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":5221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:26","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1826:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5223,"nodeType":"ExpressionStatement","src":"1826:11:26"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5204,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5197,"src":"1753:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":5205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1757:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1753:5:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5225,"initializationExpression":{"assignments":[5197],"declarations":[{"constant":false,"id":5197,"mutability":"mutable","name":"i","nameLocation":"1733:1:26","nodeType":"VariableDeclaration","scope":5225,"src":"1725:9:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5196,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5203,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":5198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:26","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5199,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5168,"src":"1741:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1737:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:26:26"},"loopExpression":{"expression":{"id":5208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1760:3:26","subExpression":{"id":5207,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5197,"src":"1762:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5209,"nodeType":"ExpressionStatement","src":"1760:3:26"},"nodeType":"ForStatement","src":"1720:128:26"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5227,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5166,"src":"1865:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":5230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1877:34:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":5226,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1857:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1857:55:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5232,"nodeType":"ExpressionStatement","src":"1857:55:26"},{"expression":{"arguments":[{"id":5235,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5174,"src":"1936:6:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5234,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:6:26","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5233,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:26","typeDescriptions":{}}},"id":5236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1929:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":5172,"id":5237,"nodeType":"Return","src":"1922:21:26"}]},"documentation":{"id":5164,"nodeType":"StructuredDocumentation","src":"1396:112:26","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":5239,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1522:11:26","nodeType":"FunctionDefinition","parameters":{"id":5169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5166,"mutability":"mutable","name":"value","nameLocation":"1542:5:26","nodeType":"VariableDeclaration","scope":5239,"src":"1534:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5165,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5168,"mutability":"mutable","name":"length","nameLocation":"1557:6:26","nodeType":"VariableDeclaration","scope":5239,"src":"1549:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5167,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1533:31:26"},"returnParameters":{"id":5172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5171,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5239,"src":"1588:13:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5170,"name":"string","nodeType":"ElementaryTypeName","src":"1588:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1587:15:26"},"scope":5260,"src":"1513:437:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5258,"nodeType":"Block","src":"2175:76:26","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":5252,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5242,"src":"2220:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5251,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2212:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":5250,"name":"uint160","nodeType":"ElementaryTypeName","src":"2212:7:26","typeDescriptions":{}}},"id":5253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2212:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":5249,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2204:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5248,"name":"uint256","nodeType":"ElementaryTypeName","src":"2204:7:26","typeDescriptions":{}}},"id":5254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:22:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5255,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5095,"src":"2228:15:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":5247,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[5163,5239,5259],"referencedDeclaration":5239,"src":"2192:11:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":5256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2192:52:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":5246,"id":5257,"nodeType":"Return","src":"2185:59:26"}]},"documentation":{"id":5240,"nodeType":"StructuredDocumentation","src":"1956:141:26","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":5259,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2111:11:26","nodeType":"FunctionDefinition","parameters":{"id":5243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5242,"mutability":"mutable","name":"addr","nameLocation":"2131:4:26","nodeType":"VariableDeclaration","scope":5259,"src":"2123:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5241,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:14:26"},"returnParameters":{"id":5246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5245,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5259,"src":"2160:13:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5244,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:15:26"},"scope":5260,"src":"2102:149:26","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5261,"src":"188:2065:26","usedErrors":[]}],"src":"101:2153:26"},"id":26},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[5284],"IERC165":[5296]},"id":5285,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5262,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:27"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":5263,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5285,"sourceUnit":5297,"src":"124:23:27","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5265,"name":"IERC165","nameLocations":["754:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":5296,"src":"754:7:27"},"id":5266,"nodeType":"InheritanceSpecifier","src":"754:7:27"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":5264,"nodeType":"StructuredDocumentation","src":"149:576:27","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":5284,"linearizedBaseContracts":[5284,5296],"name":"ERC165","nameLocation":"744:6:27","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[5295],"body":{"id":5282,"nodeType":"Block","src":"920:64:27","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":5280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5275,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5269,"src":"937:11:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":5277,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5296,"src":"957:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$5296_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$5296_$","typeString":"type(contract IERC165)"}],"id":5276,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:27","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"952:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$5296","typeString":"type(contract IERC165)"}},"id":5279,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"966:11:27","memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5274,"id":5281,"nodeType":"Return","src":"930:47:27"}]},"documentation":{"id":5267,"nodeType":"StructuredDocumentation","src":"768:56:27","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":5283,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:27","nodeType":"FunctionDefinition","overrides":{"id":5271,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:27"},"parameters":{"id":5270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5269,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:27","nodeType":"VariableDeclaration","scope":5283,"src":"856:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5268,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:27"},"returnParameters":{"id":5274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5273,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5283,"src":"914:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5272,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:27"},"scope":5284,"src":"829:155:27","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":5285,"src":"726:260:27","usedErrors":[]}],"src":"99:888:27"},"id":27},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[5296]},"id":5297,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5286,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:28"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":5287,"nodeType":"StructuredDocumentation","src":"125:279:28","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":5296,"linearizedBaseContracts":[5296],"name":"IERC165","nameLocation":"415:7:28","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":5288,"nodeType":"StructuredDocumentation","src":"429:340:28","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":5295,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:28","nodeType":"FunctionDefinition","parameters":{"id":5291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5290,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:28","nodeType":"VariableDeclaration","scope":5295,"src":"801:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5289,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:28","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:28"},"returnParameters":{"id":5294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5293,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5295,"src":"844:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5292,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:28"},"scope":5296,"src":"774:76:28","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5297,"src":"405:447:28","usedErrors":[]}],"src":"100:753:28"},"id":28},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[6161]},"id":6162,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5298,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:29"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":5299,"nodeType":"StructuredDocumentation","src":"128:73:29","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":6161,"linearizedBaseContracts":[6161],"name":"Math","nameLocation":"210:4:29","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":5303,"members":[{"id":5300,"name":"Down","nameLocation":"245:4:29","nodeType":"EnumValue","src":"245:4:29"},{"id":5301,"name":"Up","nameLocation":"287:2:29","nodeType":"EnumValue","src":"287:2:29"},{"id":5302,"name":"Zero","nameLocation":"318:4:29","nodeType":"EnumValue","src":"318:4:29"}],"name":"Rounding","nameLocation":"226:8:29","nodeType":"EnumDefinition","src":"221:122:29"},{"body":{"id":5320,"nodeType":"Block","src":"480:37:29","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5313,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5306,"src":"497:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5314,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5308,"src":"501:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5317,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5308,"src":"509:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:29","trueExpression":{"id":5316,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5306,"src":"505:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5312,"id":5319,"nodeType":"Return","src":"490:20:29"}]},"documentation":{"id":5304,"nodeType":"StructuredDocumentation","src":"349:59:29","text":" @dev Returns the largest of two numbers."},"id":5321,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:29","nodeType":"FunctionDefinition","parameters":{"id":5309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5306,"mutability":"mutable","name":"a","nameLocation":"434:1:29","nodeType":"VariableDeclaration","scope":5321,"src":"426:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5305,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5308,"mutability":"mutable","name":"b","nameLocation":"445:1:29","nodeType":"VariableDeclaration","scope":5321,"src":"437:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5307,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:29"},"returnParameters":{"id":5312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5311,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5321,"src":"471:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5310,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:29"},"scope":6161,"src":"413:104:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5338,"nodeType":"Block","src":"655:37:29","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5331,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5324,"src":"672:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5332,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5326,"src":"676:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5335,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5326,"src":"684:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:29","trueExpression":{"id":5334,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5324,"src":"680:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5330,"id":5337,"nodeType":"Return","src":"665:20:29"}]},"documentation":{"id":5322,"nodeType":"StructuredDocumentation","src":"523:60:29","text":" @dev Returns the smallest of two numbers."},"id":5339,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:29","nodeType":"FunctionDefinition","parameters":{"id":5327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5324,"mutability":"mutable","name":"a","nameLocation":"609:1:29","nodeType":"VariableDeclaration","scope":5339,"src":"601:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5323,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5326,"mutability":"mutable","name":"b","nameLocation":"620:1:29","nodeType":"VariableDeclaration","scope":5339,"src":"612:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5325,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:29"},"returnParameters":{"id":5330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5329,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5339,"src":"646:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5328,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:29"},"scope":6161,"src":"588:104:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5361,"nodeType":"Block","src":"876:82:29","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5349,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5342,"src":"931:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":5350,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5344,"src":"935:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5352,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5353,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5342,"src":"941:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":5354,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5344,"src":"945:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5356,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":5357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:29","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5348,"id":5360,"nodeType":"Return","src":"923:28:29"}]},"documentation":{"id":5340,"nodeType":"StructuredDocumentation","src":"698:102:29","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":5362,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:29","nodeType":"FunctionDefinition","parameters":{"id":5345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5342,"mutability":"mutable","name":"a","nameLocation":"830:1:29","nodeType":"VariableDeclaration","scope":5362,"src":"822:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5341,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5344,"mutability":"mutable","name":"b","nameLocation":"841:1:29","nodeType":"VariableDeclaration","scope":5362,"src":"833:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5343,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:29"},"returnParameters":{"id":5348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5347,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5362,"src":"867:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5346,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:29"},"scope":6161,"src":"805:153:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5386,"nodeType":"Block","src":"1228:123:29","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5372,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5365,"src":"1316:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5376,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5365,"src":"1330:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5379,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5380,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5367,"src":"1339:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:29","trueExpression":{"hexValue":"30","id":5375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5371,"id":5385,"nodeType":"Return","src":"1309:35:29"}]},"documentation":{"id":5363,"nodeType":"StructuredDocumentation","src":"964:188:29","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":5387,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:29","nodeType":"FunctionDefinition","parameters":{"id":5368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5365,"mutability":"mutable","name":"a","nameLocation":"1182:1:29","nodeType":"VariableDeclaration","scope":5387,"src":"1174:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5364,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5367,"mutability":"mutable","name":"b","nameLocation":"1193:1:29","nodeType":"VariableDeclaration","scope":5387,"src":"1185:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5366,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:29"},"returnParameters":{"id":5371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5370,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5387,"src":"1219:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5369,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:29"},"scope":6161,"src":"1157:194:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5508,"nodeType":"Block","src":"1795:3797:29","statements":[{"id":5507,"nodeType":"UncheckedBlock","src":"1805:3781:29","statements":[{"assignments":[5400],"declarations":[{"constant":false,"id":5400,"mutability":"mutable","name":"prod0","nameLocation":"2134:5:29","nodeType":"VariableDeclaration","scope":5507,"src":"2126:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5399,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5401,"nodeType":"VariableDeclarationStatement","src":"2126:13:29"},{"assignments":[5403],"declarations":[{"constant":false,"id":5403,"mutability":"mutable","name":"prod1","nameLocation":"2206:5:29","nodeType":"VariableDeclaration","scope":5507,"src":"2198:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5402,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5404,"nodeType":"VariableDeclarationStatement","src":"2198:13:29"},{"AST":{"nodeType":"YulBlock","src":"2278:157:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2296:30:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2313:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"2316:1:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2323:1:29","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2319:3:29"},"nodeType":"YulFunctionCall","src":"2319:6:29"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2306:6:29"},"nodeType":"YulFunctionCall","src":"2306:20:29"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2300:2:29","type":""}]},{"nodeType":"YulAssignment","src":"2343:18:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2356:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"2359:1:29"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2352:3:29"},"nodeType":"YulFunctionCall","src":"2352:9:29"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2343:5:29"}]},{"nodeType":"YulAssignment","src":"2378:43:29","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2395:2:29"},{"name":"prod0","nodeType":"YulIdentifier","src":"2399:5:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:29"},"nodeType":"YulFunctionCall","src":"2391:14:29"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2410:2:29"},{"name":"prod0","nodeType":"YulIdentifier","src":"2414:5:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2407:2:29"},"nodeType":"YulFunctionCall","src":"2407:13:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2387:3:29"},"nodeType":"YulFunctionCall","src":"2387:34:29"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2378:5:29"}]}]},"evmVersion":"london","externalReferences":[{"declaration":5400,"isOffset":false,"isSlot":false,"src":"2343:5:29","valueSize":1},{"declaration":5400,"isOffset":false,"isSlot":false,"src":"2399:5:29","valueSize":1},{"declaration":5400,"isOffset":false,"isSlot":false,"src":"2414:5:29","valueSize":1},{"declaration":5403,"isOffset":false,"isSlot":false,"src":"2378:5:29","valueSize":1},{"declaration":5390,"isOffset":false,"isSlot":false,"src":"2313:1:29","valueSize":1},{"declaration":5390,"isOffset":false,"isSlot":false,"src":"2356:1:29","valueSize":1},{"declaration":5392,"isOffset":false,"isSlot":false,"src":"2316:1:29","valueSize":1},{"declaration":5392,"isOffset":false,"isSlot":false,"src":"2359:1:29","valueSize":1}],"id":5405,"nodeType":"InlineAssembly","src":"2269:166:29"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5406,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5403,"src":"2516:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2525:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2516:10:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5414,"nodeType":"IfStatement","src":"2512:75:29","trueBody":{"id":5413,"nodeType":"Block","src":"2528:59:29","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5409,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5400,"src":"2553:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5410,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5394,"src":"2561:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2553:19:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5398,"id":5412,"nodeType":"Return","src":"2546:26:29"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5416,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5394,"src":"2697:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5417,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5403,"src":"2711:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2697:19:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5415,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2689:7:29","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":5419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2689:28:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5420,"nodeType":"ExpressionStatement","src":"2689:28:29"},{"assignments":[5422],"declarations":[{"constant":false,"id":5422,"mutability":"mutable","name":"remainder","nameLocation":"2981:9:29","nodeType":"VariableDeclaration","scope":5507,"src":"2973:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5421,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5423,"nodeType":"VariableDeclarationStatement","src":"2973:17:29"},{"AST":{"nodeType":"YulBlock","src":"3013:291:29","statements":[{"nodeType":"YulAssignment","src":"3082:38:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3102:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"3105:1:29"},{"name":"denominator","nodeType":"YulIdentifier","src":"3108:11:29"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3095:6:29"},"nodeType":"YulFunctionCall","src":"3095:25:29"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3082:9:29"}]},{"nodeType":"YulAssignment","src":"3202:41:29","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3215:5:29"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3225:9:29"},{"name":"prod0","nodeType":"YulIdentifier","src":"3236:5:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3222:2:29"},"nodeType":"YulFunctionCall","src":"3222:20:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3211:3:29"},"nodeType":"YulFunctionCall","src":"3211:32:29"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3202:5:29"}]},{"nodeType":"YulAssignment","src":"3260:30:29","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3273:5:29"},{"name":"remainder","nodeType":"YulIdentifier","src":"3280:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3269:3:29"},"nodeType":"YulFunctionCall","src":"3269:21:29"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3260:5:29"}]}]},"evmVersion":"london","externalReferences":[{"declaration":5394,"isOffset":false,"isSlot":false,"src":"3108:11:29","valueSize":1},{"declaration":5400,"isOffset":false,"isSlot":false,"src":"3236:5:29","valueSize":1},{"declaration":5400,"isOffset":false,"isSlot":false,"src":"3260:5:29","valueSize":1},{"declaration":5400,"isOffset":false,"isSlot":false,"src":"3273:5:29","valueSize":1},{"declaration":5403,"isOffset":false,"isSlot":false,"src":"3202:5:29","valueSize":1},{"declaration":5403,"isOffset":false,"isSlot":false,"src":"3215:5:29","valueSize":1},{"declaration":5422,"isOffset":false,"isSlot":false,"src":"3082:9:29","valueSize":1},{"declaration":5422,"isOffset":false,"isSlot":false,"src":"3225:9:29","valueSize":1},{"declaration":5422,"isOffset":false,"isSlot":false,"src":"3280:9:29","valueSize":1},{"declaration":5390,"isOffset":false,"isSlot":false,"src":"3102:1:29","valueSize":1},{"declaration":5392,"isOffset":false,"isSlot":false,"src":"3105:1:29","valueSize":1}],"id":5424,"nodeType":"InlineAssembly","src":"3004:300:29"},{"assignments":[5426],"declarations":[{"constant":false,"id":5426,"mutability":"mutable","name":"twos","nameLocation":"3619:4:29","nodeType":"VariableDeclaration","scope":5507,"src":"3611:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5425,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5434,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5427,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5394,"src":"3626:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3641:12:29","subExpression":{"id":5428,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5394,"src":"3642:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3641:16:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5432,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3640:18:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3626:32:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3611:47:29"},{"AST":{"nodeType":"YulBlock","src":"3681:362:29","statements":[{"nodeType":"YulAssignment","src":"3746:37:29","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3765:11:29"},{"name":"twos","nodeType":"YulIdentifier","src":"3778:4:29"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3761:3:29"},"nodeType":"YulFunctionCall","src":"3761:22:29"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3746:11:29"}]},{"nodeType":"YulAssignment","src":"3850:25:29","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3863:5:29"},{"name":"twos","nodeType":"YulIdentifier","src":"3870:4:29"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3859:3:29"},"nodeType":"YulFunctionCall","src":"3859:16:29"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3850:5:29"}]},{"nodeType":"YulAssignment","src":"3990:39:29","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4010:1:29","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4013:4:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4006:3:29"},"nodeType":"YulFunctionCall","src":"4006:12:29"},{"name":"twos","nodeType":"YulIdentifier","src":"4020:4:29"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4002:3:29"},"nodeType":"YulFunctionCall","src":"4002:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"4027:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:29"},"nodeType":"YulFunctionCall","src":"3998:31:29"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3990:4:29"}]}]},"evmVersion":"london","externalReferences":[{"declaration":5394,"isOffset":false,"isSlot":false,"src":"3746:11:29","valueSize":1},{"declaration":5394,"isOffset":false,"isSlot":false,"src":"3765:11:29","valueSize":1},{"declaration":5400,"isOffset":false,"isSlot":false,"src":"3850:5:29","valueSize":1},{"declaration":5400,"isOffset":false,"isSlot":false,"src":"3863:5:29","valueSize":1},{"declaration":5426,"isOffset":false,"isSlot":false,"src":"3778:4:29","valueSize":1},{"declaration":5426,"isOffset":false,"isSlot":false,"src":"3870:4:29","valueSize":1},{"declaration":5426,"isOffset":false,"isSlot":false,"src":"3990:4:29","valueSize":1},{"declaration":5426,"isOffset":false,"isSlot":false,"src":"4013:4:29","valueSize":1},{"declaration":5426,"isOffset":false,"isSlot":false,"src":"4020:4:29","valueSize":1}],"id":5435,"nodeType":"InlineAssembly","src":"3672:371:29"},{"expression":{"id":5440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5436,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5400,"src":"4109:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5437,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5403,"src":"4118:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5438,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5426,"src":"4126:4:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4118:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4109:21:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5441,"nodeType":"ExpressionStatement","src":"4109:21:29"},{"assignments":[5443],"declarations":[{"constant":false,"id":5443,"mutability":"mutable","name":"inverse","nameLocation":"4456:7:29","nodeType":"VariableDeclaration","scope":5507,"src":"4448:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5442,"name":"uint256","nodeType":"ElementaryTypeName","src":"4448:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5450,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":5444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:29","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5445,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5394,"src":"4471:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:15:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5447,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4466:17:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":5448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:29","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4466:21:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4448:39:29"},{"expression":{"id":5457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5451,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5443,"src":"4704:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":5452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4715:1:29","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5453,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5394,"src":"4719:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5454,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5443,"src":"4733:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4719:21:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:25:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:36:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5458,"nodeType":"ExpressionStatement","src":"4704:36:29"},{"expression":{"id":5465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5459,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5443,"src":"4773:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":5460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4784:1:29","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5461,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5394,"src":"4788:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5462,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5443,"src":"4802:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4788:21:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:25:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4773:36:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5466,"nodeType":"ExpressionStatement","src":"4773:36:29"},{"expression":{"id":5473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5467,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5443,"src":"4843:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":5468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4854:1:29","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5469,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5394,"src":"4858:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5470,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5443,"src":"4872:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:21:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:25:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4843:36:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5474,"nodeType":"ExpressionStatement","src":"4843:36:29"},{"expression":{"id":5481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5475,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5443,"src":"4913:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":5476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4924:1:29","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5477,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5394,"src":"4928:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5478,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5443,"src":"4942:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:21:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:25:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4913:36:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5482,"nodeType":"ExpressionStatement","src":"4913:36:29"},{"expression":{"id":5489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5483,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5443,"src":"4983:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":5484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:1:29","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5485,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5394,"src":"4998:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5486,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5443,"src":"5012:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:21:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:25:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4983:36:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5490,"nodeType":"ExpressionStatement","src":"4983:36:29"},{"expression":{"id":5497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5491,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5443,"src":"5054:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":5492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:29","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5493,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5394,"src":"5069:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5494,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5443,"src":"5083:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5069:21:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:25:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5054:36:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5498,"nodeType":"ExpressionStatement","src":"5054:36:29"},{"expression":{"id":5503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5499,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5397,"src":"5524:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5500,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5400,"src":"5533:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5501,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5443,"src":"5541:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:15:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5524:24:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5504,"nodeType":"ExpressionStatement","src":"5524:24:29"},{"expression":{"id":5505,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5397,"src":"5569:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5398,"id":5506,"nodeType":"Return","src":"5562:13:29"}]}]},"documentation":{"id":5388,"nodeType":"StructuredDocumentation","src":"1357:305:29","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":5509,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:29","nodeType":"FunctionDefinition","parameters":{"id":5395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5390,"mutability":"mutable","name":"x","nameLocation":"1700:1:29","nodeType":"VariableDeclaration","scope":5509,"src":"1692:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5389,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5392,"mutability":"mutable","name":"y","nameLocation":"1719:1:29","nodeType":"VariableDeclaration","scope":5509,"src":"1711:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5391,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5394,"mutability":"mutable","name":"denominator","nameLocation":"1738:11:29","nodeType":"VariableDeclaration","scope":5509,"src":"1730:19:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5393,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:73:29"},"returnParameters":{"id":5398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5397,"mutability":"mutable","name":"result","nameLocation":"1787:6:29","nodeType":"VariableDeclaration","scope":5509,"src":"1779:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5396,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:16:29"},"scope":6161,"src":"1667:3925:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5552,"nodeType":"Block","src":"5872:189:29","statements":[{"assignments":[5525],"declarations":[{"constant":false,"id":5525,"mutability":"mutable","name":"result","nameLocation":"5890:6:29","nodeType":"VariableDeclaration","scope":5552,"src":"5882:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5524,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5531,"initialValue":{"arguments":[{"id":5527,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"5906:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5528,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5514,"src":"5909:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5529,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5516,"src":"5912:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5526,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[5509,5553],"referencedDeclaration":5509,"src":"5899:6:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":5530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5899:25:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5882:42:29"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"},"id":5535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5532,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5519,"src":"5938:8:29","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5533,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5303,"src":"5950:8:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$5303_$","typeString":"type(enum Math.Rounding)"}},"id":5534,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5959:2:29","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":5301,"src":"5950:11:29","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"}},"src":"5938:23:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5537,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"5972:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5538,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5514,"src":"5975:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5539,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5516,"src":"5978:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5536,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5965:6:29","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":5540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5965:25:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5993:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5965:29:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5938:56:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5549,"nodeType":"IfStatement","src":"5934:98:29","trueBody":{"id":5548,"nodeType":"Block","src":"5996:36:29","statements":[{"expression":{"id":5546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5544,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5525,"src":"6010:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":5545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6020:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6010:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5547,"nodeType":"ExpressionStatement","src":"6010:11:29"}]}},{"expression":{"id":5550,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5525,"src":"6048:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5523,"id":5551,"nodeType":"Return","src":"6041:13:29"}]},"documentation":{"id":5510,"nodeType":"StructuredDocumentation","src":"5598:121:29","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":5553,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5733:6:29","nodeType":"FunctionDefinition","parameters":{"id":5520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5512,"mutability":"mutable","name":"x","nameLocation":"5757:1:29","nodeType":"VariableDeclaration","scope":5553,"src":"5749:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5511,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5514,"mutability":"mutable","name":"y","nameLocation":"5776:1:29","nodeType":"VariableDeclaration","scope":5553,"src":"5768:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5513,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5516,"mutability":"mutable","name":"denominator","nameLocation":"5795:11:29","nodeType":"VariableDeclaration","scope":5553,"src":"5787:19:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5515,"name":"uint256","nodeType":"ElementaryTypeName","src":"5787:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5519,"mutability":"mutable","name":"rounding","nameLocation":"5825:8:29","nodeType":"VariableDeclaration","scope":5553,"src":"5816:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"},"typeName":{"id":5518,"nodeType":"UserDefinedTypeName","pathNode":{"id":5517,"name":"Rounding","nameLocations":["5816:8:29"],"nodeType":"IdentifierPath","referencedDeclaration":5303,"src":"5816:8:29"},"referencedDeclaration":5303,"src":"5816:8:29","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5739:100:29"},"returnParameters":{"id":5523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5522,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5553,"src":"5863:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5521,"name":"uint256","nodeType":"ElementaryTypeName","src":"5863:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5862:9:29"},"scope":6161,"src":"5724:337:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5664,"nodeType":"Block","src":"6337:1585:29","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5561,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5556,"src":"6351:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6356:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6351:6:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5567,"nodeType":"IfStatement","src":"6347:45:29","trueBody":{"id":5566,"nodeType":"Block","src":"6359:33:29","statements":[{"expression":{"hexValue":"30","id":5564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":5560,"id":5565,"nodeType":"Return","src":"6373:8:29"}]}},{"assignments":[5569],"declarations":[{"constant":false,"id":5569,"mutability":"mutable","name":"result","nameLocation":"7079:6:29","nodeType":"VariableDeclaration","scope":5664,"src":"7071:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5568,"name":"uint256","nodeType":"ElementaryTypeName","src":"7071:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5578,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7088:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5572,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5556,"src":"7099:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5571,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[5833,5869],"referencedDeclaration":5833,"src":"7094:4:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7094:7:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7105:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7094:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5576,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7093:14:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7088:19:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7071:36:29"},{"id":5663,"nodeType":"UncheckedBlock","src":"7508:408:29","statements":[{"expression":{"id":5588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5579,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7532:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5580,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7542:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5581,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5556,"src":"7551:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5582,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7555:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7551:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:19:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5585,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:21:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7566:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7541:26:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7532:35:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5589,"nodeType":"ExpressionStatement","src":"7532:35:29"},{"expression":{"id":5599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5590,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7581:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5591,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7591:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5592,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5556,"src":"7600:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5593,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7604:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7600:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7591:19:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5596,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7590:21:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7590:26:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:35:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5600,"nodeType":"ExpressionStatement","src":"7581:35:29"},{"expression":{"id":5610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5601,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7630:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5602,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7640:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5603,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5556,"src":"7649:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5604,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7653:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7649:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:19:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5607,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7639:21:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7664:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7639:26:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7630:35:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5611,"nodeType":"ExpressionStatement","src":"7630:35:29"},{"expression":{"id":5621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5612,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7679:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5613,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7689:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5614,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5556,"src":"7698:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5615,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7702:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7698:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7689:19:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5618,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7688:21:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7713:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7688:26:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:35:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5622,"nodeType":"ExpressionStatement","src":"7679:35:29"},{"expression":{"id":5632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5623,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7728:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5624,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7738:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5625,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5556,"src":"7747:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5626,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7751:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7747:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7738:19:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5629,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7737:21:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7762:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7737:26:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7728:35:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5633,"nodeType":"ExpressionStatement","src":"7728:35:29"},{"expression":{"id":5643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5634,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7777:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5635,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7787:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5636,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5556,"src":"7796:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5637,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7800:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7796:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7787:19:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5640,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7786:21:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7811:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7786:26:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:35:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5644,"nodeType":"ExpressionStatement","src":"7777:35:29"},{"expression":{"id":5654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5645,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7826:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5646,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7836:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5647,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5556,"src":"7845:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5648,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7849:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7845:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7836:19:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5651,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7835:21:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7860:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7835:26:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7826:35:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5655,"nodeType":"ExpressionStatement","src":"7826:35:29"},{"expression":{"arguments":[{"id":5657,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7886:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5658,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5556,"src":"7894:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5659,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"7898:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7894:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5656,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5339,"src":"7882:3:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7882:23:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5560,"id":5662,"nodeType":"Return","src":"7875:30:29"}]}]},"documentation":{"id":5554,"nodeType":"StructuredDocumentation","src":"6067:208:29","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":5665,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6289:4:29","nodeType":"FunctionDefinition","parameters":{"id":5557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5556,"mutability":"mutable","name":"a","nameLocation":"6302:1:29","nodeType":"VariableDeclaration","scope":5665,"src":"6294:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5555,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6293:11:29"},"returnParameters":{"id":5560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5559,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5665,"src":"6328:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5558,"name":"uint256","nodeType":"ElementaryTypeName","src":"6328:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6327:9:29"},"scope":6161,"src":"6280:1642:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5700,"nodeType":"Block","src":"8098:161:29","statements":[{"id":5699,"nodeType":"UncheckedBlock","src":"8108:145:29","statements":[{"assignments":[5677],"declarations":[{"constant":false,"id":5677,"mutability":"mutable","name":"result","nameLocation":"8140:6:29","nodeType":"VariableDeclaration","scope":5699,"src":"8132:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5676,"name":"uint256","nodeType":"ElementaryTypeName","src":"8132:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5681,"initialValue":{"arguments":[{"id":5679,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5668,"src":"8154:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5678,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[5665,5701],"referencedDeclaration":5665,"src":"8149:4:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8149:7:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8132:24:29"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5682,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5677,"src":"8177:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"},"id":5686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5683,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5671,"src":"8187:8:29","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5684,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5303,"src":"8199:8:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$5303_$","typeString":"type(enum Math.Rounding)"}},"id":5685,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8208:2:29","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":5301,"src":"8199:11:29","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"}},"src":"8187:23:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5687,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5677,"src":"8214:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5688,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5677,"src":"8223:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:15:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5690,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5668,"src":"8232:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:19:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8187:46:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":5694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":5695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8187:54:29","trueExpression":{"hexValue":"31","id":5693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":5696,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8186:56:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8177:65:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5675,"id":5698,"nodeType":"Return","src":"8170:72:29"}]}]},"documentation":{"id":5666,"nodeType":"StructuredDocumentation","src":"7928:89:29","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":5701,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8031:4:29","nodeType":"FunctionDefinition","parameters":{"id":5672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5668,"mutability":"mutable","name":"a","nameLocation":"8044:1:29","nodeType":"VariableDeclaration","scope":5701,"src":"8036:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5667,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5671,"mutability":"mutable","name":"rounding","nameLocation":"8056:8:29","nodeType":"VariableDeclaration","scope":5701,"src":"8047:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"},"typeName":{"id":5670,"nodeType":"UserDefinedTypeName","pathNode":{"id":5669,"name":"Rounding","nameLocations":["8047:8:29"],"nodeType":"IdentifierPath","referencedDeclaration":5303,"src":"8047:8:29"},"referencedDeclaration":5303,"src":"8047:8:29","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8035:30:29"},"returnParameters":{"id":5675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5674,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5701,"src":"8089:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5673,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8088:9:29"},"scope":6161,"src":"8022:237:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5832,"nodeType":"Block","src":"8444:922:29","statements":[{"assignments":[5710],"declarations":[{"constant":false,"id":5710,"mutability":"mutable","name":"result","nameLocation":"8462:6:29","nodeType":"VariableDeclaration","scope":5832,"src":"8454:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5709,"name":"uint256","nodeType":"ElementaryTypeName","src":"8454:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5712,"initialValue":{"hexValue":"30","id":5711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8454:18:29"},{"id":5829,"nodeType":"UncheckedBlock","src":"8482:855:29","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5713,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"8510:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":5714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8519:3:29","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8510:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8525:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8510:16:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5727,"nodeType":"IfStatement","src":"8506:99:29","trueBody":{"id":5726,"nodeType":"Block","src":"8528:77:29","statements":[{"expression":{"id":5720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5718,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"8546:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":5719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8556:3:29","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8546:13:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5721,"nodeType":"ExpressionStatement","src":"8546:13:29"},{"expression":{"id":5724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5722,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"8577:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":5723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:3:29","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8577:13:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5725,"nodeType":"ExpressionStatement","src":"8577:13:29"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5728,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"8622:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":5729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:2:29","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8622:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8622:15:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5742,"nodeType":"IfStatement","src":"8618:96:29","trueBody":{"id":5741,"nodeType":"Block","src":"8639:75:29","statements":[{"expression":{"id":5735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5733,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"8657:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":5734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8667:2:29","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8657:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5736,"nodeType":"ExpressionStatement","src":"8657:12:29"},{"expression":{"id":5739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5737,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"8687:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":5738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:2:29","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8687:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5740,"nodeType":"ExpressionStatement","src":"8687:12:29"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5743,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"8731:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":5744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8740:2:29","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8731:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8745:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8731:15:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5757,"nodeType":"IfStatement","src":"8727:96:29","trueBody":{"id":5756,"nodeType":"Block","src":"8748:75:29","statements":[{"expression":{"id":5750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5748,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"8766:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":5749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8776:2:29","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8766:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5751,"nodeType":"ExpressionStatement","src":"8766:12:29"},{"expression":{"id":5754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5752,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"8796:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":5753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:2:29","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8796:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5755,"nodeType":"ExpressionStatement","src":"8796:12:29"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5758,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"8840:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":5759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:29","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8840:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8840:15:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5772,"nodeType":"IfStatement","src":"8836:96:29","trueBody":{"id":5771,"nodeType":"Block","src":"8857:75:29","statements":[{"expression":{"id":5765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5763,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"8875:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":5764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8885:2:29","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8875:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5766,"nodeType":"ExpressionStatement","src":"8875:12:29"},{"expression":{"id":5769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5767,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"8905:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":5768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8915:2:29","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8905:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5770,"nodeType":"ExpressionStatement","src":"8905:12:29"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5773,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"8949:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":5774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:29","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8949:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8949:14:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5787,"nodeType":"IfStatement","src":"8945:93:29","trueBody":{"id":5786,"nodeType":"Block","src":"8965:73:29","statements":[{"expression":{"id":5780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5778,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"8983:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":5779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8993:1:29","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8983:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5781,"nodeType":"ExpressionStatement","src":"8983:11:29"},{"expression":{"id":5784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5782,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"9012:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":5783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9022:1:29","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9012:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5785,"nodeType":"ExpressionStatement","src":"9012:11:29"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5788,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"9055:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":5789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:29","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9055:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5802,"nodeType":"IfStatement","src":"9051:93:29","trueBody":{"id":5801,"nodeType":"Block","src":"9071:73:29","statements":[{"expression":{"id":5795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5793,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"9089:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":5794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:29","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9089:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5796,"nodeType":"ExpressionStatement","src":"9089:11:29"},{"expression":{"id":5799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5797,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"9118:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":5798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:29","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9118:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5800,"nodeType":"ExpressionStatement","src":"9118:11:29"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5803,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"9161:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":5804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:29","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9161:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5817,"nodeType":"IfStatement","src":"9157:93:29","trueBody":{"id":5816,"nodeType":"Block","src":"9177:73:29","statements":[{"expression":{"id":5810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5808,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"9195:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":5809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:29","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9195:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5811,"nodeType":"ExpressionStatement","src":"9195:11:29"},{"expression":{"id":5814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5812,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"9224:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":5813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:29","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9224:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5815,"nodeType":"ExpressionStatement","src":"9224:11:29"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5818,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"9267:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9267:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5828,"nodeType":"IfStatement","src":"9263:64:29","trueBody":{"id":5827,"nodeType":"Block","src":"9283:44:29","statements":[{"expression":{"id":5825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5823,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"9301:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":5824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9301:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5826,"nodeType":"ExpressionStatement","src":"9301:11:29"}]}}]},{"expression":{"id":5830,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"9353:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5708,"id":5831,"nodeType":"Return","src":"9346:13:29"}]},"documentation":{"id":5702,"nodeType":"StructuredDocumentation","src":"8265:113:29","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":5833,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8392:4:29","nodeType":"FunctionDefinition","parameters":{"id":5705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5704,"mutability":"mutable","name":"value","nameLocation":"8405:5:29","nodeType":"VariableDeclaration","scope":5833,"src":"8397:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5703,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8396:15:29"},"returnParameters":{"id":5708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5707,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5833,"src":"8435:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5706,"name":"uint256","nodeType":"ElementaryTypeName","src":"8435:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8434:9:29"},"scope":6161,"src":"8383:983:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5868,"nodeType":"Block","src":"9599:165:29","statements":[{"id":5867,"nodeType":"UncheckedBlock","src":"9609:149:29","statements":[{"assignments":[5845],"declarations":[{"constant":false,"id":5845,"mutability":"mutable","name":"result","nameLocation":"9641:6:29","nodeType":"VariableDeclaration","scope":5867,"src":"9633:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5844,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5849,"initialValue":{"arguments":[{"id":5847,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5836,"src":"9655:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5846,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[5833,5869],"referencedDeclaration":5833,"src":"9650:4:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9650:11:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9633:28:29"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5850,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5845,"src":"9682:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"},"id":5854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5851,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5839,"src":"9692:8:29","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5852,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5303,"src":"9704:8:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$5303_$","typeString":"type(enum Math.Rounding)"}},"id":5853,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9713:2:29","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":5301,"src":"9704:11:29","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"}},"src":"9692:23:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":5856,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5845,"src":"9724:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5858,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5836,"src":"9733:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:19:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9692:46:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":5862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9745:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":5863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9692:54:29","trueExpression":{"hexValue":"31","id":5861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9741:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":5864,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9691:56:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9682:65:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5843,"id":5866,"nodeType":"Return","src":"9675:72:29"}]}]},"documentation":{"id":5834,"nodeType":"StructuredDocumentation","src":"9372:142:29","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":5869,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9528:4:29","nodeType":"FunctionDefinition","parameters":{"id":5840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5836,"mutability":"mutable","name":"value","nameLocation":"9541:5:29","nodeType":"VariableDeclaration","scope":5869,"src":"9533:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5835,"name":"uint256","nodeType":"ElementaryTypeName","src":"9533:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5839,"mutability":"mutable","name":"rounding","nameLocation":"9557:8:29","nodeType":"VariableDeclaration","scope":5869,"src":"9548:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"},"typeName":{"id":5838,"nodeType":"UserDefinedTypeName","pathNode":{"id":5837,"name":"Rounding","nameLocations":["9548:8:29"],"nodeType":"IdentifierPath","referencedDeclaration":5303,"src":"9548:8:29"},"referencedDeclaration":5303,"src":"9548:8:29","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9532:34:29"},"returnParameters":{"id":5843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5842,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5869,"src":"9590:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5841,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9589:9:29"},"scope":6161,"src":"9519:245:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5997,"nodeType":"Block","src":"9951:828:29","statements":[{"assignments":[5878],"declarations":[{"constant":false,"id":5878,"mutability":"mutable","name":"result","nameLocation":"9969:6:29","nodeType":"VariableDeclaration","scope":5997,"src":"9961:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5877,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5880,"initialValue":{"hexValue":"30","id":5879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9978:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9961:18:29"},{"id":5994,"nodeType":"UncheckedBlock","src":"9989:761:29","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5881,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5872,"src":"10017:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":5884,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10026:2:29","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":5883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10030:2:29","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10026:6:29","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10017:15:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5897,"nodeType":"IfStatement","src":"10013:99:29","trueBody":{"id":5896,"nodeType":"Block","src":"10034:78:29","statements":[{"expression":{"id":5890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5886,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5872,"src":"10052:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":5889,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10061:2:29","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":5888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:2:29","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10061:6:29","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10052:15:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5891,"nodeType":"ExpressionStatement","src":"10052:15:29"},{"expression":{"id":5894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5892,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5878,"src":"10085:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":5893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10095:2:29","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10085:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5895,"nodeType":"ExpressionStatement","src":"10085:12:29"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5898,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5872,"src":"10129:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":5901,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:29","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":5900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10142:2:29","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10138:6:29","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10129:15:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5914,"nodeType":"IfStatement","src":"10125:99:29","trueBody":{"id":5913,"nodeType":"Block","src":"10146:78:29","statements":[{"expression":{"id":5907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5903,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5872,"src":"10164:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":5906,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:2:29","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":5905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:2:29","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:6:29","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10164:15:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5908,"nodeType":"ExpressionStatement","src":"10164:15:29"},{"expression":{"id":5911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5909,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5878,"src":"10197:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":5910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10207:2:29","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10197:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5912,"nodeType":"ExpressionStatement","src":"10197:12:29"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5915,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5872,"src":"10241:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":5918,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10250:2:29","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":5917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:29","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10250:6:29","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10241:15:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5931,"nodeType":"IfStatement","src":"10237:99:29","trueBody":{"id":5930,"nodeType":"Block","src":"10258:78:29","statements":[{"expression":{"id":5924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5920,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5872,"src":"10276:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":5923,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:29","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":5922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10289:2:29","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10285:6:29","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10276:15:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5925,"nodeType":"ExpressionStatement","src":"10276:15:29"},{"expression":{"id":5928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5926,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5878,"src":"10309:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":5927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:29","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10309:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5929,"nodeType":"ExpressionStatement","src":"10309:12:29"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5932,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5872,"src":"10353:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":5935,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10362:2:29","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":5934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10366:1:29","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10362:5:29","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10353:14:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5948,"nodeType":"IfStatement","src":"10349:96:29","trueBody":{"id":5947,"nodeType":"Block","src":"10369:76:29","statements":[{"expression":{"id":5941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5937,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5872,"src":"10387:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":5940,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10396:2:29","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":5939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:29","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10396:5:29","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10387:14:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5942,"nodeType":"ExpressionStatement","src":"10387:14:29"},{"expression":{"id":5945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5943,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5878,"src":"10419:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":5944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:1:29","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10419:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5946,"nodeType":"ExpressionStatement","src":"10419:11:29"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5949,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5872,"src":"10462:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":5952,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:2:29","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":5951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10475:1:29","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10471:5:29","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10462:14:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5965,"nodeType":"IfStatement","src":"10458:96:29","trueBody":{"id":5964,"nodeType":"Block","src":"10478:76:29","statements":[{"expression":{"id":5958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5954,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5872,"src":"10496:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":5957,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10505:2:29","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":5956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:1:29","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10505:5:29","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10496:14:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5959,"nodeType":"ExpressionStatement","src":"10496:14:29"},{"expression":{"id":5962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5960,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5878,"src":"10528:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":5961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10538:1:29","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10528:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5963,"nodeType":"ExpressionStatement","src":"10528:11:29"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5966,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5872,"src":"10571:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":5969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10580:2:29","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":5968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10584:1:29","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10580:5:29","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10571:14:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5982,"nodeType":"IfStatement","src":"10567:96:29","trueBody":{"id":5981,"nodeType":"Block","src":"10587:76:29","statements":[{"expression":{"id":5975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5971,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5872,"src":"10605:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":5974,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10614:2:29","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":5973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10618:1:29","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10614:5:29","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10605:14:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5976,"nodeType":"ExpressionStatement","src":"10605:14:29"},{"expression":{"id":5979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5977,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5878,"src":"10637:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":5978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10647:1:29","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10637:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5980,"nodeType":"ExpressionStatement","src":"10637:11:29"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5983,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5872,"src":"10680:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":5986,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:29","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":5985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10689:5:29","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10680:14:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5993,"nodeType":"IfStatement","src":"10676:64:29","trueBody":{"id":5992,"nodeType":"Block","src":"10696:44:29","statements":[{"expression":{"id":5990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5988,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5878,"src":"10714:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":5989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10724:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10714:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5991,"nodeType":"ExpressionStatement","src":"10714:11:29"}]}}]},{"expression":{"id":5995,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5878,"src":"10766:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5876,"id":5996,"nodeType":"Return","src":"10759:13:29"}]},"documentation":{"id":5870,"nodeType":"StructuredDocumentation","src":"9770:114:29","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":5998,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9898:5:29","nodeType":"FunctionDefinition","parameters":{"id":5873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5872,"mutability":"mutable","name":"value","nameLocation":"9912:5:29","nodeType":"VariableDeclaration","scope":5998,"src":"9904:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5871,"name":"uint256","nodeType":"ElementaryTypeName","src":"9904:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:15:29"},"returnParameters":{"id":5876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5875,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5998,"src":"9942:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5874,"name":"uint256","nodeType":"ElementaryTypeName","src":"9942:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9941:9:29"},"scope":6161,"src":"9889:890:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6033,"nodeType":"Block","src":"11014:165:29","statements":[{"id":6032,"nodeType":"UncheckedBlock","src":"11024:149:29","statements":[{"assignments":[6010],"declarations":[{"constant":false,"id":6010,"mutability":"mutable","name":"result","nameLocation":"11056:6:29","nodeType":"VariableDeclaration","scope":6032,"src":"11048:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6009,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6014,"initialValue":{"arguments":[{"id":6012,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6001,"src":"11071:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6011,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[5998,6034],"referencedDeclaration":5998,"src":"11065:5:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":6013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11065:12:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11048:29:29"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6015,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6010,"src":"11098:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"},"id":6019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6016,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6004,"src":"11108:8:29","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":6017,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5303,"src":"11120:8:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$5303_$","typeString":"type(enum Math.Rounding)"}},"id":6018,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11129:2:29","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":5301,"src":"11120:11:29","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"}},"src":"11108:23:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":6020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11135:2:29","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":6021,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6010,"src":"11139:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6023,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6001,"src":"11148:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:18:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11108:45:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":6027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11160:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":6028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11108:53:29","trueExpression":{"hexValue":"31","id":6026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":6029,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11107:55:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11098:64:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6008,"id":6031,"nodeType":"Return","src":"11091:71:29"}]}]},"documentation":{"id":5999,"nodeType":"StructuredDocumentation","src":"10785:143:29","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":6034,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10942:5:29","nodeType":"FunctionDefinition","parameters":{"id":6005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6001,"mutability":"mutable","name":"value","nameLocation":"10956:5:29","nodeType":"VariableDeclaration","scope":6034,"src":"10948:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6000,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6004,"mutability":"mutable","name":"rounding","nameLocation":"10972:8:29","nodeType":"VariableDeclaration","scope":6034,"src":"10963:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"},"typeName":{"id":6003,"nodeType":"UserDefinedTypeName","pathNode":{"id":6002,"name":"Rounding","nameLocations":["10963:8:29"],"nodeType":"IdentifierPath","referencedDeclaration":5303,"src":"10963:8:29"},"referencedDeclaration":5303,"src":"10963:8:29","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10947:34:29"},"returnParameters":{"id":6008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6007,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6034,"src":"11005:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6006,"name":"uint256","nodeType":"ElementaryTypeName","src":"11005:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11004:9:29"},"scope":6161,"src":"10933:246:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6120,"nodeType":"Block","src":"11493:600:29","statements":[{"assignments":[6043],"declarations":[{"constant":false,"id":6043,"mutability":"mutable","name":"result","nameLocation":"11511:6:29","nodeType":"VariableDeclaration","scope":6120,"src":"11503:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6042,"name":"uint256","nodeType":"ElementaryTypeName","src":"11503:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6045,"initialValue":{"hexValue":"30","id":6044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11520:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11503:18:29"},{"id":6117,"nodeType":"UncheckedBlock","src":"11531:533:29","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6046,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6037,"src":"11559:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":6047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11568:3:29","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11559:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11559:16:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6060,"nodeType":"IfStatement","src":"11555:98:29","trueBody":{"id":6059,"nodeType":"Block","src":"11577:76:29","statements":[{"expression":{"id":6053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6051,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6037,"src":"11595:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":6052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11605:3:29","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11595:13:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6054,"nodeType":"ExpressionStatement","src":"11595:13:29"},{"expression":{"id":6057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6055,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6043,"src":"11626:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":6056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11636:2:29","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11626:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6058,"nodeType":"ExpressionStatement","src":"11626:12:29"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6061,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6037,"src":"11670:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":6062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11679:2:29","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11670:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11684:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11670:15:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6075,"nodeType":"IfStatement","src":"11666:95:29","trueBody":{"id":6074,"nodeType":"Block","src":"11687:74:29","statements":[{"expression":{"id":6068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6066,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6037,"src":"11705:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":6067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:29","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11705:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6069,"nodeType":"ExpressionStatement","src":"11705:12:29"},{"expression":{"id":6072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6070,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6043,"src":"11735:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":6071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11745:1:29","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11735:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6073,"nodeType":"ExpressionStatement","src":"11735:11:29"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6076,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6037,"src":"11778:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":6077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11787:2:29","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11778:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11792:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11778:15:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6090,"nodeType":"IfStatement","src":"11774:95:29","trueBody":{"id":6089,"nodeType":"Block","src":"11795:74:29","statements":[{"expression":{"id":6083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6081,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6037,"src":"11813:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":6082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:2:29","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11813:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6084,"nodeType":"ExpressionStatement","src":"11813:12:29"},{"expression":{"id":6087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6085,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6043,"src":"11843:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":6086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11853:1:29","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11843:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6088,"nodeType":"ExpressionStatement","src":"11843:11:29"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6091,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6037,"src":"11886:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":6092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11895:2:29","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11886:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11900:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11886:15:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6105,"nodeType":"IfStatement","src":"11882:95:29","trueBody":{"id":6104,"nodeType":"Block","src":"11903:74:29","statements":[{"expression":{"id":6098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6096,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6037,"src":"11921:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":6097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:2:29","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11921:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6099,"nodeType":"ExpressionStatement","src":"11921:12:29"},{"expression":{"id":6102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6100,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6043,"src":"11951:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":6101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11961:1:29","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11951:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6103,"nodeType":"ExpressionStatement","src":"11951:11:29"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6106,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6037,"src":"11994:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":6107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:29","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11994:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12007:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11994:14:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6116,"nodeType":"IfStatement","src":"11990:64:29","trueBody":{"id":6115,"nodeType":"Block","src":"12010:44:29","statements":[{"expression":{"id":6113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6111,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6043,"src":"12028:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":6112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12028:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6114,"nodeType":"ExpressionStatement","src":"12028:11:29"}]}}]},{"expression":{"id":6118,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6043,"src":"12080:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6041,"id":6119,"nodeType":"Return","src":"12073:13:29"}]},"documentation":{"id":6035,"nodeType":"StructuredDocumentation","src":"11185:240:29","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":6121,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11439:6:29","nodeType":"FunctionDefinition","parameters":{"id":6038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6037,"mutability":"mutable","name":"value","nameLocation":"11454:5:29","nodeType":"VariableDeclaration","scope":6121,"src":"11446:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6036,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11445:15:29"},"returnParameters":{"id":6041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6040,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6121,"src":"11484:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6039,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:9:29"},"scope":6161,"src":"11430:663:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6159,"nodeType":"Block","src":"12329:173:29","statements":[{"id":6158,"nodeType":"UncheckedBlock","src":"12339:157:29","statements":[{"assignments":[6133],"declarations":[{"constant":false,"id":6133,"mutability":"mutable","name":"result","nameLocation":"12371:6:29","nodeType":"VariableDeclaration","scope":6158,"src":"12363:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6132,"name":"uint256","nodeType":"ElementaryTypeName","src":"12363:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6137,"initialValue":{"arguments":[{"id":6135,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6124,"src":"12387:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6134,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[6121,6160],"referencedDeclaration":6121,"src":"12380:6:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":6136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12380:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12363:30:29"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6138,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6133,"src":"12414:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"},"id":6142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6139,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6127,"src":"12424:8:29","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":6140,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5303,"src":"12436:8:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$5303_$","typeString":"type(enum Math.Rounding)"}},"id":6141,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12445:2:29","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":5301,"src":"12436:11:29","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"}},"src":"12424:23:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":6143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6144,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6133,"src":"12457:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":6145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12466:1:29","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12457:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6147,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12456:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:17:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6149,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6124,"src":"12471:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:25:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12424:52:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":6153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12483:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":6154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12424:60:29","trueExpression":{"hexValue":"31","id":6152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12479:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":6155,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12423:62:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12414:71:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6131,"id":6157,"nodeType":"Return","src":"12407:78:29"}]}]},"documentation":{"id":6122,"nodeType":"StructuredDocumentation","src":"12099:143:29","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":6160,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12256:6:29","nodeType":"FunctionDefinition","parameters":{"id":6128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6124,"mutability":"mutable","name":"value","nameLocation":"12271:5:29","nodeType":"VariableDeclaration","scope":6160,"src":"12263:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6123,"name":"uint256","nodeType":"ElementaryTypeName","src":"12263:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6127,"mutability":"mutable","name":"rounding","nameLocation":"12287:8:29","nodeType":"VariableDeclaration","scope":6160,"src":"12278:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"},"typeName":{"id":6126,"nodeType":"UserDefinedTypeName","pathNode":{"id":6125,"name":"Rounding","nameLocations":["12278:8:29"],"nodeType":"IdentifierPath","referencedDeclaration":5303,"src":"12278:8:29"},"referencedDeclaration":5303,"src":"12278:8:29","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5303","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12262:34:29"},"returnParameters":{"id":6131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6130,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6160,"src":"12320:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6129,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12319:9:29"},"scope":6161,"src":"12247:255:29","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":6162,"src":"202:12302:29","usedErrors":[]}],"src":"103:12402:29"},"id":29},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","exportedSymbols":{"SafeMath":[6473]},"id":6474,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6163,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:30"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeMath","contractDependencies":[],"contractKind":"library","documentation":{"id":6164,"nodeType":"StructuredDocumentation","src":"285:196:30","text":" @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."},"fullyImplemented":true,"id":6473,"linearizedBaseContracts":[6473],"name":"SafeMath","nameLocation":"490:8:30","nodeType":"ContractDefinition","nodes":[{"body":{"id":6195,"nodeType":"Block","src":"717:140:30","statements":[{"id":6194,"nodeType":"UncheckedBlock","src":"727:124:30","statements":[{"assignments":[6177],"declarations":[{"constant":false,"id":6177,"mutability":"mutable","name":"c","nameLocation":"759:1:30","nodeType":"VariableDeclaration","scope":6194,"src":"751:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6176,"name":"uint256","nodeType":"ElementaryTypeName","src":"751:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6181,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6178,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6167,"src":"763:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":6179,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6169,"src":"767:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"763:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"751:17:30"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6182,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6177,"src":"786:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6183,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6167,"src":"790:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"786:5:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6189,"nodeType":"IfStatement","src":"782:28:30","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":6185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"801:5:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":6186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"808:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":6187,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"800:10:30","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":6175,"id":6188,"nodeType":"Return","src":"793:17:30"}},{"expression":{"components":[{"hexValue":"74727565","id":6190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"832:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":6191,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6177,"src":"838:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6192,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"831:9:30","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":6175,"id":6193,"nodeType":"Return","src":"824:16:30"}]}]},"documentation":{"id":6165,"nodeType":"StructuredDocumentation","src":"505:131:30","text":" @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":6196,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"650:6:30","nodeType":"FunctionDefinition","parameters":{"id":6170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6167,"mutability":"mutable","name":"a","nameLocation":"665:1:30","nodeType":"VariableDeclaration","scope":6196,"src":"657:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6166,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6169,"mutability":"mutable","name":"b","nameLocation":"676:1:30","nodeType":"VariableDeclaration","scope":6196,"src":"668:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6168,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:22:30"},"returnParameters":{"id":6175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6172,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6196,"src":"702:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6171,"name":"bool","nodeType":"ElementaryTypeName","src":"702:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6174,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6196,"src":"708:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6173,"name":"uint256","nodeType":"ElementaryTypeName","src":"708:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"701:15:30"},"scope":6473,"src":"641:216:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6223,"nodeType":"Block","src":"1078:113:30","statements":[{"id":6222,"nodeType":"UncheckedBlock","src":"1088:97:30","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6208,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6201,"src":"1116:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":6209,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6199,"src":"1120:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1116:5:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6215,"nodeType":"IfStatement","src":"1112:28:30","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":6211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1131:5:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":6212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1138:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":6213,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1130:10:30","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":6207,"id":6214,"nodeType":"Return","src":"1123:17:30"}},{"expression":{"components":[{"hexValue":"74727565","id":6216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1162:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6217,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6199,"src":"1168:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":6218,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6201,"src":"1172:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1168:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6220,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1161:13:30","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":6207,"id":6221,"nodeType":"Return","src":"1154:20:30"}]}]},"documentation":{"id":6197,"nodeType":"StructuredDocumentation","src":"863:134:30","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":6224,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"1011:6:30","nodeType":"FunctionDefinition","parameters":{"id":6202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6199,"mutability":"mutable","name":"a","nameLocation":"1026:1:30","nodeType":"VariableDeclaration","scope":6224,"src":"1018:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6198,"name":"uint256","nodeType":"ElementaryTypeName","src":"1018:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6201,"mutability":"mutable","name":"b","nameLocation":"1037:1:30","nodeType":"VariableDeclaration","scope":6224,"src":"1029:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6200,"name":"uint256","nodeType":"ElementaryTypeName","src":"1029:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1017:22:30"},"returnParameters":{"id":6207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6204,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6224,"src":"1063:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6203,"name":"bool","nodeType":"ElementaryTypeName","src":"1063:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6206,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6224,"src":"1069:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6205,"name":"uint256","nodeType":"ElementaryTypeName","src":"1069:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1062:15:30"},"scope":6473,"src":"1002:189:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6265,"nodeType":"Block","src":"1415:417:30","statements":[{"id":6264,"nodeType":"UncheckedBlock","src":"1425:401:30","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6236,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6227,"src":"1683:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1688:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1683:6:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6243,"nodeType":"IfStatement","src":"1679:28:30","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":6239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1699:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":6240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1705:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":6241,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1698:9:30","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":6235,"id":6242,"nodeType":"Return","src":"1691:16:30"}},{"assignments":[6245],"declarations":[{"constant":false,"id":6245,"mutability":"mutable","name":"c","nameLocation":"1729:1:30","nodeType":"VariableDeclaration","scope":6264,"src":"1721:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6244,"name":"uint256","nodeType":"ElementaryTypeName","src":"1721:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6249,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6246,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6227,"src":"1733:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":6247,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6229,"src":"1737:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1733:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1721:17:30"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6250,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6245,"src":"1756:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":6251,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6227,"src":"1760:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1756:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6253,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6229,"src":"1765:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1756:10:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6259,"nodeType":"IfStatement","src":"1752:33:30","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":6255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1776:5:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":6256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1783:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":6257,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1775:10:30","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":6235,"id":6258,"nodeType":"Return","src":"1768:17:30"}},{"expression":{"components":[{"hexValue":"74727565","id":6260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1807:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":6261,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6245,"src":"1813:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6262,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1806:9:30","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":6235,"id":6263,"nodeType":"Return","src":"1799:16:30"}]}]},"documentation":{"id":6225,"nodeType":"StructuredDocumentation","src":"1197:137:30","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":6266,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1348:6:30","nodeType":"FunctionDefinition","parameters":{"id":6230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6227,"mutability":"mutable","name":"a","nameLocation":"1363:1:30","nodeType":"VariableDeclaration","scope":6266,"src":"1355:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6226,"name":"uint256","nodeType":"ElementaryTypeName","src":"1355:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6229,"mutability":"mutable","name":"b","nameLocation":"1374:1:30","nodeType":"VariableDeclaration","scope":6266,"src":"1366:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6228,"name":"uint256","nodeType":"ElementaryTypeName","src":"1366:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1354:22:30"},"returnParameters":{"id":6235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6232,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6266,"src":"1400:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6231,"name":"bool","nodeType":"ElementaryTypeName","src":"1400:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6234,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6266,"src":"1406:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6233,"name":"uint256","nodeType":"ElementaryTypeName","src":"1406:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1399:15:30"},"scope":6473,"src":"1339:493:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6293,"nodeType":"Block","src":"2057:114:30","statements":[{"id":6292,"nodeType":"UncheckedBlock","src":"2067:98:30","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6278,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6271,"src":"2095:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2100:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2095:6:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6285,"nodeType":"IfStatement","src":"2091:29:30","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":6281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2111:5:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":6282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2118:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":6283,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2110:10:30","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":6277,"id":6284,"nodeType":"Return","src":"2103:17:30"}},{"expression":{"components":[{"hexValue":"74727565","id":6286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2142:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6287,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6269,"src":"2148:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":6288,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6271,"src":"2152:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2148:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6290,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2141:13:30","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":6277,"id":6291,"nodeType":"Return","src":"2134:20:30"}]}]},"documentation":{"id":6267,"nodeType":"StructuredDocumentation","src":"1838:138:30","text":" @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":6294,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1990:6:30","nodeType":"FunctionDefinition","parameters":{"id":6272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6269,"mutability":"mutable","name":"a","nameLocation":"2005:1:30","nodeType":"VariableDeclaration","scope":6294,"src":"1997:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6268,"name":"uint256","nodeType":"ElementaryTypeName","src":"1997:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6271,"mutability":"mutable","name":"b","nameLocation":"2016:1:30","nodeType":"VariableDeclaration","scope":6294,"src":"2008:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6270,"name":"uint256","nodeType":"ElementaryTypeName","src":"2008:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1996:22:30"},"returnParameters":{"id":6277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6274,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6294,"src":"2042:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6273,"name":"bool","nodeType":"ElementaryTypeName","src":"2042:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6276,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6294,"src":"2048:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6275,"name":"uint256","nodeType":"ElementaryTypeName","src":"2048:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2041:15:30"},"scope":6473,"src":"1981:190:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6321,"nodeType":"Block","src":"2406:114:30","statements":[{"id":6320,"nodeType":"UncheckedBlock","src":"2416:98:30","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6306,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6299,"src":"2444:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2449:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2444:6:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6313,"nodeType":"IfStatement","src":"2440:29:30","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":6309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2460:5:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":6310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2467:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":6311,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2459:10:30","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":6305,"id":6312,"nodeType":"Return","src":"2452:17:30"}},{"expression":{"components":[{"hexValue":"74727565","id":6314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2491:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6315,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6297,"src":"2497:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":6316,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6299,"src":"2501:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2497:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6318,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2490:13:30","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":6305,"id":6319,"nodeType":"Return","src":"2483:20:30"}]}]},"documentation":{"id":6295,"nodeType":"StructuredDocumentation","src":"2177:148:30","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":6322,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2339:6:30","nodeType":"FunctionDefinition","parameters":{"id":6300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6297,"mutability":"mutable","name":"a","nameLocation":"2354:1:30","nodeType":"VariableDeclaration","scope":6322,"src":"2346:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6296,"name":"uint256","nodeType":"ElementaryTypeName","src":"2346:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6299,"mutability":"mutable","name":"b","nameLocation":"2365:1:30","nodeType":"VariableDeclaration","scope":6322,"src":"2357:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6298,"name":"uint256","nodeType":"ElementaryTypeName","src":"2357:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2345:22:30"},"returnParameters":{"id":6305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6302,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6322,"src":"2391:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6301,"name":"bool","nodeType":"ElementaryTypeName","src":"2391:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6304,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6322,"src":"2397:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6303,"name":"uint256","nodeType":"ElementaryTypeName","src":"2397:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2390:15:30"},"scope":6473,"src":"2330:190:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6336,"nodeType":"Block","src":"2822:29:30","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6332,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6325,"src":"2839:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":6333,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6327,"src":"2843:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2839:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6331,"id":6335,"nodeType":"Return","src":"2832:12:30"}]},"documentation":{"id":6323,"nodeType":"StructuredDocumentation","src":"2526:224:30","text":" @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":6337,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"2764:3:30","nodeType":"FunctionDefinition","parameters":{"id":6328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6325,"mutability":"mutable","name":"a","nameLocation":"2776:1:30","nodeType":"VariableDeclaration","scope":6337,"src":"2768:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6324,"name":"uint256","nodeType":"ElementaryTypeName","src":"2768:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6327,"mutability":"mutable","name":"b","nameLocation":"2787:1:30","nodeType":"VariableDeclaration","scope":6337,"src":"2779:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6326,"name":"uint256","nodeType":"ElementaryTypeName","src":"2779:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2767:22:30"},"returnParameters":{"id":6331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6330,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6337,"src":"2813:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6329,"name":"uint256","nodeType":"ElementaryTypeName","src":"2813:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2812:9:30"},"scope":6473,"src":"2755:96:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6351,"nodeType":"Block","src":"3189:29:30","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6347,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6340,"src":"3206:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":6348,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6342,"src":"3210:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3206:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6346,"id":6350,"nodeType":"Return","src":"3199:12:30"}]},"documentation":{"id":6338,"nodeType":"StructuredDocumentation","src":"2857:260:30","text":" @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":6352,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"3131:3:30","nodeType":"FunctionDefinition","parameters":{"id":6343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6340,"mutability":"mutable","name":"a","nameLocation":"3143:1:30","nodeType":"VariableDeclaration","scope":6352,"src":"3135:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6339,"name":"uint256","nodeType":"ElementaryTypeName","src":"3135:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6342,"mutability":"mutable","name":"b","nameLocation":"3154:1:30","nodeType":"VariableDeclaration","scope":6352,"src":"3146:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6341,"name":"uint256","nodeType":"ElementaryTypeName","src":"3146:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3134:22:30"},"returnParameters":{"id":6346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6345,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6352,"src":"3180:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6344,"name":"uint256","nodeType":"ElementaryTypeName","src":"3180:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3179:9:30"},"scope":6473,"src":"3122:96:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6366,"nodeType":"Block","src":"3532:29:30","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6362,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6355,"src":"3549:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":6363,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6357,"src":"3553:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3549:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6361,"id":6365,"nodeType":"Return","src":"3542:12:30"}]},"documentation":{"id":6353,"nodeType":"StructuredDocumentation","src":"3224:236:30","text":" @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":6367,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"3474:3:30","nodeType":"FunctionDefinition","parameters":{"id":6358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6355,"mutability":"mutable","name":"a","nameLocation":"3486:1:30","nodeType":"VariableDeclaration","scope":6367,"src":"3478:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6354,"name":"uint256","nodeType":"ElementaryTypeName","src":"3478:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6357,"mutability":"mutable","name":"b","nameLocation":"3497:1:30","nodeType":"VariableDeclaration","scope":6367,"src":"3489:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6356,"name":"uint256","nodeType":"ElementaryTypeName","src":"3489:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3477:22:30"},"returnParameters":{"id":6361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6360,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6367,"src":"3523:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6359,"name":"uint256","nodeType":"ElementaryTypeName","src":"3523:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3522:9:30"},"scope":6473,"src":"3465:96:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6381,"nodeType":"Block","src":"3917:29:30","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6377,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6370,"src":"3934:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":6378,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6372,"src":"3938:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3934:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6376,"id":6380,"nodeType":"Return","src":"3927:12:30"}]},"documentation":{"id":6368,"nodeType":"StructuredDocumentation","src":"3567:278:30","text":" @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."},"id":6382,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"3859:3:30","nodeType":"FunctionDefinition","parameters":{"id":6373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6370,"mutability":"mutable","name":"a","nameLocation":"3871:1:30","nodeType":"VariableDeclaration","scope":6382,"src":"3863:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6369,"name":"uint256","nodeType":"ElementaryTypeName","src":"3863:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6372,"mutability":"mutable","name":"b","nameLocation":"3882:1:30","nodeType":"VariableDeclaration","scope":6382,"src":"3874:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6371,"name":"uint256","nodeType":"ElementaryTypeName","src":"3874:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3862:22:30"},"returnParameters":{"id":6376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6375,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6382,"src":"3908:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6374,"name":"uint256","nodeType":"ElementaryTypeName","src":"3908:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3907:9:30"},"scope":6473,"src":"3850:96:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6396,"nodeType":"Block","src":"4466:29:30","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6392,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6385,"src":"4483:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":6393,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6387,"src":"4487:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4483:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6391,"id":6395,"nodeType":"Return","src":"4476:12:30"}]},"documentation":{"id":6383,"nodeType":"StructuredDocumentation","src":"3952:442:30","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":6397,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"4408:3:30","nodeType":"FunctionDefinition","parameters":{"id":6388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6385,"mutability":"mutable","name":"a","nameLocation":"4420:1:30","nodeType":"VariableDeclaration","scope":6397,"src":"4412:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6384,"name":"uint256","nodeType":"ElementaryTypeName","src":"4412:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6387,"mutability":"mutable","name":"b","nameLocation":"4431:1:30","nodeType":"VariableDeclaration","scope":6397,"src":"4423:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6386,"name":"uint256","nodeType":"ElementaryTypeName","src":"4423:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4411:22:30"},"returnParameters":{"id":6391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6390,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6397,"src":"4457:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6389,"name":"uint256","nodeType":"ElementaryTypeName","src":"4457:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4456:9:30"},"scope":6473,"src":"4399:96:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6421,"nodeType":"Block","src":"5084:106:30","statements":[{"id":6420,"nodeType":"UncheckedBlock","src":"5094:90:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6410,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6402,"src":"5126:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":6411,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6400,"src":"5131:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5126:6:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":6413,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6404,"src":"5134:12:30","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":6409,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5118:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5118:29:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6415,"nodeType":"ExpressionStatement","src":"5118:29:30"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6416,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6400,"src":"5168:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":6417,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6402,"src":"5172:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5168:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6408,"id":6419,"nodeType":"Return","src":"5161:12:30"}]}]},"documentation":{"id":6398,"nodeType":"StructuredDocumentation","src":"4501:453:30","text":" @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":6422,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"4968:3:30","nodeType":"FunctionDefinition","parameters":{"id":6405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6400,"mutability":"mutable","name":"a","nameLocation":"4989:1:30","nodeType":"VariableDeclaration","scope":6422,"src":"4981:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6399,"name":"uint256","nodeType":"ElementaryTypeName","src":"4981:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6402,"mutability":"mutable","name":"b","nameLocation":"5008:1:30","nodeType":"VariableDeclaration","scope":6422,"src":"5000:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6401,"name":"uint256","nodeType":"ElementaryTypeName","src":"5000:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6404,"mutability":"mutable","name":"errorMessage","nameLocation":"5033:12:30","nodeType":"VariableDeclaration","scope":6422,"src":"5019:26:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6403,"name":"string","nodeType":"ElementaryTypeName","src":"5019:6:30","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4971:80:30"},"returnParameters":{"id":6408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6407,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6422,"src":"5075:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6406,"name":"uint256","nodeType":"ElementaryTypeName","src":"5075:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5074:9:30"},"scope":6473,"src":"4959:231:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6446,"nodeType":"Block","src":"5799:105:30","statements":[{"id":6445,"nodeType":"UncheckedBlock","src":"5809:89:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6435,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6427,"src":"5841:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5845:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5841:5:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":6438,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6429,"src":"5848:12:30","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":6434,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5833:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5833:28:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6440,"nodeType":"ExpressionStatement","src":"5833:28:30"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6441,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6425,"src":"5882:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":6442,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6427,"src":"5886:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5882:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6433,"id":6444,"nodeType":"Return","src":"5875:12:30"}]}]},"documentation":{"id":6423,"nodeType":"StructuredDocumentation","src":"5196:473:30","text":" @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":6447,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"5683:3:30","nodeType":"FunctionDefinition","parameters":{"id":6430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6425,"mutability":"mutable","name":"a","nameLocation":"5704:1:30","nodeType":"VariableDeclaration","scope":6447,"src":"5696:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6424,"name":"uint256","nodeType":"ElementaryTypeName","src":"5696:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6427,"mutability":"mutable","name":"b","nameLocation":"5723:1:30","nodeType":"VariableDeclaration","scope":6447,"src":"5715:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6426,"name":"uint256","nodeType":"ElementaryTypeName","src":"5715:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6429,"mutability":"mutable","name":"errorMessage","nameLocation":"5748:12:30","nodeType":"VariableDeclaration","scope":6447,"src":"5734:26:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6428,"name":"string","nodeType":"ElementaryTypeName","src":"5734:6:30","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5686:80:30"},"returnParameters":{"id":6433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6432,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6447,"src":"5790:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6431,"name":"uint256","nodeType":"ElementaryTypeName","src":"5790:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5789:9:30"},"scope":6473,"src":"5674:230:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6471,"nodeType":"Block","src":"6675:105:30","statements":[{"id":6470,"nodeType":"UncheckedBlock","src":"6685:89:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6460,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6452,"src":"6717:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6721:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6717:5:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":6463,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6454,"src":"6724:12:30","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":6459,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6709:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6709:28:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6465,"nodeType":"ExpressionStatement","src":"6709:28:30"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6466,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6450,"src":"6758:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":6467,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6452,"src":"6762:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6758:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6458,"id":6469,"nodeType":"Return","src":"6751:12:30"}]}]},"documentation":{"id":6448,"nodeType":"StructuredDocumentation","src":"5910:635:30","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":6472,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"6559:3:30","nodeType":"FunctionDefinition","parameters":{"id":6455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6450,"mutability":"mutable","name":"a","nameLocation":"6580:1:30","nodeType":"VariableDeclaration","scope":6472,"src":"6572:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6449,"name":"uint256","nodeType":"ElementaryTypeName","src":"6572:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6452,"mutability":"mutable","name":"b","nameLocation":"6599:1:30","nodeType":"VariableDeclaration","scope":6472,"src":"6591:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6451,"name":"uint256","nodeType":"ElementaryTypeName","src":"6591:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6454,"mutability":"mutable","name":"errorMessage","nameLocation":"6624:12:30","nodeType":"VariableDeclaration","scope":6472,"src":"6610:26:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6453,"name":"string","nodeType":"ElementaryTypeName","src":"6610:6:30","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6562:80:30"},"returnParameters":{"id":6458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6457,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6472,"src":"6666:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6456,"name":"uint256","nodeType":"ElementaryTypeName","src":"6666:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6665:9:30"},"scope":6473,"src":"6550:230:30","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":6474,"src":"482:6300:30","usedErrors":[]}],"src":"107:6676:30"},"id":30},"contracts/FundingContract.sol":{"ast":{"absolutePath":"contracts/FundingContract.sol","exportedSymbols":{"Address":[4989],"Context":[5011],"Counters":[5085],"ERC165":[5284],"ERC721":[4498],"FundingContract":[6800],"FundingContract__NotEnoughETH":[6483],"FundingContract__NotGroupFunding":[6485],"FundingContract__TransferFailed":[6481],"IERC165":[5296],"IERC721":[4614],"IERC721Metadata":[4659],"IERC721Receiver":[4632],"Math":[6161],"Ownable":[3553],"SafeMath":[6473],"Strings":[5260]},"id":6801,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6475,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"31:23:31"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":6476,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6801,"sourceUnit":4499,"src":"56:57:31","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":6477,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6801,"sourceUnit":3554,"src":"114:52:31","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","file":"@openzeppelin/contracts/utils/Counters.sol","id":6478,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6801,"sourceUnit":5086,"src":"167:52:31","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","file":"@openzeppelin/contracts/utils/math/SafeMath.sol","id":6479,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6801,"sourceUnit":6474,"src":"220:57:31","symbolAliases":[],"unitAlias":""},{"errorSelector":"9af25e5d","id":6481,"name":"FundingContract__TransferFailed","nameLocation":"286:31:31","nodeType":"ErrorDefinition","parameters":{"id":6480,"nodeType":"ParameterList","parameters":[],"src":"317:2:31"},"src":"280:40:31"},{"errorSelector":"cf463cf9","id":6483,"name":"FundingContract__NotEnoughETH","nameLocation":"327:29:31","nodeType":"ErrorDefinition","parameters":{"id":6482,"nodeType":"ParameterList","parameters":[],"src":"356:2:31"},"src":"321:38:31"},{"errorSelector":"ad1faa72","id":6485,"name":"FundingContract__NotGroupFunding","nameLocation":"366:32:31","nodeType":"ErrorDefinition","parameters":{"id":6484,"nodeType":"ParameterList","parameters":[],"src":"398:2:31"},"src":"360:41:31"},{"abstract":false,"baseContracts":[{"baseName":{"id":6486,"name":"ERC721","nameLocations":["431:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":4498,"src":"431:6:31"},"id":6487,"nodeType":"InheritanceSpecifier","src":"431:6:31"},{"baseName":{"id":6488,"name":"Ownable","nameLocations":["439:7:31"],"nodeType":"IdentifierPath","referencedDeclaration":3553,"src":"439:7:31"},"id":6489,"nodeType":"InheritanceSpecifier","src":"439:7:31"}],"canonicalName":"FundingContract","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":6800,"linearizedBaseContracts":[6800,3553,4498,4659,4614,5284,5296,5011],"name":"FundingContract","nameLocation":"412:15:31","nodeType":"ContractDefinition","nodes":[{"global":false,"id":6492,"libraryName":{"id":6490,"name":"SafeMath","nameLocations":["460:8:31"],"nodeType":"IdentifierPath","referencedDeclaration":6473,"src":"460:8:31"},"nodeType":"UsingForDirective","src":"454:27:31","typeName":{"id":6491,"name":"uint256","nodeType":"ElementaryTypeName","src":"473:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"global":false,"id":6496,"libraryName":{"id":6493,"name":"Counters","nameLocations":["492:8:31"],"nodeType":"IdentifierPath","referencedDeclaration":5085,"src":"492:8:31"},"nodeType":"UsingForDirective","src":"486:36:31","typeName":{"id":6495,"nodeType":"UserDefinedTypeName","pathNode":{"id":6494,"name":"Counters.Counter","nameLocations":["505:8:31","514:7:31"],"nodeType":"IdentifierPath","referencedDeclaration":5017,"src":"505:16:31"},"referencedDeclaration":5017,"src":"505:16:31","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage_ptr","typeString":"struct Counters.Counter"}}},{"constant":false,"id":6499,"mutability":"mutable","name":"_tokenIds","nameLocation":"552:9:31","nodeType":"VariableDeclaration","scope":6800,"src":"527:34:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage","typeString":"struct Counters.Counter"},"typeName":{"id":6498,"nodeType":"UserDefinedTypeName","pathNode":{"id":6497,"name":"Counters.Counter","nameLocations":["527:8:31","536:7:31"],"nodeType":"IdentifierPath","referencedDeclaration":5017,"src":"527:16:31"},"referencedDeclaration":5017,"src":"527:16:31","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"private"},{"constant":false,"id":6502,"mutability":"mutable","name":"_withdrawers","nameLocation":"592:12:31","nodeType":"VariableDeclaration","scope":6800,"src":"567:37:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage","typeString":"struct Counters.Counter"},"typeName":{"id":6501,"nodeType":"UserDefinedTypeName","pathNode":{"id":6500,"name":"Counters.Counter","nameLocations":["567:8:31","576:7:31"],"nodeType":"IdentifierPath","referencedDeclaration":5017,"src":"567:16:31"},"referencedDeclaration":5017,"src":"567:16:31","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"private"},{"constant":false,"id":6504,"mutability":"mutable","name":"s_totalAmount","nameLocation":"627:13:31","nodeType":"VariableDeclaration","scope":6800,"src":"611:29:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6503,"name":"uint256","nodeType":"ElementaryTypeName","src":"611:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":6506,"mutability":"mutable","name":"s_withdrawalFee","nameLocation":"662:15:31","nodeType":"VariableDeclaration","scope":6800,"src":"646:31:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6505,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":6508,"mutability":"mutable","name":"s_vestingPeriod","nameLocation":"699:15:31","nodeType":"VariableDeclaration","scope":6800,"src":"683:31:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6507,"name":"uint256","nodeType":"ElementaryTypeName","src":"683:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":6510,"mutability":"mutable","name":"_isGroupWithdrawal","nameLocation":"733:18:31","nodeType":"VariableDeclaration","scope":6800,"src":"720:31:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6509,"name":"bool","nodeType":"ElementaryTypeName","src":"720:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"constant":false,"id":6514,"mutability":"mutable","name":"s_addressToAmountFunded","nameLocation":"794:23:31","nodeType":"VariableDeclaration","scope":6800,"src":"758:59:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":6513,"keyType":{"id":6511,"name":"address","nodeType":"ElementaryTypeName","src":"766:7:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"758:27:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":6512,"name":"uint256","nodeType":"ElementaryTypeName","src":"777:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":6517,"mutability":"mutable","name":"s_funders","nameLocation":"833:9:31","nodeType":"VariableDeclaration","scope":6800,"src":"823:19:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[]"},"typeName":{"baseType":{"id":6515,"name":"address","nodeType":"ElementaryTypeName","src":"823:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6516,"nodeType":"ArrayTypeName","src":"823:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":6523,"mutability":"mutable","name":"s_requestForWithdrawal","nameLocation":"902:22:31","nodeType":"VariableDeclaration","scope":6800,"src":"849:75:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(uint256 => mapping(address => bool))"},"typeName":{"id":6522,"keyType":{"id":6518,"name":"uint256","nodeType":"ElementaryTypeName","src":"857:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"849:44:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(uint256 => mapping(address => bool))"},"valueType":{"id":6521,"keyType":{"id":6519,"name":"address","nodeType":"ElementaryTypeName","src":"876:7:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"868:24:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":6520,"name":"bool","nodeType":"ElementaryTypeName","src":"887:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":6533,"nodeType":"Block","src":"966:115:31","statements":[{"condition":{"id":6526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"979:19:31","subExpression":{"id":6525,"name":"_isGroupWithdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6510,"src":"980:18:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6531,"nodeType":"IfStatement","src":"976:89:31","trueBody":{"id":6530,"nodeType":"Block","src":"999:66:31","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6527,"name":"FundingContract__NotGroupFunding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6485,"src":"1020:32:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1020:34:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6529,"nodeType":"RevertStatement","src":"1013:41:31"}]}},{"id":6532,"nodeType":"PlaceholderStatement","src":"1073:1:31"}]},"id":6534,"name":"onlyGroupFunding","nameLocation":"947:16:31","nodeType":"ModifierDefinition","parameters":{"id":6524,"nodeType":"ParameterList","parameters":[],"src":"963:2:31"},"src":"938:143:31","virtual":false,"visibility":"internal"},{"body":{"id":6565,"nodeType":"Block","src":"1266:176:31","statements":[{"expression":{"id":6551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6549,"name":"s_totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6504,"src":"1277:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6550,"name":"totalFunding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6536,"src":"1293:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1277:28:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6552,"nodeType":"ExpressionStatement","src":"1277:28:31"},{"expression":{"id":6555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6553,"name":"s_withdrawalFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6506,"src":"1315:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6554,"name":"withdrawalFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6538,"src":"1333:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1315:31:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6556,"nodeType":"ExpressionStatement","src":"1315:31:31"},{"expression":{"id":6559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6557,"name":"s_vestingPeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6508,"src":"1356:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6558,"name":"vestingPeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"1374:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1356:31:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6560,"nodeType":"ExpressionStatement","src":"1356:31:31"},{"expression":{"id":6563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6561,"name":"_isGroupWithdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6510,"src":"1397:18:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6562,"name":"isGroupWithdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6542,"src":"1418:17:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1397:38:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6564,"nodeType":"ExpressionStatement","src":"1397:38:31"}]},"id":6566,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"46756e64696e67436f6e7472616374546f6b656e","id":6545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1236:22:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_225589ef6c530108359a44e08d1ca5777aa1865cf3339915d2fed202f9e9ac81","typeString":"literal_string \"FundingContractToken\""},"value":"FundingContractToken"},{"hexValue":"464354","id":6546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1260:5:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_5f49baa48982f6e13ba91cc7c0d6d6faee7fa56311d47355ec780df45f8b2838","typeString":"literal_string \"FCT\""},"value":"FCT"}],"id":6547,"kind":"baseConstructorSpecifier","modifierName":{"id":6544,"name":"ERC721","nameLocations":["1229:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":4498,"src":"1229:6:31"},"nodeType":"ModifierInvocation","src":"1229:37:31"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6536,"mutability":"mutable","name":"totalFunding","nameLocation":"1116:12:31","nodeType":"VariableDeclaration","scope":6566,"src":"1108:20:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6535,"name":"uint256","nodeType":"ElementaryTypeName","src":"1108:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6538,"mutability":"mutable","name":"withdrawalFee","nameLocation":"1146:13:31","nodeType":"VariableDeclaration","scope":6566,"src":"1138:21:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6537,"name":"uint256","nodeType":"ElementaryTypeName","src":"1138:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6540,"mutability":"mutable","name":"vestingPeriod","nameLocation":"1177:13:31","nodeType":"VariableDeclaration","scope":6566,"src":"1169:21:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6539,"name":"uint256","nodeType":"ElementaryTypeName","src":"1169:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6542,"mutability":"mutable","name":"isGroupWithdrawal","nameLocation":"1205:17:31","nodeType":"VariableDeclaration","scope":6566,"src":"1200:22:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6541,"name":"bool","nodeType":"ElementaryTypeName","src":"1200:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1098:130:31"},"returnParameters":{"id":6548,"nodeType":"ParameterList","parameters":[],"src":"1266:0:31"},"scope":6800,"src":"1087:355:31","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6615,"nodeType":"Block","src":"1488:419:31","statements":[{"assignments":[6570],"declarations":[{"constant":false,"id":6570,"mutability":"mutable","name":"minFundingAmount","nameLocation":"1515:16:31","nodeType":"VariableDeclaration","scope":6615,"src":"1507:24:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6569,"name":"uint256","nodeType":"ElementaryTypeName","src":"1507:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6573,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":6571,"name":"getMinimumFundingAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6743,"src":"1534:23:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":6572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1534:25:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1507:52:31"},{"assignments":[6575],"declarations":[{"constant":false,"id":6575,"mutability":"mutable","name":"currentTokenId","nameLocation":"1577:14:31","nodeType":"VariableDeclaration","scope":6615,"src":"1569:22:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6574,"name":"uint256","nodeType":"ElementaryTypeName","src":"1569:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6579,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6576,"name":"_tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6499,"src":"1594:9:31","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage","typeString":"struct Counters.Counter storage ref"}},"id":6577,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1604:7:31","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":5029,"src":"1594:17:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$5017_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$5017_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":6578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1594:19:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1569:44:31"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6580,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1627:3:31","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1631:5:31","memberName":"value","nodeType":"MemberAccess","src":"1627:9:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":6582,"name":"minFundingAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6570,"src":"1640:16:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1627:29:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6588,"nodeType":"IfStatement","src":"1624:96:31","trueBody":{"id":6587,"nodeType":"Block","src":"1657:63:31","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6584,"name":"FundingContract__NotEnoughETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6483,"src":"1678:29:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1678:31:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6586,"nodeType":"RevertStatement","src":"1671:38:31"}]}},{"expression":{"id":6595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6589,"name":"s_addressToAmountFunded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6514,"src":"1729:23:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6592,"indexExpression":{"expression":{"id":6590,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1753:3:31","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1757:6:31","memberName":"sender","nodeType":"MemberAccess","src":"1753:10:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1729:35:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":6593,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1767:3:31","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1771:5:31","memberName":"value","nodeType":"MemberAccess","src":"1767:9:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1729:47:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6596,"nodeType":"ExpressionStatement","src":"1729:47:31"},{"expression":{"arguments":[{"expression":{"id":6600,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1801:3:31","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1805:6:31","memberName":"sender","nodeType":"MemberAccess","src":"1801:10:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6597,"name":"s_funders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6517,"src":"1786:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":6599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1796:4:31","memberName":"push","nodeType":"MemberAccess","src":"1786:14:31","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$bound_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":6602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1786:26:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6603,"nodeType":"ExpressionStatement","src":"1786:26:31"},{"expression":{"arguments":[{"expression":{"id":6605,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1832:3:31","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1836:6:31","memberName":"sender","nodeType":"MemberAccess","src":"1832:10:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6607,"name":"currentTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6575,"src":"1844:14:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6604,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[4048,4077],"referencedDeclaration":4048,"src":"1822:9:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":6608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1822:37:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6609,"nodeType":"ExpressionStatement","src":"1822:37:31"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6610,"name":"_tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6499,"src":"1869:9:31","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage","typeString":"struct Counters.Counter storage ref"}},"id":6612,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1879:9:31","memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":5043,"src":"1869:19:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$5017_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$5017_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":6613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1869:21:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6614,"nodeType":"ExpressionStatement","src":"1869:21:31"}]},"functionSelector":"e2c41dbc","id":6616,"implemented":true,"kind":"function","modifiers":[],"name":"depositFunds","nameLocation":"1459:12:31","nodeType":"FunctionDefinition","parameters":{"id":6567,"nodeType":"ParameterList","parameters":[],"src":"1471:2:31"},"returnParameters":{"id":6568,"nodeType":"ParameterList","parameters":[],"src":"1488:0:31"},"scope":6800,"src":"1450:457:31","stateMutability":"payable","virtual":false,"visibility":"public"},{"baseFunctions":[3758],"body":{"id":6624,"nodeType":"Block","src":"2000:61:31","statements":[]},"functionSelector":"c87b56dd","id":6625,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"1922:8:31","nodeType":"FunctionDefinition","overrides":{"id":6620,"nodeType":"OverrideSpecifier","overrides":[],"src":"1968:8:31"},"parameters":{"id":6619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6618,"mutability":"mutable","name":"tokenId","nameLocation":"1939:7:31","nodeType":"VariableDeclaration","scope":6625,"src":"1931:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6617,"name":"uint256","nodeType":"ElementaryTypeName","src":"1931:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1930:17:31"},"returnParameters":{"id":6623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6622,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6625,"src":"1986:13:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6621,"name":"string","nodeType":"ElementaryTypeName","src":"1986:6:31","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1985:15:31"},"scope":6800,"src":"1913:148:31","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":6628,"nodeType":"Block","src":"2091:59:31","statements":[]},"functionSelector":"4e71d92d","id":6629,"implemented":true,"kind":"function","modifiers":[],"name":"claim","nameLocation":"2076:5:31","nodeType":"FunctionDefinition","parameters":{"id":6626,"nodeType":"ParameterList","parameters":[],"src":"2081:2:31"},"returnParameters":{"id":6627,"nodeType":"ParameterList","parameters":[],"src":"2091:0:31"},"scope":6800,"src":"2067:83:31","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6650,"nodeType":"Block","src":"2227:101:31","statements":[{"expression":{"id":6643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":6636,"name":"s_requestForWithdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6523,"src":"2237:22:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(uint256 => mapping(address => bool))"}},"id":6640,"indexExpression":{"id":6637,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6631,"src":"2260:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2237:31:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":6641,"indexExpression":{"expression":{"id":6638,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2269:3:31","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2273:6:31","memberName":"sender","nodeType":"MemberAccess","src":"2269:10:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2237:43:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":6642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2283:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2237:50:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6644,"nodeType":"ExpressionStatement","src":"2237:50:31"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6645,"name":"_withdrawers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6502,"src":"2297:12:31","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage","typeString":"struct Counters.Counter storage ref"}},"id":6647,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2310:9:31","memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":5043,"src":"2297:22:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$5017_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$5017_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":6648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2297:24:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6649,"nodeType":"ExpressionStatement","src":"2297:24:31"}]},"functionSelector":"1095941e","id":6651,"implemented":true,"kind":"function","modifiers":[{"id":6634,"kind":"modifierInvocation","modifierName":{"id":6633,"name":"onlyGroupFunding","nameLocations":["2210:16:31"],"nodeType":"IdentifierPath","referencedDeclaration":6534,"src":"2210:16:31"},"nodeType":"ModifierInvocation","src":"2210:16:31"}],"name":"requestForWithdrawal","nameLocation":"2165:20:31","nodeType":"FunctionDefinition","parameters":{"id":6632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6631,"mutability":"mutable","name":"tokenId","nameLocation":"2194:7:31","nodeType":"VariableDeclaration","scope":6651,"src":"2186:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6630,"name":"uint256","nodeType":"ElementaryTypeName","src":"2186:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2185:17:31"},"returnParameters":{"id":6635,"nodeType":"ParameterList","parameters":[],"src":"2227:0:31"},"scope":6800,"src":"2156:172:31","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6654,"nodeType":"Block","src":"2407:2:31","statements":[]},"id":6655,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6652,"nodeType":"ParameterList","parameters":[],"src":"2387:2:31"},"returnParameters":{"id":6653,"nodeType":"ParameterList","parameters":[],"src":"2407:0:31"},"scope":6800,"src":"2380:29:31","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":6688,"nodeType":"Block","src":"2479:247:31","statements":[{"assignments":[6663],"declarations":[{"constant":false,"id":6663,"mutability":"mutable","name":"numberOfWithdrawers","nameLocation":"2497:19:31","nodeType":"VariableDeclaration","scope":6688,"src":"2489:27:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6662,"name":"uint256","nodeType":"ElementaryTypeName","src":"2489:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6667,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6664,"name":"_withdrawers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6502,"src":"2519:12:31","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$5017_storage","typeString":"struct Counters.Counter storage ref"}},"id":6665,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2532:7:31","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":5029,"src":"2519:20:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$5017_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$5017_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":6666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2519:22:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2489:52:31"},{"assignments":[6669],"declarations":[{"constant":false,"id":6669,"mutability":"mutable","name":"withdrawalLimit","nameLocation":"2559:15:31","nodeType":"VariableDeclaration","scope":6688,"src":"2551:23:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6668,"name":"uint256","nodeType":"ElementaryTypeName","src":"2551:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6678,"initialValue":{"arguments":[{"hexValue":"313030","id":6676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2606:3:31","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}],"expression":{"arguments":[{"hexValue":"3630","id":6673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2598:2:31","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"60"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"}],"expression":{"expression":{"id":6670,"name":"s_funders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6517,"src":"2577:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":6671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2587:6:31","memberName":"length","nodeType":"MemberAccess","src":"2577:16:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2594:3:31","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":6367,"src":"2577:20:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":6674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2577:24:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2602:3:31","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":6382,"src":"2577:28:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":6677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2577:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2551:59:31"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6679,"name":"numberOfWithdrawers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6663,"src":"2623:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":6680,"name":"withdrawalLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6669,"src":"2646:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2623:38:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6685,"nodeType":"IfStatement","src":"2620:78:31","trueBody":{"id":6684,"nodeType":"Block","src":"2662:36:31","statements":[{"expression":{"hexValue":"74727565","id":6682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2683:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":6661,"id":6683,"nodeType":"Return","src":"2676:11:31"}]}},{"expression":{"hexValue":"66616c7365","id":6686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2714:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":6661,"id":6687,"nodeType":"Return","src":"2707:12:31"}]},"functionSelector":"7dc4c2ba","id":6689,"implemented":true,"kind":"function","modifiers":[{"id":6658,"kind":"modifierInvocation","modifierName":{"id":6657,"name":"onlyGroupFunding","nameLocations":["2449:16:31"],"nodeType":"IdentifierPath","referencedDeclaration":6534,"src":"2449:16:31"},"nodeType":"ModifierInvocation","src":"2449:16:31"}],"name":"withdrawalCheck","nameLocation":"2424:15:31","nodeType":"FunctionDefinition","parameters":{"id":6656,"nodeType":"ParameterList","parameters":[],"src":"2439:2:31"},"returnParameters":{"id":6661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6660,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6689,"src":"2474:4:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6659,"name":"bool","nodeType":"ElementaryTypeName","src":"2474:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2473:6:31"},"scope":6800,"src":"2415:311:31","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6731,"nodeType":"Block","src":"2775:339:31","statements":[{"condition":{"id":6694,"name":"_isGroupWithdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6510,"src":"2788:18:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6702,"nodeType":"IfStatement","src":"2785:118:31","trueBody":{"id":6701,"nodeType":"Block","src":"2807:96:31","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":6696,"name":"withdrawalCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6689,"src":"2829:15:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_bool_$","typeString":"function () returns (bool)"}},"id":6697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2829:17:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5468657265206973206e6f206d616a6f7269747920617070726f76616c20746f207769746864726177","id":6698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2848:43:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_1996ccb6adb7d105883c503be6c0fca8b239a35cc290cf1105e26098b6525e2f","typeString":"literal_string \"There is no majority approval to withdraw\""},"value":"There is no majority approval to withdraw"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1996ccb6adb7d105883c503be6c0fca8b239a35cc290cf1105e26098b6525e2f","typeString":"literal_string \"There is no majority approval to withdraw\""}],"id":6695,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2821:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2821:71:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6700,"nodeType":"ExpressionStatement","src":"2821:71:31"}]}},{"assignments":[6704],"declarations":[{"constant":false,"id":6704,"mutability":"mutable","name":"amount","nameLocation":"2920:6:31","nodeType":"VariableDeclaration","scope":6731,"src":"2912:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6703,"name":"uint256","nodeType":"ElementaryTypeName","src":"2912:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6710,"initialValue":{"expression":{"arguments":[{"id":6707,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2937:4:31","typeDescriptions":{"typeIdentifier":"t_contract$_FundingContract_$6800","typeString":"contract FundingContract"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_FundingContract_$6800","typeString":"contract FundingContract"}],"id":6706,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2929:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6705,"name":"address","nodeType":"ElementaryTypeName","src":"2929:7:31","typeDescriptions":{}}},"id":6708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2929:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2943:7:31","memberName":"balance","nodeType":"MemberAccess","src":"2929:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2912:38:31"},{"assignments":[6712,null],"declarations":[{"constant":false,"id":6712,"mutability":"mutable","name":"success","nameLocation":"2966:7:31","nodeType":"VariableDeclaration","scope":6731,"src":"2961:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6711,"name":"bool","nodeType":"ElementaryTypeName","src":"2961:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":6723,"initialValue":{"arguments":[{"hexValue":"","id":6721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3018:2:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[{"expression":{"id":6715,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2987:3:31","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2991:6:31","memberName":"sender","nodeType":"MemberAccess","src":"2987:10:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6714,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2979:8:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":6713,"name":"address","nodeType":"ElementaryTypeName","src":"2979:8:31","stateMutability":"payable","typeDescriptions":{}}},"id":6717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2979:19:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":6718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2999:4:31","memberName":"call","nodeType":"MemberAccess","src":"2979:24:31","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":6720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":6719,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6704,"src":"3010:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2979:38:31","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":6722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2979:42:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2960:61:31"},{"condition":{"id":6725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3034:8:31","subExpression":{"id":6724,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6712,"src":"3035:7:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6730,"nodeType":"IfStatement","src":"3031:77:31","trueBody":{"id":6729,"nodeType":"Block","src":"3043:65:31","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6726,"name":"FundingContract__TransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6481,"src":"3064:31:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3064:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6728,"nodeType":"RevertStatement","src":"3057:40:31"}]}}]},"functionSelector":"24600fc3","id":6732,"implemented":true,"kind":"function","modifiers":[{"id":6692,"kind":"modifierInvocation","modifierName":{"id":6691,"name":"onlyOwner","nameLocations":["2766:9:31"],"nodeType":"IdentifierPath","referencedDeclaration":3472,"src":"2766:9:31"},"nodeType":"ModifierInvocation","src":"2766:9:31"}],"name":"withdrawFunds","nameLocation":"2743:13:31","nodeType":"FunctionDefinition","parameters":{"id":6690,"nodeType":"ParameterList","parameters":[],"src":"2756:2:31"},"returnParameters":{"id":6693,"nodeType":"ParameterList","parameters":[],"src":"2775:0:31"},"scope":6800,"src":"2734:380:31","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6742,"nodeType":"Block","src":"3183:58:31","statements":[{"expression":{"arguments":[{"id":6739,"name":"s_vestingPeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6508,"src":"3218:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6737,"name":"s_totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6504,"src":"3200:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3214:3:31","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":6382,"src":"3200:17:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":6740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3200:34:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6736,"id":6741,"nodeType":"Return","src":"3193:41:31"}]},"functionSelector":"db06941e","id":6743,"implemented":true,"kind":"function","modifiers":[],"name":"getMinimumFundingAmount","nameLocation":"3129:23:31","nodeType":"FunctionDefinition","parameters":{"id":6733,"nodeType":"ParameterList","parameters":[],"src":"3152:2:31"},"returnParameters":{"id":6736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6735,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6743,"src":"3175:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6734,"name":"uint256","nodeType":"ElementaryTypeName","src":"3175:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3174:9:31"},"scope":6800,"src":"3120:121:31","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":6750,"nodeType":"Block","src":"3301:37:31","statements":[{"expression":{"id":6748,"name":"s_totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6504,"src":"3318:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6747,"id":6749,"nodeType":"Return","src":"3311:20:31"}]},"functionSelector":"65ac4341","id":6751,"implemented":true,"kind":"function","modifiers":[],"name":"getTotalAmount","nameLocation":"3256:14:31","nodeType":"FunctionDefinition","parameters":{"id":6744,"nodeType":"ParameterList","parameters":[],"src":"3270:2:31"},"returnParameters":{"id":6747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6746,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6751,"src":"3293:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6745,"name":"uint256","nodeType":"ElementaryTypeName","src":"3293:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3292:9:31"},"scope":6800,"src":"3247:91:31","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":6758,"nodeType":"Block","src":"3401:39:31","statements":[{"expression":{"id":6756,"name":"s_withdrawalFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6506,"src":"3418:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6755,"id":6757,"nodeType":"Return","src":"3411:22:31"}]},"functionSelector":"d8e159f8","id":6759,"implemented":true,"kind":"function","modifiers":[],"name":"getWithdrawalFee","nameLocation":"3354:16:31","nodeType":"FunctionDefinition","parameters":{"id":6752,"nodeType":"ParameterList","parameters":[],"src":"3370:2:31"},"returnParameters":{"id":6755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6754,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6759,"src":"3393:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6753,"name":"uint256","nodeType":"ElementaryTypeName","src":"3393:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3392:9:31"},"scope":6800,"src":"3345:95:31","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":6766,"nodeType":"Block","src":"3502:39:31","statements":[{"expression":{"id":6764,"name":"s_vestingPeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6508,"src":"3519:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6763,"id":6765,"nodeType":"Return","src":"3512:22:31"}]},"functionSelector":"1096cb79","id":6767,"implemented":true,"kind":"function","modifiers":[],"name":"getVestingPeriod","nameLocation":"3455:16:31","nodeType":"FunctionDefinition","parameters":{"id":6760,"nodeType":"ParameterList","parameters":[],"src":"3471:2:31"},"returnParameters":{"id":6763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6762,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6767,"src":"3494:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6761,"name":"uint256","nodeType":"ElementaryTypeName","src":"3494:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3493:9:31"},"scope":6800,"src":"3446:95:31","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":6774,"nodeType":"Block","src":"3604:42:31","statements":[{"expression":{"id":6772,"name":"_isGroupWithdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6510,"src":"3621:18:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6771,"id":6773,"nodeType":"Return","src":"3614:25:31"}]},"functionSelector":"9c885eb3","id":6775,"implemented":true,"kind":"function","modifiers":[],"name":"getIsGroupWithdrawal","nameLocation":"3556:20:31","nodeType":"FunctionDefinition","parameters":{"id":6768,"nodeType":"ParameterList","parameters":[],"src":"3576:2:31"},"returnParameters":{"id":6771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6770,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6775,"src":"3599:4:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6769,"name":"bool","nodeType":"ElementaryTypeName","src":"3599:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3598:6:31"},"scope":6800,"src":"3547:99:31","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":6786,"nodeType":"Block","src":"3730:55:31","statements":[{"expression":{"baseExpression":{"id":6782,"name":"s_addressToAmountFunded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6514,"src":"3747:23:31","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6784,"indexExpression":{"id":6783,"name":"funder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6777,"src":"3771:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3747:31:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6781,"id":6785,"nodeType":"Return","src":"3740:38:31"}]},"functionSelector":"0343fb25","id":6787,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressToAmountFunded","nameLocation":"3661:24:31","nodeType":"FunctionDefinition","parameters":{"id":6778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6777,"mutability":"mutable","name":"funder","nameLocation":"3694:6:31","nodeType":"VariableDeclaration","scope":6787,"src":"3686:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6776,"name":"address","nodeType":"ElementaryTypeName","src":"3686:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3685:16:31"},"returnParameters":{"id":6781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6780,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6787,"src":"3722:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6779,"name":"uint256","nodeType":"ElementaryTypeName","src":"3722:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3721:9:31"},"scope":6800,"src":"3652:133:31","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":6798,"nodeType":"Block","src":"3853:40:31","statements":[{"expression":{"baseExpression":{"id":6794,"name":"s_funders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6517,"src":"3870:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":6796,"indexExpression":{"id":6795,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6789,"src":"3880:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3870:16:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":6793,"id":6797,"nodeType":"Return","src":"3863:23:31"}]},"functionSelector":"d7b4750c","id":6799,"implemented":true,"kind":"function","modifiers":[],"name":"getFunder","nameLocation":"3800:9:31","nodeType":"FunctionDefinition","parameters":{"id":6790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6789,"mutability":"mutable","name":"index","nameLocation":"3818:5:31","nodeType":"VariableDeclaration","scope":6799,"src":"3810:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6788,"name":"uint256","nodeType":"ElementaryTypeName","src":"3810:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3809:15:31"},"returnParameters":{"id":6793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6792,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6799,"src":"3845:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6791,"name":"address","nodeType":"ElementaryTypeName","src":"3845:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3844:9:31"},"scope":6800,"src":"3791:102:31","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":6801,"src":"403:3495:31","usedErrors":[6481,6483,6485]}],"src":"31:3867:31"},"id":31},"contracts/PGFFactory.sol":{"ast":{"absolutePath":"contracts/PGFFactory.sol","exportedSymbols":{"AccessControlEnumerableUpgradeable":[144],"AccessControlUpgradeable":[480],"Address":[4989],"AddressUpgradeable":[1629],"Context":[5011],"ContextUpgradeable":[1671],"Counters":[5085],"ERC165":[5284],"ERC165Upgradeable":[1950],"ERC1967UpgradeUpgradeable":[957],"ERC721":[4498],"EnumerableSetUpgradeable":[3440],"FundingContract":[6800],"FundingContract__NotEnoughETH":[6483],"FundingContract__NotGroupFunding":[6485],"FundingContract__TransferFailed":[6481],"IAccessControlEnumerableUpgradeable":[505],"IAccessControlUpgradeable":[578],"IBeaconUpgradeable":[967],"IERC165":[5296],"IERC165Upgradeable":[1962],"IERC1822ProxiableUpgradeable":[588],"IERC721":[4614],"IERC721Metadata":[4659],"IERC721Receiver":[4632],"Initializable":[1136],"Math":[6161],"MathUpgradeable":[2827],"Ownable":[3553],"PGFFactory":[7058],"ReentrancyGuardUpgradeable":[1345],"SafeMath":[6473],"StorageSlotUpgradeable":[1731],"Strings":[5260],"StringsUpgradeable":[1906],"UUPSUpgradeable":[1272]},"id":7059,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6802,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"31:23:32"},{"absolutePath":"contracts/FundingContract.sol","file":"./FundingContract.sol","id":6803,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7059,"sourceUnit":6801,"src":"56:31:32","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol","id":6804,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7059,"sourceUnit":145,"src":"88:91:32","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","id":6805,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7059,"sourceUnit":1346,"src":"180:85:32","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","id":6806,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7059,"sourceUnit":1273,"src":"266:77:32","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":6807,"name":"AccessControlEnumerableUpgradeable","nameLocations":["368:34:32"],"nodeType":"IdentifierPath","referencedDeclaration":144,"src":"368:34:32"},"id":6808,"nodeType":"InheritanceSpecifier","src":"368:34:32"},{"baseName":{"id":6809,"name":"ReentrancyGuardUpgradeable","nameLocations":["404:26:32"],"nodeType":"IdentifierPath","referencedDeclaration":1345,"src":"404:26:32"},"id":6810,"nodeType":"InheritanceSpecifier","src":"404:26:32"},{"baseName":{"id":6811,"name":"UUPSUpgradeable","nameLocations":["432:15:32"],"nodeType":"IdentifierPath","referencedDeclaration":1272,"src":"432:15:32"},"id":6812,"nodeType":"InheritanceSpecifier","src":"432:15:32"}],"canonicalName":"PGFFactory","contractDependencies":[6800],"contractKind":"contract","fullyImplemented":true,"id":7058,"linearizedBaseContracts":[7058,1272,957,588,1345,144,480,1950,1962,505,578,1671,1136],"name":"PGFFactory","nameLocation":"354:10:32","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"9faeebd0","id":6814,"mutability":"mutable","name":"s_creationFee","nameLocation":"491:13:32","nodeType":"VariableDeclaration","scope":7058,"src":"476:28:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6813,"name":"uint256","nodeType":"ElementaryTypeName","src":"476:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"1d4718e6","id":6816,"mutability":"mutable","name":"s_payoutAddress","nameLocation":"525:15:32","nodeType":"VariableDeclaration","scope":7058,"src":"510:30:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6815,"name":"address","nodeType":"ElementaryTypeName","src":"510:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"5926a6b4","id":6818,"mutability":"mutable","name":"s_fundingId","nameLocation":"561:11:32","nodeType":"VariableDeclaration","scope":7058,"src":"546:26:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6817,"name":"uint256","nodeType":"ElementaryTypeName","src":"546:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"id":6822,"mutability":"mutable","name":"s_fundingIdToAddress","nameLocation":"611:20:32","nodeType":"VariableDeclaration","scope":7058,"src":"578:53:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":6821,"keyType":{"id":6819,"name":"uint","nodeType":"ElementaryTypeName","src":"586:4:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"578:24:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":6820,"name":"address","nodeType":"ElementaryTypeName","src":"594:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"functionSelector":"c5e97dd7","id":6824,"mutability":"mutable","name":"s_contractBalance","nameLocation":"652:17:32","nodeType":"VariableDeclaration","scope":7058,"src":"637:32:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6823,"name":"uint256","nodeType":"ElementaryTypeName","src":"637:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":true,"functionSelector":"a465aa88","id":6829,"mutability":"constant","name":"PAYOUTADDRESS_ROLE","nameLocation":"730:18:32","nodeType":"VariableDeclaration","scope":7058,"src":"706:76:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6825,"name":"bytes32","nodeType":"ElementaryTypeName","src":"706:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5041594f5554414444524553535f524f4c45","id":6827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"761:20:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_e52b516296e3e9bcbfa19b643b4121ced2583c73a88061a902874f43b47e19bc","typeString":"literal_string \"PAYOUTADDRESS_ROLE\""},"value":"PAYOUTADDRESS_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_e52b516296e3e9bcbfa19b643b4121ced2583c73a88061a902874f43b47e19bc","typeString":"literal_string \"PAYOUTADDRESS_ROLE\""}],"id":6826,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"751:9:32","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":6828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"751:31:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"ddc490ef","id":6834,"mutability":"constant","name":"CREATIONFEE_ROLE","nameLocation":"812:16:32","nodeType":"VariableDeclaration","scope":7058,"src":"788:72:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6830,"name":"bytes32","nodeType":"ElementaryTypeName","src":"788:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4352454154494f4e4645455f524f4c45","id":6832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"841:18:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_c2d029cf524959bb85323c198b4987efbf030ca3846804983133f9ad924acd09","typeString":"literal_string \"CREATIONFEE_ROLE\""},"value":"CREATIONFEE_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c2d029cf524959bb85323c198b4987efbf030ca3846804983133f9ad924acd09","typeString":"literal_string \"CREATIONFEE_ROLE\""}],"id":6831,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"831:9:32","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":6833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"831:29:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"anonymous":false,"eventSelector":"6ca0ec3fed271d8510ec145b359d6599483fb259ffddf66cd5987074e2a1993f","id":6844,"name":"FundingCreated","nameLocation":"887:14:32","nodeType":"EventDefinition","parameters":{"id":6843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6836,"indexed":true,"mutability":"mutable","name":"contractAddress","nameLocation":"928:15:32","nodeType":"VariableDeclaration","scope":6844,"src":"912:31:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6835,"name":"address","nodeType":"ElementaryTypeName","src":"912:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6838,"indexed":true,"mutability":"mutable","name":"totalFunding","nameLocation":"969:12:32","nodeType":"VariableDeclaration","scope":6844,"src":"953:28:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6837,"name":"uint256","nodeType":"ElementaryTypeName","src":"953:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6840,"indexed":true,"mutability":"mutable","name":"vestingPeriod","nameLocation":"1007:13:32","nodeType":"VariableDeclaration","scope":6844,"src":"991:29:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6839,"name":"uint256","nodeType":"ElementaryTypeName","src":"991:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6842,"indexed":false,"mutability":"mutable","name":"withdrawalFee","nameLocation":"1038:13:32","nodeType":"VariableDeclaration","scope":6844,"src":"1030:21:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6841,"name":"uint256","nodeType":"ElementaryTypeName","src":"1030:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"902:155:32"},"src":"881:177:32"},{"anonymous":false,"eventSelector":"6cca423c6ffc06e62a0acc433965e074b11c28479b0449250ce3ff65ac9e39fe","id":6850,"name":"Withdrawed","nameLocation":"1070:10:32","nodeType":"EventDefinition","parameters":{"id":6849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6846,"indexed":true,"mutability":"mutable","name":"payoutAddress","nameLocation":"1107:13:32","nodeType":"VariableDeclaration","scope":6850,"src":"1091:29:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6845,"name":"address","nodeType":"ElementaryTypeName","src":"1091:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6848,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"1146:6:32","nodeType":"VariableDeclaration","scope":6850,"src":"1130:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6847,"name":"uint256","nodeType":"ElementaryTypeName","src":"1130:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1081:77:32"},"src":"1064:95:32"},{"anonymous":false,"eventSelector":"b472bc245cc56131a253d64c0fd5cf333aaacde67bf4571c077aa32150256e21","id":6854,"name":"CreationFeeChanged","nameLocation":"1171:18:32","nodeType":"EventDefinition","parameters":{"id":6853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6852,"indexed":true,"mutability":"mutable","name":"newCreationFee","nameLocation":"1216:14:32","nodeType":"VariableDeclaration","scope":6854,"src":"1200:30:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6851,"name":"uint256","nodeType":"ElementaryTypeName","src":"1200:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1190:46:32"},"src":"1165:72:32"},{"anonymous":false,"eventSelector":"90789b797e56b4b4a2e6d1b0314f3d6e97d13098db43d6cb694dc1961a764dea","id":6858,"name":"PayoutAddressChanged","nameLocation":"1249:20:32","nodeType":"EventDefinition","parameters":{"id":6857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6856,"indexed":true,"mutability":"mutable","name":"newPayoutAddress","nameLocation":"1296:16:32","nodeType":"VariableDeclaration","scope":6858,"src":"1280:32:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6855,"name":"address","nodeType":"ElementaryTypeName","src":"1280:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1270:48:32"},"src":"1243:76:32"},{"body":{"id":6869,"nodeType":"Block","src":"1368:118:32","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6861,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1386:3:32","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1390:5:32","memberName":"value","nodeType":"MemberAccess","src":"1386:9:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":6863,"name":"s_creationFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6814,"src":"1398:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1386:25:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45746865722073656e742073686f756c6420626520657175616c206f72206d6f7265207468616e206372656174696f6e2066656573","id":6865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1412:55:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_21415e4349d1d27609f971b65ed4c87aef0e304d0705032b247c442bd4ec2072","typeString":"literal_string \"Ether sent should be equal or more than creation fees\""},"value":"Ether sent should be equal or more than creation fees"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_21415e4349d1d27609f971b65ed4c87aef0e304d0705032b247c442bd4ec2072","typeString":"literal_string \"Ether sent should be equal or more than creation fees\""}],"id":6860,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1378:7:32","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1378:90:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6867,"nodeType":"ExpressionStatement","src":"1378:90:32"},{"id":6868,"nodeType":"PlaceholderStatement","src":"1478:1:32"}]},"id":6870,"name":"isEnoughEther","nameLocation":"1352:13:32","nodeType":"ModifierDefinition","parameters":{"id":6859,"nodeType":"ParameterList","parameters":[],"src":"1365:2:32"},"src":"1343:143:32","virtual":false,"visibility":"internal"},{"body":{"id":6897,"nodeType":"Block","src":"1576:164:32","statements":[{"expression":{"id":6881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6879,"name":"s_creationFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6814,"src":"1586:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6880,"name":"_creationFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6872,"src":"1602:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1586:28:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6882,"nodeType":"ExpressionStatement","src":"1586:28:32"},{"expression":{"id":6885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6883,"name":"s_payoutAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6816,"src":"1624:15:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6884,"name":"_payoutAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6874,"src":"1642:14:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1624:32:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6886,"nodeType":"ExpressionStatement","src":"1624:32:32"},{"expression":{"id":6889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6887,"name":"s_fundingId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6818,"src":"1666:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":6888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1680:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1666:15:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6890,"nodeType":"ExpressionStatement","src":"1666:15:32"},{"expression":{"arguments":[{"id":6892,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"1702:18:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":6893,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1722:3:32","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:32","memberName":"sender","nodeType":"MemberAccess","src":"1722:10:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6891,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[114],"referencedDeclaration":114,"src":"1691:10:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":6895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1691:42:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6896,"nodeType":"ExpressionStatement","src":"1691:42:32"}]},"functionSelector":"da35a26f","id":6898,"implemented":true,"kind":"function","modifiers":[{"id":6877,"kind":"modifierInvocation","modifierName":{"id":6876,"name":"initializer","nameLocations":["1557:11:32"],"nodeType":"IdentifierPath","referencedDeclaration":1038,"src":"1557:11:32"},"nodeType":"ModifierInvocation","src":"1557:11:32"}],"name":"initialize","nameLocation":"1500:10:32","nodeType":"FunctionDefinition","parameters":{"id":6875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6872,"mutability":"mutable","name":"_creationFee","nameLocation":"1519:12:32","nodeType":"VariableDeclaration","scope":6898,"src":"1511:20:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6871,"name":"uint256","nodeType":"ElementaryTypeName","src":"1511:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6874,"mutability":"mutable","name":"_payoutAddress","nameLocation":"1541:14:32","nodeType":"VariableDeclaration","scope":6898,"src":"1533:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6873,"name":"address","nodeType":"ElementaryTypeName","src":"1533:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1510:46:32"},"returnParameters":{"id":6878,"nodeType":"ParameterList","parameters":[],"src":"1576:0:32"},"scope":7058,"src":"1491:249:32","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1266],"body":{"id":6907,"nodeType":"Block","src":"1829:2:32","statements":[]},"id":6908,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6904,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"1809:18:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":6905,"kind":"modifierInvocation","modifierName":{"id":6903,"name":"onlyRole","nameLocations":["1800:8:32"],"nodeType":"IdentifierPath","referencedDeclaration":198,"src":"1800:8:32"},"nodeType":"ModifierInvocation","src":"1800:28:32"}],"name":"_authorizeUpgrade","nameLocation":"1755:17:32","nodeType":"FunctionDefinition","overrides":{"id":6902,"nodeType":"OverrideSpecifier","overrides":[],"src":"1791:8:32"},"parameters":{"id":6901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6900,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6908,"src":"1773:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6899,"name":"address","nodeType":"ElementaryTypeName","src":"1773:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1772:9:32"},"returnParameters":{"id":6906,"nodeType":"ParameterList","parameters":[],"src":"1829:0:32"},"scope":7058,"src":"1746:85:32","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6960,"nodeType":"Block","src":"2011:369:32","statements":[{"assignments":[6923],"declarations":[{"constant":false,"id":6923,"mutability":"mutable","name":"fundingContract","nameLocation":"2037:15:32","nodeType":"VariableDeclaration","scope":6960,"src":"2021:31:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_FundingContract_$6800","typeString":"contract FundingContract"},"typeName":{"id":6922,"nodeType":"UserDefinedTypeName","pathNode":{"id":6921,"name":"FundingContract","nameLocations":["2021:15:32"],"nodeType":"IdentifierPath","referencedDeclaration":6800,"src":"2021:15:32"},"referencedDeclaration":6800,"src":"2021:15:32","typeDescriptions":{"typeIdentifier":"t_contract$_FundingContract_$6800","typeString":"contract FundingContract"}},"visibility":"internal"}],"id":6932,"initialValue":{"arguments":[{"id":6927,"name":"_totalFunding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6910,"src":"2075:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6928,"name":"_withdrawalFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6912,"src":"2089:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6929,"name":"_vestingPeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6914,"src":"2104:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6930,"name":"_isGroupWithdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6916,"src":"2119:18:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"2055:19:32","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_bool_$returns$_t_contract$_FundingContract_$6800_$","typeString":"function (uint256,uint256,uint256,bool) returns (contract FundingContract)"},"typeName":{"id":6925,"nodeType":"UserDefinedTypeName","pathNode":{"id":6924,"name":"FundingContract","nameLocations":["2059:15:32"],"nodeType":"IdentifierPath","referencedDeclaration":6800,"src":"2059:15:32"},"referencedDeclaration":6800,"src":"2059:15:32","typeDescriptions":{"typeIdentifier":"t_contract$_FundingContract_$6800","typeString":"contract FundingContract"}}},"id":6931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2055:83:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_FundingContract_$6800","typeString":"contract FundingContract"}},"nodeType":"VariableDeclarationStatement","src":"2021:117:32"},{"expression":{"id":6940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6933,"name":"s_fundingIdToAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6822,"src":"2148:20:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":6935,"indexExpression":{"id":6934,"name":"s_fundingId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6818,"src":"2169:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2148:33:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6938,"name":"fundingContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6923,"src":"2192:15:32","typeDescriptions":{"typeIdentifier":"t_contract$_FundingContract_$6800","typeString":"contract FundingContract"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_FundingContract_$6800","typeString":"contract FundingContract"}],"id":6937,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2184:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6936,"name":"address","nodeType":"ElementaryTypeName","src":"2184:7:32","typeDescriptions":{}}},"id":6939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2184:24:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2148:60:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6941,"nodeType":"ExpressionStatement","src":"2148:60:32"},{"expression":{"id":6943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2218:13:32","subExpression":{"id":6942,"name":"s_fundingId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6818,"src":"2218:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6944,"nodeType":"ExpressionStatement","src":"2218:13:32"},{"expression":{"id":6948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6945,"name":"s_contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6824,"src":"2241:17:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":6946,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2262:3:32","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2266:5:32","memberName":"value","nodeType":"MemberAccess","src":"2262:9:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2241:30:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6949,"nodeType":"ExpressionStatement","src":"2241:30:32"},{"eventCall":{"arguments":[{"arguments":[{"id":6953,"name":"fundingContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6923,"src":"2309:15:32","typeDescriptions":{"typeIdentifier":"t_contract$_FundingContract_$6800","typeString":"contract FundingContract"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_FundingContract_$6800","typeString":"contract FundingContract"}],"id":6952,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2301:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6951,"name":"address","nodeType":"ElementaryTypeName","src":"2301:7:32","typeDescriptions":{}}},"id":6954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2301:24:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6955,"name":"_totalFunding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6910,"src":"2327:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6956,"name":"_vestingPeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6914,"src":"2342:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6957,"name":"_withdrawalFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6912,"src":"2358:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6950,"name":"FundingCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6844,"src":"2286:14:32","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256,uint256)"}},"id":6958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2286:87:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6959,"nodeType":"EmitStatement","src":"2281:92:32"}]},"functionSelector":"7c9c3c28","id":6961,"implemented":true,"kind":"function","modifiers":[{"id":6919,"kind":"modifierInvocation","modifierName":{"id":6918,"name":"isEnoughEther","nameLocations":["1997:13:32"],"nodeType":"IdentifierPath","referencedDeclaration":6870,"src":"1997:13:32"},"nodeType":"ModifierInvocation","src":"1997:13:32"}],"name":"createFunding","nameLocation":"1871:13:32","nodeType":"FunctionDefinition","parameters":{"id":6917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6910,"mutability":"mutable","name":"_totalFunding","nameLocation":"1893:13:32","nodeType":"VariableDeclaration","scope":6961,"src":"1885:21:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6909,"name":"uint256","nodeType":"ElementaryTypeName","src":"1885:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6912,"mutability":"mutable","name":"_withdrawalFee","nameLocation":"1916:14:32","nodeType":"VariableDeclaration","scope":6961,"src":"1908:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6911,"name":"uint256","nodeType":"ElementaryTypeName","src":"1908:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6914,"mutability":"mutable","name":"_vestingPeriod","nameLocation":"1940:14:32","nodeType":"VariableDeclaration","scope":6961,"src":"1932:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6913,"name":"uint256","nodeType":"ElementaryTypeName","src":"1932:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6916,"mutability":"mutable","name":"_isGroupWithdrawal","nameLocation":"1960:18:32","nodeType":"VariableDeclaration","scope":6961,"src":"1955:23:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6915,"name":"bool","nodeType":"ElementaryTypeName","src":"1955:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1884:95:32"},"returnParameters":{"id":6920,"nodeType":"ParameterList","parameters":[],"src":"2011:0:32"},"scope":7058,"src":"1862:518:32","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":7000,"nodeType":"Block","src":"2428:333:32","statements":[{"assignments":[6967],"declarations":[{"constant":false,"id":6967,"mutability":"mutable","name":"payoutAddress","nameLocation":"2446:13:32","nodeType":"VariableDeclaration","scope":7000,"src":"2438:21:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6966,"name":"address","nodeType":"ElementaryTypeName","src":"2438:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":6969,"initialValue":{"id":6968,"name":"s_payoutAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6816,"src":"2462:15:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2438:39:32"},{"assignments":[6971],"declarations":[{"constant":false,"id":6971,"mutability":"mutable","name":"contractBalance","nameLocation":"2495:15:32","nodeType":"VariableDeclaration","scope":7000,"src":"2487:23:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6970,"name":"uint256","nodeType":"ElementaryTypeName","src":"2487:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6973,"initialValue":{"id":6972,"name":"s_contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6824,"src":"2513:17:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2487:43:32"},{"assignments":[6975,null],"declarations":[{"constant":false,"id":6975,"mutability":"mutable","name":"success","nameLocation":"2546:7:32","nodeType":"VariableDeclaration","scope":7000,"src":"2541:12:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6974,"name":"bool","nodeType":"ElementaryTypeName","src":"2541:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":6985,"initialValue":{"arguments":[{"hexValue":"","id":6983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2610:2:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[{"id":6978,"name":"payoutAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6967,"src":"2567:13:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6977,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2559:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":6976,"name":"address","nodeType":"ElementaryTypeName","src":"2559:8:32","stateMutability":"payable","typeDescriptions":{}}},"id":6979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2559:22:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":6980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2582:4:32","memberName":"call","nodeType":"MemberAccess","src":"2559:27:32","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":6982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":6981,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6971,"src":"2593:15:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2559:50:32","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":6984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2559:54:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2540:73:32"},{"expression":{"arguments":[{"id":6987,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6975,"src":"2631:7:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5769746864726177206e6f74207375636365737366756c6c","id":6988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2639:26:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_24c0e956a159feb2ac84b582d392e2325a54e0a1d750c41d2e74e5393c8e2b77","typeString":"literal_string \"Withdraw not successfull\""},"value":"Withdraw not successfull"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24c0e956a159feb2ac84b582d392e2325a54e0a1d750c41d2e74e5393c8e2b77","typeString":"literal_string \"Withdraw not successfull\""}],"id":6986,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2623:7:32","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2623:43:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6990,"nodeType":"ExpressionStatement","src":"2623:43:32"},{"expression":{"id":6993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6991,"name":"s_contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6824,"src":"2676:17:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":6992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2696:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2676:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6994,"nodeType":"ExpressionStatement","src":"2676:21:32"},{"eventCall":{"arguments":[{"id":6996,"name":"payoutAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6967,"src":"2723:13:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6997,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6971,"src":"2738:15:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6995,"name":"Withdrawed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6850,"src":"2712:10:32","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":6998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2712:42:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6999,"nodeType":"EmitStatement","src":"2707:47:32"}]},"functionSelector":"3ccfd60b","id":7001,"implemented":true,"kind":"function","modifiers":[{"id":6964,"kind":"modifierInvocation","modifierName":{"id":6963,"name":"nonReentrant","nameLocations":["2415:12:32"],"nodeType":"IdentifierPath","referencedDeclaration":1316,"src":"2415:12:32"},"nodeType":"ModifierInvocation","src":"2415:12:32"}],"name":"withdraw","nameLocation":"2395:8:32","nodeType":"FunctionDefinition","parameters":{"id":6962,"nodeType":"ParameterList","parameters":[],"src":"2403:2:32"},"returnParameters":{"id":6965,"nodeType":"ParameterList","parameters":[],"src":"2428:0:32"},"scope":7058,"src":"2386:375:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":7017,"nodeType":"Block","src":"2873:92:32","statements":[{"expression":{"id":7011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7009,"name":"s_creationFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6814,"src":"2883:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7010,"name":"_creationFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7003,"src":"2899:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2883:28:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7012,"nodeType":"ExpressionStatement","src":"2883:28:32"},{"eventCall":{"arguments":[{"id":7014,"name":"_creationFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7003,"src":"2945:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7013,"name":"CreationFeeChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6854,"src":"2926:18:32","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":7015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2926:32:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7016,"nodeType":"EmitStatement","src":"2921:37:32"}]},"functionSelector":"b7d86225","id":7018,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":7006,"name":"CREATIONFEE_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6834,"src":"2855:16:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":7007,"kind":"modifierInvocation","modifierName":{"id":7005,"name":"onlyRole","nameLocations":["2846:8:32"],"nodeType":"IdentifierPath","referencedDeclaration":198,"src":"2846:8:32"},"nodeType":"ModifierInvocation","src":"2846:26:32"}],"name":"setCreationFee","nameLocation":"2800:14:32","nodeType":"FunctionDefinition","parameters":{"id":7004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7003,"mutability":"mutable","name":"_creationFee","nameLocation":"2823:12:32","nodeType":"VariableDeclaration","scope":7018,"src":"2815:20:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7002,"name":"uint256","nodeType":"ElementaryTypeName","src":"2815:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2814:22:32"},"returnParameters":{"id":7008,"nodeType":"ParameterList","parameters":[],"src":"2873:0:32"},"scope":7058,"src":"2791:174:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":7044,"nodeType":"Block","src":"3059:170:32","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":7032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7027,"name":"_payoutAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"3077:14:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":7030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3103:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":7029,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3095:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7028,"name":"address","nodeType":"ElementaryTypeName","src":"3095:7:32","typeDescriptions":{}}},"id":7031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3095:10:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3077:28:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573732063616e74206265207a65726f","id":7033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3106:22:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_507506d6dbc7d562955ba471fe833da5430ee86b7ddae778fc83312f942b6980","typeString":"literal_string \"Address cant be zero\""},"value":"Address cant be zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_507506d6dbc7d562955ba471fe833da5430ee86b7ddae778fc83312f942b6980","typeString":"literal_string \"Address cant be zero\""}],"id":7026,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3069:7:32","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3069:60:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7035,"nodeType":"ExpressionStatement","src":"3069:60:32"},{"expression":{"id":7038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7036,"name":"s_payoutAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6816,"src":"3139:15:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7037,"name":"_payoutAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"3157:14:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3139:32:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7039,"nodeType":"ExpressionStatement","src":"3139:32:32"},{"eventCall":{"arguments":[{"id":7041,"name":"_payoutAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"3207:14:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7040,"name":"PayoutAddressChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6858,"src":"3186:20:32","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":7042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3186:36:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7043,"nodeType":"EmitStatement","src":"3181:41:32"}]},"functionSelector":"33ea51a8","id":7045,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":7023,"name":"PAYOUTADDRESS_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6829,"src":"3039:18:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":7024,"kind":"modifierInvocation","modifierName":{"id":7022,"name":"onlyRole","nameLocations":["3030:8:32"],"nodeType":"IdentifierPath","referencedDeclaration":198,"src":"3030:8:32"},"nodeType":"ModifierInvocation","src":"3030:28:32"}],"name":"setPayoutAddress","nameLocation":"2980:16:32","nodeType":"FunctionDefinition","parameters":{"id":7021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7020,"mutability":"mutable","name":"_payoutAddress","nameLocation":"3005:14:32","nodeType":"VariableDeclaration","scope":7045,"src":"2997:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7019,"name":"address","nodeType":"ElementaryTypeName","src":"2997:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2996:24:32"},"returnParameters":{"id":7025,"nodeType":"ParameterList","parameters":[],"src":"3059:0:32"},"scope":7058,"src":"2971:258:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":7056,"nodeType":"Block","src":"3327:56:32","statements":[{"expression":{"baseExpression":{"id":7052,"name":"s_fundingIdToAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6822,"src":"3344:20:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":7054,"indexExpression":{"id":7053,"name":"_fundingId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7047,"src":"3365:10:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3344:32:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":7051,"id":7055,"nodeType":"Return","src":"3337:39:32"}]},"functionSelector":"b93f9b0a","id":7057,"implemented":true,"kind":"function","modifiers":[],"name":"getAddress","nameLocation":"3266:10:32","nodeType":"FunctionDefinition","parameters":{"id":7048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7047,"mutability":"mutable","name":"_fundingId","nameLocation":"3285:10:32","nodeType":"VariableDeclaration","scope":7057,"src":"3277:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7046,"name":"uint256","nodeType":"ElementaryTypeName","src":"3277:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3276:20:32"},"returnParameters":{"id":7051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7050,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7057,"src":"3319:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7049,"name":"address","nodeType":"ElementaryTypeName","src":"3319:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3318:9:32"},"scope":7058,"src":"3257:126:32","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":7059,"src":"345:3040:32","usedErrors":[]}],"src":"31:3354:32"},"id":32}},"contracts":{"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol":{"AccessControlEnumerableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Extension of {AccessControl} that allows enumerating the members of each role.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {AccessControl} that allows enumerating the members of each role.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":\"AccessControlEnumerableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4807db844a856813048b5af81a764fdd25a0ae8876a3132593e8d21ddc6b607c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":974,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":977,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1670,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1949,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":184,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"_roles","offset":0,"slot":"101","type":"t_mapping(t_bytes32,t_struct(RoleData)179_storage)"},{"astId":479,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"},{"astId":33,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"_roleMembers","offset":0,"slot":"151","type":"t_mapping(t_bytes32,t_struct(AddressSet)3153_storage)"},{"astId":143,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(AddressSet)3153_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)3153_storage"},"t_mapping(t_bytes32,t_struct(RoleData)179_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)179_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(AddressSet)3153_storage":{"encoding":"inplace","label":"struct EnumerableSetUpgradeable.AddressSet","members":[{"astId":3152,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)2838_storage"}],"numberOfBytes":"64"},"t_struct(RoleData)179_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":176,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":178,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Set)2838_storage":{"encoding":"inplace","label":"struct EnumerableSetUpgradeable.Set","members":[{"astId":2833,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":2837,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"_indexes","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"AccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":\"AccessControlUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":974,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":977,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1670,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1949,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":184,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_roles","offset":0,"slot":"101","type":"t_mapping(t_bytes32,t_struct(RoleData)179_storage)"},{"astId":479,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)179_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)179_storage"},"t_struct(RoleData)179_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":176,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":178,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol":{"IAccessControlEnumerableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControlEnumerable declared to support ERC165 detection.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControlEnumerable declared to support ERC165 detection.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":\"IAccessControlEnumerableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"IAccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":\"IAccessControlUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"IERC1822ProxiableUpgradeable":{"abi":[{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.","kind":"dev","methods":{"proxiableUUID()":{"details":"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":\"IERC1822ProxiableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ERC1967UpgradeUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"delegatecall","details":"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is upgraded."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"stateVariables":{"_ADMIN_SLOT":{"details":"Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."},"_BEACON_SLOT":{"details":"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"_IMPLEMENTATION_SLOT":{"details":"Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."},"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"delegatecall\",\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is upgraded.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"},\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":\"ERC1967UpgradeUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":974,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":977,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":956,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"IBeaconUpgradeable":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This is the interface that {BeaconProxy} expects of its beacon.","kind":"dev","methods":{"implementation()":{"details":"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"implementation()":"5c60da1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":\"IBeaconUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":974,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":977,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"UUPSUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._","kind":"dev","methods":{"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"upgradeTo(address)":{"details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"__self":{"custom:oz-upgrades-unsafe-allow":"state-variable-immutable state-variable-assignment"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"__self\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable state-variable-assignment\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":\"UUPSUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":974,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":977,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":956,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1271,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"ReentrancyGuardUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":\"ReentrancyGuardUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":974,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":977,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1286,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_status","offset":0,"slot":"1","type":"t_uint256"},{"astId":1344,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"__gap","offset":0,"slot":"2","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c758b696b02c18c7d91700a9bf8db5a756850ca8ce013ea710c1fca05698d88564736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 PC 0xB6 SWAP7 0xB0 0x2C XOR 0xC7 0xD9 OR STOP 0xA9 0xBF DUP14 0xB5 0xA7 JUMP DUP6 0xC 0xA8 0xCE ADD RETURNDATACOPY 0xA7 LT 0xC1 0xFC LOG0 JUMP SWAP9 0xD8 DUP6 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"194:8087:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8087:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c758b696b02c18c7d91700a9bf8db5a756850ca8ce013ea710c1fca05698d88564736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 PC 0xB6 SWAP7 0xB0 0x2C XOR 0xC7 0xD9 OR STOP 0xA9 0xBF DUP14 0xB5 0xA7 JUMP DUP6 0xC 0xA8 0xCE ADD RETURNDATACOPY 0xA7 LT 0xC1 0xFC LOG0 JUMP SWAP9 0xD8 DUP6 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"194:8087:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":974,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":977,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1670,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"StorageSlotUpgradeable":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220722a432fb5ae3d196438d6f0b803363040208c857c5f2ea422512a4e4f0cd9eb64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH19 0x2A432FB5AE3D196438D6F0B803363040208C85 PUSH29 0x5F2EA422512A4E4F0CD9EB64736F6C6343000811003300000000000000 ","sourceMap":"1279:1402:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1279:1402:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220722a432fb5ae3d196438d6f0b803363040208c857c5f2ea422512a4e4f0cd9eb64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH19 0x2A432FB5AE3D196438D6F0B803363040208C85 PUSH29 0x5F2EA422512A4E4F0CD9EB64736F6C6343000811003300000000000000 ","sourceMap":"1279:1402:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":\"StorageSlotUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206f4e0c0e0fb428724e64999763a903b85b4b8156f39924429872c4b176ed182264736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0x4E0C0E0FB428724E64999763A903B85B 0x4B DUP2 JUMP RETURN SWAP10 0x24 TIMESTAMP SWAP9 PUSH19 0xC4B176ED182264736F6C634300081100330000 ","sourceMap":"199:2098:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;199:2098:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206f4e0c0e0fb428724e64999763a903b85b4b8156f39924429872c4b176ed182264736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0x4E0C0E0FB428724E64999763A903B85B 0x4B DUP2 JUMP RETURN SWAP10 0x24 TIMESTAMP SWAP9 PUSH19 0xC4B176ED182264736F6C634300081100330000 ","sourceMap":"199:2098:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ERC165Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":974,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":977,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1949,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"IERC165Upgradeable":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":\"IERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203c0c9c675a54576f04dc430c8f26dd58b152a8095dfa064cbdda5ed6b7f5420064736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODECOPY 0xC SWAP13 PUSH8 0x5A54576F04DC430C DUP16 0x26 0xDD PC 0xB1 MSTORE 0xA8 MULMOD 0x5D STATICCALL MOD 0x4C 0xBD 0xDA 0x5E 0xD6 0xB7 CREATE2 TIMESTAMP STOP PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"202:12313:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12313:16;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203c0c9c675a54576f04dc430c8f26dd58b152a8095dfa064cbdda5ed6b7f5420064736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODECOPY 0xC SWAP13 PUSH8 0x5A54576F04DC430C DUP16 0x26 0xDD PC 0xB1 MSTORE 0xA8 MULMOD 0x5D STATICCALL MOD 0x4C 0xBD 0xDA 0x5E 0xD6 0xB7 CREATE2 TIMESTAMP STOP PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"202:12313:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol":{"EnumerableSetUpgradeable":{"abi":[],"devdoc":{"details":"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3794da3ef90d40938dde101ee8bc228fbfa1ae6cbb7c5d39f65335e0456898864736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 PUSH26 0x4DA3EF90D40938DDE101EE8BC228FBFA1AE6CBB7C5D39F65335E DIV JUMP DUP10 DUP9 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1321:11641:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1321:11641:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3794da3ef90d40938dde101ee8bc228fbfa1ae6cbb7c5d39f65335e0456898864736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 PUSH26 0x4DA3EF90D40938DDE101EE8BC228FBFA1AE6CBB7C5D39F65335E DIV JUMP DUP10 DUP9 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1321:11641:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_add(struct EnumerableSetUpgradeable.Set storage pointer,bytes32)":"infinite","_at(struct EnumerableSetUpgradeable.Set storage pointer,uint256)":"infinite","_contains(struct EnumerableSetUpgradeable.Set storage pointer,bytes32)":"infinite","_length(struct EnumerableSetUpgradeable.Set storage pointer)":"infinite","_remove(struct EnumerableSetUpgradeable.Set storage pointer,bytes32)":"infinite","_values(struct EnumerableSetUpgradeable.Set storage pointer)":"infinite","add(struct EnumerableSetUpgradeable.AddressSet storage pointer,address)":"infinite","add(struct EnumerableSetUpgradeable.Bytes32Set storage pointer,bytes32)":"infinite","add(struct EnumerableSetUpgradeable.UintSet storage pointer,uint256)":"infinite","at(struct EnumerableSetUpgradeable.AddressSet storage pointer,uint256)":"infinite","at(struct EnumerableSetUpgradeable.Bytes32Set storage pointer,uint256)":"infinite","at(struct EnumerableSetUpgradeable.UintSet storage pointer,uint256)":"infinite","contains(struct EnumerableSetUpgradeable.AddressSet storage pointer,address)":"infinite","contains(struct EnumerableSetUpgradeable.Bytes32Set storage pointer,bytes32)":"infinite","contains(struct EnumerableSetUpgradeable.UintSet storage pointer,uint256)":"infinite","length(struct EnumerableSetUpgradeable.AddressSet storage pointer)":"infinite","length(struct EnumerableSetUpgradeable.Bytes32Set storage pointer)":"infinite","length(struct EnumerableSetUpgradeable.UintSet storage pointer)":"infinite","remove(struct EnumerableSetUpgradeable.AddressSet storage pointer,address)":"infinite","remove(struct EnumerableSetUpgradeable.Bytes32Set storage pointer,bytes32)":"infinite","remove(struct EnumerableSetUpgradeable.UintSet storage pointer,uint256)":"infinite","values(struct EnumerableSetUpgradeable.AddressSet storage pointer)":"infinite","values(struct EnumerableSetUpgradeable.Bytes32Set storage pointer)":"infinite","values(struct EnumerableSetUpgradeable.UintSet storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":\"EnumerableSetUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4807db844a856813048b5af81a764fdd25a0ae8876a3132593e8d21ddc6b607c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3448,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3616":{"entryPoint":null,"id":3616,"parameterSlots":2,"returnSlots":0},"abi_decode_string_fromMemory":{"entryPoint":112,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":287,"id":null,"parameterSlots":2,"returnSlots":2},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":453,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":536,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":393,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":90,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4144:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:33"},"nodeType":"YulFunctionCall","src":"66:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:33"},"nodeType":"YulFunctionCall","src":"56:31:33"},"nodeType":"YulExpressionStatement","src":"56:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:33","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:33"},"nodeType":"YulFunctionCall","src":"96:15:33"},"nodeType":"YulExpressionStatement","src":"96:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:33"},"nodeType":"YulFunctionCall","src":"120:15:33"},"nodeType":"YulExpressionStatement","src":"120:15:33"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:33"},{"body":{"nodeType":"YulBlock","src":"210:776:33","statements":[{"body":{"nodeType":"YulBlock","src":"259:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"268:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"271:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"261:6:33"},"nodeType":"YulFunctionCall","src":"261:12:33"},"nodeType":"YulExpressionStatement","src":"261:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"238:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"246:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"234:3:33"},"nodeType":"YulFunctionCall","src":"234:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"253:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"230:3:33"},"nodeType":"YulFunctionCall","src":"230:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"223:6:33"},"nodeType":"YulFunctionCall","src":"223:35:33"},"nodeType":"YulIf","src":"220:55:33"},{"nodeType":"YulVariableDeclaration","src":"284:23:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"300:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"294:5:33"},"nodeType":"YulFunctionCall","src":"294:13:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"288:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"316:28:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:2:33","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"338:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"330:3:33"},"nodeType":"YulFunctionCall","src":"330:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"342:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"326:3:33"},"nodeType":"YulFunctionCall","src":"326:18:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"320:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"367:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"369:16:33"},"nodeType":"YulFunctionCall","src":"369:18:33"},"nodeType":"YulExpressionStatement","src":"369:18:33"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"359:2:33"},{"name":"_2","nodeType":"YulIdentifier","src":"363:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"356:2:33"},"nodeType":"YulFunctionCall","src":"356:10:33"},"nodeType":"YulIf","src":"353:36:33"},{"nodeType":"YulVariableDeclaration","src":"398:17:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"412:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"408:3:33"},"nodeType":"YulFunctionCall","src":"408:7:33"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"402:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"424:23:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"438:5:33"},"nodeType":"YulFunctionCall","src":"438:9:33"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"428:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"456:71:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"478:6:33"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"502:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"506:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"498:3:33"},"nodeType":"YulFunctionCall","src":"498:13:33"},{"name":"_3","nodeType":"YulIdentifier","src":"513:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"494:3:33"},"nodeType":"YulFunctionCall","src":"494:22:33"},{"kind":"number","nodeType":"YulLiteral","src":"518:2:33","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"490:3:33"},"nodeType":"YulFunctionCall","src":"490:31:33"},{"name":"_3","nodeType":"YulIdentifier","src":"523:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"486:3:33"},"nodeType":"YulFunctionCall","src":"486:40:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"474:3:33"},"nodeType":"YulFunctionCall","src":"474:53:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"460:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"586:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"588:16:33"},"nodeType":"YulFunctionCall","src":"588:18:33"},"nodeType":"YulExpressionStatement","src":"588:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"545:10:33"},{"name":"_2","nodeType":"YulIdentifier","src":"557:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"542:2:33"},"nodeType":"YulFunctionCall","src":"542:18:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"565:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"577:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"562:2:33"},"nodeType":"YulFunctionCall","src":"562:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"539:2:33"},"nodeType":"YulFunctionCall","src":"539:46:33"},"nodeType":"YulIf","src":"536:72:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"624:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"628:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"617:6:33"},"nodeType":"YulFunctionCall","src":"617:22:33"},"nodeType":"YulExpressionStatement","src":"617:22:33"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"655:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"663:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:33"},"nodeType":"YulFunctionCall","src":"648:18:33"},"nodeType":"YulExpressionStatement","src":"648:18:33"},{"nodeType":"YulVariableDeclaration","src":"675:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"685:4:33","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"679:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"735:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"744:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"747:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"737:6:33"},"nodeType":"YulFunctionCall","src":"737:12:33"},"nodeType":"YulExpressionStatement","src":"737:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"712:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"720:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"708:3:33"},"nodeType":"YulFunctionCall","src":"708:15:33"},{"name":"_4","nodeType":"YulIdentifier","src":"725:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"704:3:33"},"nodeType":"YulFunctionCall","src":"704:24:33"},{"name":"end","nodeType":"YulIdentifier","src":"730:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"701:2:33"},"nodeType":"YulFunctionCall","src":"701:33:33"},"nodeType":"YulIf","src":"698:53:33"},{"nodeType":"YulVariableDeclaration","src":"760:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"769:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"764:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"825:87:33","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"854:6:33"},{"name":"i","nodeType":"YulIdentifier","src":"862:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"850:3:33"},"nodeType":"YulFunctionCall","src":"850:14:33"},{"name":"_4","nodeType":"YulIdentifier","src":"866:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"846:3:33"},"nodeType":"YulFunctionCall","src":"846:23:33"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"885:6:33"},{"name":"i","nodeType":"YulIdentifier","src":"893:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"881:3:33"},"nodeType":"YulFunctionCall","src":"881:14:33"},{"name":"_4","nodeType":"YulIdentifier","src":"897:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"877:3:33"},"nodeType":"YulFunctionCall","src":"877:23:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"871:5:33"},"nodeType":"YulFunctionCall","src":"871:30:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"839:6:33"},"nodeType":"YulFunctionCall","src":"839:63:33"},"nodeType":"YulExpressionStatement","src":"839:63:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"790:1:33"},{"name":"_1","nodeType":"YulIdentifier","src":"793:2:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"787:2:33"},"nodeType":"YulFunctionCall","src":"787:9:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"797:19:33","statements":[{"nodeType":"YulAssignment","src":"799:15:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"808:1:33"},{"name":"_4","nodeType":"YulIdentifier","src":"811:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:33"},"nodeType":"YulFunctionCall","src":"804:10:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"799:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"783:3:33","statements":[]},"src":"779:133:33"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"936:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"944:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"932:3:33"},"nodeType":"YulFunctionCall","src":"932:15:33"},{"name":"_4","nodeType":"YulIdentifier","src":"949:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"928:3:33"},"nodeType":"YulFunctionCall","src":"928:24:33"},{"kind":"number","nodeType":"YulLiteral","src":"954:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"921:6:33"},"nodeType":"YulFunctionCall","src":"921:35:33"},"nodeType":"YulExpressionStatement","src":"921:35:33"},{"nodeType":"YulAssignment","src":"965:15:33","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"974:6:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"965:5:33"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"184:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"192:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"200:5:33","type":""}],"src":"146:840:33"},{"body":{"nodeType":"YulBlock","src":"1109:444:33","statements":[{"body":{"nodeType":"YulBlock","src":"1155:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1164:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1167:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1157:6:33"},"nodeType":"YulFunctionCall","src":"1157:12:33"},"nodeType":"YulExpressionStatement","src":"1157:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1130:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"1139:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1126:3:33"},"nodeType":"YulFunctionCall","src":"1126:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"1151:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1122:3:33"},"nodeType":"YulFunctionCall","src":"1122:32:33"},"nodeType":"YulIf","src":"1119:52:33"},{"nodeType":"YulVariableDeclaration","src":"1180:30:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1200:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1194:5:33"},"nodeType":"YulFunctionCall","src":"1194:16:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1184:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1219:28:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1237:2:33","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1241:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1233:3:33"},"nodeType":"YulFunctionCall","src":"1233:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"1245:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1229:3:33"},"nodeType":"YulFunctionCall","src":"1229:18:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1223:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1274:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1283:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1286:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1276:6:33"},"nodeType":"YulFunctionCall","src":"1276:12:33"},"nodeType":"YulExpressionStatement","src":"1276:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1262:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"1270:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1259:2:33"},"nodeType":"YulFunctionCall","src":"1259:14:33"},"nodeType":"YulIf","src":"1256:34:33"},{"nodeType":"YulAssignment","src":"1299:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1342:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"1353:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1338:3:33"},"nodeType":"YulFunctionCall","src":"1338:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1362:7:33"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1309:28:33"},"nodeType":"YulFunctionCall","src":"1309:61:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1299:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"1379:41:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1405:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1416:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1401:3:33"},"nodeType":"YulFunctionCall","src":"1401:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1395:5:33"},"nodeType":"YulFunctionCall","src":"1395:25:33"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1383:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1449:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1458:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1461:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1451:6:33"},"nodeType":"YulFunctionCall","src":"1451:12:33"},"nodeType":"YulExpressionStatement","src":"1451:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1435:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"1445:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1432:2:33"},"nodeType":"YulFunctionCall","src":"1432:16:33"},"nodeType":"YulIf","src":"1429:36:33"},{"nodeType":"YulAssignment","src":"1474:73:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1517:9:33"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1528:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1513:3:33"},"nodeType":"YulFunctionCall","src":"1513:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1539:7:33"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1484:28:33"},"nodeType":"YulFunctionCall","src":"1484:63:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1474:6:33"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1067:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1078:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1090:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1098:6:33","type":""}],"src":"991:562:33"},{"body":{"nodeType":"YulBlock","src":"1613:325:33","statements":[{"nodeType":"YulAssignment","src":"1623:22:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1637:1:33","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1640:4:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1633:3:33"},"nodeType":"YulFunctionCall","src":"1633:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1623:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"1654:38:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1684:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"1690:1:33","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1680:3:33"},"nodeType":"YulFunctionCall","src":"1680:12:33"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1658:18:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1731:31:33","statements":[{"nodeType":"YulAssignment","src":"1733:27:33","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1747:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1755:4:33","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1743:3:33"},"nodeType":"YulFunctionCall","src":"1743:17:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1733:6:33"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1711:18:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1704:6:33"},"nodeType":"YulFunctionCall","src":"1704:26:33"},"nodeType":"YulIf","src":"1701:61:33"},{"body":{"nodeType":"YulBlock","src":"1821:111:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1842:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1849:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1854:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1845:3:33"},"nodeType":"YulFunctionCall","src":"1845:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1835:6:33"},"nodeType":"YulFunctionCall","src":"1835:31:33"},"nodeType":"YulExpressionStatement","src":"1835:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1886:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1889:4:33","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1879:6:33"},"nodeType":"YulFunctionCall","src":"1879:15:33"},"nodeType":"YulExpressionStatement","src":"1879:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1914:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1917:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1907:6:33"},"nodeType":"YulFunctionCall","src":"1907:15:33"},"nodeType":"YulExpressionStatement","src":"1907:15:33"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1777:18:33"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1800:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1808:2:33","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1797:2:33"},"nodeType":"YulFunctionCall","src":"1797:14:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1774:2:33"},"nodeType":"YulFunctionCall","src":"1774:38:33"},"nodeType":"YulIf","src":"1771:161:33"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1593:4:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1602:6:33","type":""}],"src":"1558:380:33"},{"body":{"nodeType":"YulBlock","src":"1999:65:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2016:1:33","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"2019:3:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2009:6:33"},"nodeType":"YulFunctionCall","src":"2009:14:33"},"nodeType":"YulExpressionStatement","src":"2009:14:33"},{"nodeType":"YulAssignment","src":"2032:26:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2050:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2053:4:33","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2040:9:33"},"nodeType":"YulFunctionCall","src":"2040:18:33"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"2032:4:33"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1982:3:33","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1990:4:33","type":""}],"src":"1943:121:33"},{"body":{"nodeType":"YulBlock","src":"2150:464:33","statements":[{"body":{"nodeType":"YulBlock","src":"2183:425:33","statements":[{"nodeType":"YulVariableDeclaration","src":"2197:11:33","value":{"kind":"number","nodeType":"YulLiteral","src":"2207:1:33","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2201:2:33","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2228:2:33"},{"name":"array","nodeType":"YulIdentifier","src":"2232:5:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2221:6:33"},"nodeType":"YulFunctionCall","src":"2221:17:33"},"nodeType":"YulExpressionStatement","src":"2221:17:33"},{"nodeType":"YulVariableDeclaration","src":"2251:31:33","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2273:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"2277:4:33","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2263:9:33"},"nodeType":"YulFunctionCall","src":"2263:19:33"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"2255:4:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2295:57:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2318:4:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2328:1:33","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2335:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"2347:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2331:3:33"},"nodeType":"YulFunctionCall","src":"2331:19:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2324:3:33"},"nodeType":"YulFunctionCall","src":"2324:27:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2314:3:33"},"nodeType":"YulFunctionCall","src":"2314:38:33"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"2299:11:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2389:23:33","statements":[{"nodeType":"YulAssignment","src":"2391:19:33","value":{"name":"data","nodeType":"YulIdentifier","src":"2406:4:33"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"2391:11:33"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2371:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"2383:4:33","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2368:2:33"},"nodeType":"YulFunctionCall","src":"2368:20:33"},"nodeType":"YulIf","src":"2365:47:33"},{"nodeType":"YulVariableDeclaration","src":"2425:41:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2439:4:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2449:1:33","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2456:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"2461:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2452:3:33"},"nodeType":"YulFunctionCall","src":"2452:12:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2445:3:33"},"nodeType":"YulFunctionCall","src":"2445:20:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2435:3:33"},"nodeType":"YulFunctionCall","src":"2435:31:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2429:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2479:24:33","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"2492:11:33"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"2483:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2577:21:33","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2586:5:33"},{"name":"_1","nodeType":"YulIdentifier","src":"2593:2:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2579:6:33"},"nodeType":"YulFunctionCall","src":"2579:17:33"},"nodeType":"YulExpressionStatement","src":"2579:17:33"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2527:5:33"},{"name":"_2","nodeType":"YulIdentifier","src":"2534:2:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2524:2:33"},"nodeType":"YulFunctionCall","src":"2524:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2538:26:33","statements":[{"nodeType":"YulAssignment","src":"2540:22:33","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2553:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"2560:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2549:3:33"},"nodeType":"YulFunctionCall","src":"2549:13:33"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2540:5:33"}]}]},"pre":{"nodeType":"YulBlock","src":"2520:3:33","statements":[]},"src":"2516:82:33"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2166:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"2171:2:33","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2163:2:33"},"nodeType":"YulFunctionCall","src":"2163:11:33"},"nodeType":"YulIf","src":"2160:448:33"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2122:5:33","type":""},{"name":"len","nodeType":"YulTypedName","src":"2129:3:33","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2134:10:33","type":""}],"src":"2069:545:33"},{"body":{"nodeType":"YulBlock","src":"2704:81:33","statements":[{"nodeType":"YulAssignment","src":"2714:65:33","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2729:4:33"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2747:1:33","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"2750:3:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2743:3:33"},"nodeType":"YulFunctionCall","src":"2743:11:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2760:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2756:3:33"},"nodeType":"YulFunctionCall","src":"2756:6:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2739:3:33"},"nodeType":"YulFunctionCall","src":"2739:24:33"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2735:3:33"},"nodeType":"YulFunctionCall","src":"2735:29:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2725:3:33"},"nodeType":"YulFunctionCall","src":"2725:40:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2771:1:33","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"2774:3:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2767:3:33"},"nodeType":"YulFunctionCall","src":"2767:11:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2722:2:33"},"nodeType":"YulFunctionCall","src":"2722:57:33"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"2714:4:33"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2681:4:33","type":""},{"name":"len","nodeType":"YulTypedName","src":"2687:3:33","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"2695:4:33","type":""}],"src":"2619:166:33"},{"body":{"nodeType":"YulBlock","src":"2886:1256:33","statements":[{"nodeType":"YulVariableDeclaration","src":"2896:24:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2916:3:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2910:5:33"},"nodeType":"YulFunctionCall","src":"2910:10:33"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"2900:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2963:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2965:16:33"},"nodeType":"YulFunctionCall","src":"2965:18:33"},"nodeType":"YulExpressionStatement","src":"2965:18:33"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2935:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2951:2:33","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2955:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2947:3:33"},"nodeType":"YulFunctionCall","src":"2947:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"2959:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2943:3:33"},"nodeType":"YulFunctionCall","src":"2943:18:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2932:2:33"},"nodeType":"YulFunctionCall","src":"2932:30:33"},"nodeType":"YulIf","src":"2929:56:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3038:4:33"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3076:4:33"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3070:5:33"},"nodeType":"YulFunctionCall","src":"3070:11:33"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"3044:25:33"},"nodeType":"YulFunctionCall","src":"3044:38:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"3084:6:33"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"2994:43:33"},"nodeType":"YulFunctionCall","src":"2994:97:33"},"nodeType":"YulExpressionStatement","src":"2994:97:33"},{"nodeType":"YulVariableDeclaration","src":"3100:18:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3117:1:33","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"3104:9:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3127:23:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3146:4:33","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"3131:11:33","type":""}]},{"nodeType":"YulAssignment","src":"3159:24:33","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3172:11:33"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3159:9:33"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"3229:656:33","statements":[{"nodeType":"YulVariableDeclaration","src":"3243:35:33","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3262:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3274:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3270:3:33"},"nodeType":"YulFunctionCall","src":"3270:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3258:3:33"},"nodeType":"YulFunctionCall","src":"3258:20:33"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"3247:7:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3291:49:33","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3335:4:33"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"3305:29:33"},"nodeType":"YulFunctionCall","src":"3305:35:33"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"3295:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3353:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3362:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3357:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3440:172:33","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3465:6:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3483:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3488:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3479:3:33"},"nodeType":"YulFunctionCall","src":"3479:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3473:5:33"},"nodeType":"YulFunctionCall","src":"3473:26:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3458:6:33"},"nodeType":"YulFunctionCall","src":"3458:42:33"},"nodeType":"YulExpressionStatement","src":"3458:42:33"},{"nodeType":"YulAssignment","src":"3517:24:33","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3531:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"3539:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3527:3:33"},"nodeType":"YulFunctionCall","src":"3527:14:33"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3517:6:33"}]},{"nodeType":"YulAssignment","src":"3558:40:33","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3575:9:33"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3586:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3571:3:33"},"nodeType":"YulFunctionCall","src":"3571:27:33"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3558:9:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3387:1:33"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"3390:7:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3384:2:33"},"nodeType":"YulFunctionCall","src":"3384:14:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3399:28:33","statements":[{"nodeType":"YulAssignment","src":"3401:24:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3410:1:33"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3413:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3406:3:33"},"nodeType":"YulFunctionCall","src":"3406:19:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3401:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"3380:3:33","statements":[]},"src":"3376:236:33"},{"body":{"nodeType":"YulBlock","src":"3660:166:33","statements":[{"nodeType":"YulVariableDeclaration","src":"3678:43:33","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3705:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3710:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3701:3:33"},"nodeType":"YulFunctionCall","src":"3701:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3695:5:33"},"nodeType":"YulFunctionCall","src":"3695:26:33"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"3682:9:33","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3745:6:33"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"3757:9:33"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3784:1:33","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"3787:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3780:3:33"},"nodeType":"YulFunctionCall","src":"3780:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"3796:3:33","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3776:3:33"},"nodeType":"YulFunctionCall","src":"3776:24:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3806:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3802:3:33"},"nodeType":"YulFunctionCall","src":"3802:6:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3772:3:33"},"nodeType":"YulFunctionCall","src":"3772:37:33"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3768:3:33"},"nodeType":"YulFunctionCall","src":"3768:42:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3753:3:33"},"nodeType":"YulFunctionCall","src":"3753:58:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3738:6:33"},"nodeType":"YulFunctionCall","src":"3738:74:33"},"nodeType":"YulExpressionStatement","src":"3738:74:33"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"3631:7:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"3640:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3628:2:33"},"nodeType":"YulFunctionCall","src":"3628:19:33"},"nodeType":"YulIf","src":"3625:201:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3846:4:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3860:1:33","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"3863:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3856:3:33"},"nodeType":"YulFunctionCall","src":"3856:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"3872:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3852:3:33"},"nodeType":"YulFunctionCall","src":"3852:22:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3839:6:33"},"nodeType":"YulFunctionCall","src":"3839:36:33"},"nodeType":"YulExpressionStatement","src":"3839:36:33"}]},"nodeType":"YulCase","src":"3222:663:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3227:1:33","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"3902:234:33","statements":[{"nodeType":"YulVariableDeclaration","src":"3916:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3929:1:33","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3920:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3965:67:33","statements":[{"nodeType":"YulAssignment","src":"3983:35:33","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4002:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4007:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:33"},"nodeType":"YulFunctionCall","src":"3998:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3992:5:33"},"nodeType":"YulFunctionCall","src":"3992:26:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3983:5:33"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"3946:6:33"},"nodeType":"YulIf","src":"3943:89:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4052:4:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4111:5:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"4118:6:33"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"4058:52:33"},"nodeType":"YulFunctionCall","src":"4058:67:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4045:6:33"},"nodeType":"YulFunctionCall","src":"4045:81:33"},"nodeType":"YulExpressionStatement","src":"4045:81:33"}]},"nodeType":"YulCase","src":"3894:242:33","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3202:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"3210:2:33","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3199:2:33"},"nodeType":"YulFunctionCall","src":"3199:14:33"},"nodeType":"YulSwitch","src":"3192:944:33"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"2871:4:33","type":""},{"name":"src","nodeType":"YulTypedName","src":"2877:3:33","type":""}],"src":"2790:1352:33"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        mstore(add(add(memPtr, _1), _4), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b506040516200148d3803806200148d83398101604081905262000034916200011f565b600062000042838262000218565b50600162000051828262000218565b505050620002e4565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008257600080fd5b81516001600160401b03808211156200009f576200009f6200005a565b604051601f8301601f19908116603f01168101908282118183101715620000ca57620000ca6200005a565b81604052838152602092508683858801011115620000e757600080fd5b600091505b838210156200010b5785820183015181830184015290820190620000ec565b600093810190920192909252949350505050565b600080604083850312156200013357600080fd5b82516001600160401b03808211156200014b57600080fd5b620001598683870162000070565b935060208501519150808211156200017057600080fd5b506200017f8582860162000070565b9150509250929050565b600181811c908216806200019e57607f821691505b602082108103620001bf57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021357600081815260208120601f850160051c81016020861015620001ee5750805b601f850160051c820191505b818110156200020f57828155600101620001fa565b5050505b505050565b81516001600160401b038111156200023457620002346200005a565b6200024c8162000245845462000189565b84620001c5565b602080601f8311600181146200028457600084156200026b5750858301515b600019600386901b1c1916600185901b1785556200020f565b600085815260208120601f198616915b82811015620002b55788860151825594840194600190910190840162000294565b5085821015620002d45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61119980620002f46000396000f3fe608060405234801561001057600080fd5b50600436106100bf5760003560e01c80636352211e1161007c5780636352211e1461016757806370a082311461017a57806395d89b411461019b578063a22cb465146101a3578063b88d4fde146101b6578063c87b56dd146101c9578063e985e9c5146101dc57600080fd5b806301ffc9a7146100c457806306fdde03146100ec578063081812fc14610101578063095ea7b31461012c57806323b872dd1461014157806342842e0e14610154575b600080fd5b6100d76100d2366004610cb7565b6101ef565b60405190151581526020015b60405180910390f35b6100f4610241565b6040516100e39190610d24565b61011461010f366004610d37565b6102d3565b6040516001600160a01b0390911681526020016100e3565b61013f61013a366004610d6c565b6102fa565b005b61013f61014f366004610d96565b610414565b61013f610162366004610d96565b610445565b610114610175366004610d37565b610460565b61018d610188366004610dd2565b610494565b6040519081526020016100e3565b6100f461051a565b61013f6101b1366004610ded565b610529565b61013f6101c4366004610e3f565b610538565b6100f46101d7366004610d37565b610570565b6100d76101ea366004610f1b565b6105e4565b60006001600160e01b031982166380ac58cd60e01b148061022057506001600160e01b03198216635b5e139f60e01b145b8061023b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461025090610f4e565b80601f016020809104026020016040519081016040528092919081815260200182805461027c90610f4e565b80156102c95780601f1061029e576101008083540402835291602001916102c9565b820191906000526020600020905b8154815290600101906020018083116102ac57829003601f168201915b5050505050905090565b60006102de82610612565b506000908152600460205260409020546001600160a01b031690565b600061030582610460565b9050806001600160a01b0316836001600160a01b0316036103775760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610393575061039381336105e4565b6104055760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161036e565b61040f838361063a565b505050565b61041e33826106a8565b61043a5760405162461bcd60e51b815260040161036e90610f88565b61040f838383610707565b61040f83838360405180602001604052806000815250610538565b60008061046c83610878565b90506001600160a01b03811661023b5760405162461bcd60e51b815260040161036e90610fd5565b60006001600160a01b0382166104fe5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161036e565b506001600160a01b031660009081526003602052604090205490565b60606001805461025090610f4e565b610534338383610893565b5050565b61054233836106a8565b61055e5760405162461bcd60e51b815260040161036e90610f88565b61056a8484848461095d565b50505050565b606061057b82610612565b600061059260408051602081019091526000815290565b905060008151116105b257604051806020016040528060008152506105dd565b806105bc84610990565b6040516020016105cd929190611007565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61061b81610a23565b6106375760405162461bcd60e51b815260040161036e90610fd5565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061066f82610460565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806106b483610460565b9050806001600160a01b0316846001600160a01b031614806106db57506106db81856105e4565b806106ff5750836001600160a01b03166106f4846102d3565b6001600160a01b0316145b949350505050565b826001600160a01b031661071a82610460565b6001600160a01b0316146107405760405162461bcd60e51b815260040161036e90611036565b6001600160a01b0382166107a25760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161036e565b6107af8383836001610a40565b826001600160a01b03166107c282610460565b6001600160a01b0316146107e85760405162461bcd60e51b815260040161036e90611036565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000908152600260205260409020546001600160a01b031690565b816001600160a01b0316836001600160a01b0316036108f05760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640161036e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610968848484610707565b61097484848484610ac8565b61056a5760405162461bcd60e51b815260040161036e9061107b565b6060600061099d83610bc9565b600101905060008167ffffffffffffffff8111156109bd576109bd610e29565b6040519080825280601f01601f1916602001820160405280156109e7576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846109f157509392505050565b600080610a2f83610878565b6001600160a01b0316141592915050565b600181111561056a576001600160a01b03841615610a86576001600160a01b03841660009081526003602052604081208054839290610a809084906110e3565b90915550505b6001600160a01b0383161561056a576001600160a01b03831660009081526003602052604081208054839290610abd9084906110f6565b909155505050505050565b60006001600160a01b0384163b15610bbe57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610b0c903390899088908890600401611109565b6020604051808303816000875af1925050508015610b47575060408051601f3d908101601f19168201909252610b4491810190611146565b60015b610ba4573d808015610b75576040519150601f19603f3d011682016040523d82523d6000602084013e610b7a565b606091505b508051600003610b9c5760405162461bcd60e51b815260040161036e9061107b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506106ff565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610c085772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610c34576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610c5257662386f26fc10000830492506010015b6305f5e1008310610c6a576305f5e100830492506008015b6127108310610c7e57612710830492506004015b60648310610c90576064830492506002015b600a831061023b5760010192915050565b6001600160e01b03198116811461063757600080fd5b600060208284031215610cc957600080fd5b81356105dd81610ca1565b60005b83811015610cef578181015183820152602001610cd7565b50506000910152565b60008151808452610d10816020860160208601610cd4565b601f01601f19169290920160200192915050565b6020815260006105dd6020830184610cf8565b600060208284031215610d4957600080fd5b5035919050565b80356001600160a01b0381168114610d6757600080fd5b919050565b60008060408385031215610d7f57600080fd5b610d8883610d50565b946020939093013593505050565b600080600060608486031215610dab57600080fd5b610db484610d50565b9250610dc260208501610d50565b9150604084013590509250925092565b600060208284031215610de457600080fd5b6105dd82610d50565b60008060408385031215610e0057600080fd5b610e0983610d50565b915060208301358015158114610e1e57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610e5557600080fd5b610e5e85610d50565b9350610e6c60208601610d50565b925060408501359150606085013567ffffffffffffffff80821115610e9057600080fd5b818701915087601f830112610ea457600080fd5b813581811115610eb657610eb6610e29565b604051601f8201601f19908116603f01168101908382118183101715610ede57610ede610e29565b816040528281528a6020848701011115610ef757600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215610f2e57600080fd5b610f3783610d50565b9150610f4560208401610d50565b90509250929050565b600181811c90821680610f6257607f821691505b602082108103610f8257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b60008351611019818460208801610cd4565b83519083019061102d818360208801610cd4565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561023b5761023b6110cd565b8082018082111561023b5761023b6110cd565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061113c90830184610cf8565b9695505050505050565b60006020828403121561115857600080fd5b81516105dd81610ca156fea26469706673582212201ded905bdfff73f4f44dac5c98bbdbc139b325527f7c3aac16826b27608bc3b664736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x148D CODESIZE SUB DUP1 PUSH3 0x148D DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x11F JUMP JUMPDEST PUSH1 0x0 PUSH3 0x42 DUP4 DUP3 PUSH3 0x218 JUMP JUMPDEST POP PUSH1 0x1 PUSH3 0x51 DUP3 DUP3 PUSH3 0x218 JUMP JUMPDEST POP POP POP PUSH3 0x2E4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x9F JUMPI PUSH3 0x9F PUSH3 0x5A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0xCA JUMPI PUSH3 0xCA PUSH3 0x5A JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0xE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x10B JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0xEC JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP2 ADD SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x133 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x159 DUP7 DUP4 DUP8 ADD PUSH3 0x70 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x170 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x17F DUP6 DUP3 DUP7 ADD PUSH3 0x70 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x19E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x1BF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x213 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x1EE JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x20F JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x1FA JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x234 JUMPI PUSH3 0x234 PUSH3 0x5A JUMP JUMPDEST PUSH3 0x24C DUP2 PUSH3 0x245 DUP5 SLOAD PUSH3 0x189 JUMP JUMPDEST DUP5 PUSH3 0x1C5 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x284 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x26B JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x20F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x2B5 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x294 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x2D4 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x1199 DUP1 PUSH3 0x2F4 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x7C JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x19B JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1A3 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1B6 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x1DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xC4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xEC JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x12C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x141 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x154 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD7 PUSH2 0xD2 CALLDATASIZE PUSH1 0x4 PUSH2 0xCB7 JUMP JUMPDEST PUSH2 0x1EF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF4 PUSH2 0x241 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0xD24 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0xD37 JUMP JUMPDEST PUSH2 0x2D3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x13F PUSH2 0x13A CALLDATASIZE PUSH1 0x4 PUSH2 0xD6C JUMP JUMPDEST PUSH2 0x2FA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x13F PUSH2 0x14F CALLDATASIZE PUSH1 0x4 PUSH2 0xD96 JUMP JUMPDEST PUSH2 0x414 JUMP JUMPDEST PUSH2 0x13F PUSH2 0x162 CALLDATASIZE PUSH1 0x4 PUSH2 0xD96 JUMP JUMPDEST PUSH2 0x445 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0xD37 JUMP JUMPDEST PUSH2 0x460 JUMP JUMPDEST PUSH2 0x18D PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0xDD2 JUMP JUMPDEST PUSH2 0x494 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x51A JUMP JUMPDEST PUSH2 0x13F PUSH2 0x1B1 CALLDATASIZE PUSH1 0x4 PUSH2 0xDED JUMP JUMPDEST PUSH2 0x529 JUMP JUMPDEST PUSH2 0x13F PUSH2 0x1C4 CALLDATASIZE PUSH1 0x4 PUSH2 0xE3F JUMP JUMPDEST PUSH2 0x538 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0xD37 JUMP JUMPDEST PUSH2 0x570 JUMP JUMPDEST PUSH2 0xD7 PUSH2 0x1EA CALLDATASIZE PUSH1 0x4 PUSH2 0xF1B JUMP JUMPDEST PUSH2 0x5E4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x220 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x23B JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x250 SWAP1 PUSH2 0xF4E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x27C SWAP1 PUSH2 0xF4E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2C9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x29E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2C9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2AC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DE DUP3 PUSH2 0x612 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x305 DUP3 PUSH2 0x460 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x377 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x393 JUMPI POP PUSH2 0x393 DUP2 CALLER PUSH2 0x5E4 JUMP JUMPDEST PUSH2 0x405 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x36E JUMP JUMPDEST PUSH2 0x40F DUP4 DUP4 PUSH2 0x63A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x41E CALLER DUP3 PUSH2 0x6A8 JUMP JUMPDEST PUSH2 0x43A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36E SWAP1 PUSH2 0xF88 JUMP JUMPDEST PUSH2 0x40F DUP4 DUP4 DUP4 PUSH2 0x707 JUMP JUMPDEST PUSH2 0x40F DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x538 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x46C DUP4 PUSH2 0x878 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x23B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36E SWAP1 PUSH2 0xFD5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x36E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x250 SWAP1 PUSH2 0xF4E JUMP JUMPDEST PUSH2 0x534 CALLER DUP4 DUP4 PUSH2 0x893 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x542 CALLER DUP4 PUSH2 0x6A8 JUMP JUMPDEST PUSH2 0x55E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36E SWAP1 PUSH2 0xF88 JUMP JUMPDEST PUSH2 0x56A DUP5 DUP5 DUP5 DUP5 PUSH2 0x95D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x57B DUP3 PUSH2 0x612 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x592 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x5B2 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x5DD JUMP JUMPDEST DUP1 PUSH2 0x5BC DUP5 PUSH2 0x990 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5CD SWAP3 SWAP2 SWAP1 PUSH2 0x1007 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x61B DUP2 PUSH2 0xA23 JUMP JUMPDEST PUSH2 0x637 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36E SWAP1 PUSH2 0xFD5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x66F DUP3 PUSH2 0x460 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6B4 DUP4 PUSH2 0x460 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x6DB JUMPI POP PUSH2 0x6DB DUP2 DUP6 PUSH2 0x5E4 JUMP JUMPDEST DUP1 PUSH2 0x6FF JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6F4 DUP5 PUSH2 0x2D3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x71A DUP3 PUSH2 0x460 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x740 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36E SWAP1 PUSH2 0x1036 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x7A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x36E JUMP JUMPDEST PUSH2 0x7AF DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0xA40 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7C2 DUP3 PUSH2 0x460 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36E SWAP1 PUSH2 0x1036 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x8F0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x22A9219B99189D1030B8383937BB32903A379031B0B63632B9 PUSH1 0x39 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x36E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x968 DUP5 DUP5 DUP5 PUSH2 0x707 JUMP JUMPDEST PUSH2 0x974 DUP5 DUP5 DUP5 DUP5 PUSH2 0xAC8 JUMP JUMPDEST PUSH2 0x56A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36E SWAP1 PUSH2 0x107B JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x99D DUP4 PUSH2 0xBC9 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9BD JUMPI PUSH2 0x9BD PUSH2 0xE29 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9E7 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x9F1 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xA2F DUP4 PUSH2 0x878 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x56A JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0xA86 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xA80 SWAP1 DUP5 SWAP1 PUSH2 0x10E3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x56A JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xABD SWAP1 DUP5 SWAP1 PUSH2 0x10F6 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xBBE JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xB0C SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1109 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xB47 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xB44 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1146 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xBA4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xB75 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB7A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xB9C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36E SWAP1 PUSH2 0x107B JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x6FF JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0xC08 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xC34 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xC52 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xC6A JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xC7E JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xC90 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x23B JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x637 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x5DD DUP2 PUSH2 0xCA1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCEF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xCD7 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xD10 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xCD4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x5DD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCF8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD88 DUP4 PUSH2 0xD50 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xDAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDB4 DUP5 PUSH2 0xD50 JUMP JUMPDEST SWAP3 POP PUSH2 0xDC2 PUSH1 0x20 DUP6 ADD PUSH2 0xD50 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5DD DUP3 PUSH2 0xD50 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE09 DUP4 PUSH2 0xD50 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xE55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE5E DUP6 PUSH2 0xD50 JUMP JUMPDEST SWAP4 POP PUSH2 0xE6C PUSH1 0x20 DUP7 ADD PUSH2 0xD50 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xEA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xEB6 JUMPI PUSH2 0xEB6 PUSH2 0xE29 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xEDE JUMPI PUSH2 0xEDE PUSH2 0xE29 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xEF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF37 DUP4 PUSH2 0xD50 JUMP JUMPDEST SWAP2 POP PUSH2 0xF45 PUSH1 0x20 DUP5 ADD PUSH2 0xD50 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xF62 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xF82 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1019 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xCD4 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x102D DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xCD4 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x23B JUMPI PUSH2 0x23B PUSH2 0x10CD JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x23B JUMPI PUSH2 0x23B PUSH2 0x10CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x113C SWAP1 DUP4 ADD DUP5 PUSH2 0xCF8 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1158 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x5DD DUP2 PUSH2 0xCA1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SAR 0xED SWAP1 JUMPDEST 0xDF SELFDESTRUCT PUSH20 0xF4F44DAC5C98BBDBC139B325527F7C3AAC16826B 0x27 PUSH1 0x8B 0xC3 0xB6 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"628:16327:19:-:0;;;1390:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1456:5;:13;1464:5;1456;:13;:::i;:::-;-1:-1:-1;1479:7:19;:17;1489:7;1479;:17;:::i;:::-;;1390:113;;628:16327;;14:127:33;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:840;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:33;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:33;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;954:1;932:15;;;928:24;;;921:35;;;;936:6;146:840;-1:-1:-1;;;;146:840:33:o;991:562::-;1090:6;1098;1151:2;1139:9;1130:7;1126:23;1122:32;1119:52;;;1167:1;1164;1157:12;1119:52;1194:16;;-1:-1:-1;;;;;1259:14:33;;;1256:34;;;1286:1;1283;1276:12;1256:34;1309:61;1362:7;1353:6;1342:9;1338:22;1309:61;:::i;:::-;1299:71;;1416:2;1405:9;1401:18;1395:25;1379:41;;1445:2;1435:8;1432:16;1429:36;;;1461:1;1458;1451:12;1429:36;;1484:63;1539:7;1528:8;1517:9;1513:24;1484:63;:::i;:::-;1474:73;;;991:562;;;;;:::o;1558:380::-;1637:1;1633:12;;;;1680;;;1701:61;;1755:4;1747:6;1743:17;1733:27;;1701:61;1808:2;1800:6;1797:14;1777:18;1774:38;1771:161;;1854:10;1849:3;1845:20;1842:1;1835:31;1889:4;1886:1;1879:15;1917:4;1914:1;1907:15;1771:161;;1558:380;;;:::o;2069:545::-;2171:2;2166:3;2163:11;2160:448;;;2207:1;2232:5;2228:2;2221:17;2277:4;2273:2;2263:19;2347:2;2335:10;2331:19;2328:1;2324:27;2318:4;2314:38;2383:4;2371:10;2368:20;2365:47;;;-1:-1:-1;2406:4:33;2365:47;2461:2;2456:3;2452:12;2449:1;2445:20;2439:4;2435:31;2425:41;;2516:82;2534:2;2527:5;2524:13;2516:82;;;2579:17;;;2560:1;2549:13;2516:82;;;2520:3;;;2160:448;2069:545;;;:::o;2790:1352::-;2910:10;;-1:-1:-1;;;;;2932:30:33;;2929:56;;;2965:18;;:::i;:::-;2994:97;3084:6;3044:38;3076:4;3070:11;3044:38;:::i;:::-;3038:4;2994:97;:::i;:::-;3146:4;;3210:2;3199:14;;3227:1;3222:663;;;;3929:1;3946:6;3943:89;;;-1:-1:-1;3998:19:33;;;3992:26;3943:89;-1:-1:-1;;2747:1:33;2743:11;;;2739:24;2735:29;2725:40;2771:1;2767:11;;;2722:57;4045:81;;3192:944;;3222:663;2016:1;2009:14;;;2053:4;2040:18;;-1:-1:-1;;3258:20:33;;;3376:236;3390:7;3387:1;3384:14;3376:236;;;3479:19;;;3473:26;3458:42;;3571:27;;;;3539:1;3527:14;;;;3406:19;;3376:236;;;3380:3;3640:6;3631:7;3628:19;3625:201;;;3701:19;;;3695:26;-1:-1:-1;;3784:1:33;3780:14;;;3796:3;3776:24;3772:37;3768:42;3753:58;3738:74;;3625:201;-1:-1:-1;;;;;3872:1:33;3856:14;;;3852:22;3839:36;;-1:-1:-1;2790:1352:33:o;:::-;628:16327:19;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_4497":{"entryPoint":null,"id":4497,"parameterSlots":4,"returnSlots":0},"@_approve_4330":{"entryPoint":1594,"id":4330,"parameterSlots":2,"returnSlots":0},"@_baseURI_3767":{"entryPoint":null,"id":3767,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_4484":{"entryPoint":2624,"id":4484,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_4438":{"entryPoint":2760,"id":4438,"parameterSlots":4,"returnSlots":1},"@_exists_3999":{"entryPoint":2595,"id":3999,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_4033":{"entryPoint":1704,"id":4033,"parameterSlots":2,"returnSlots":1},"@_msgSender_5001":{"entryPoint":null,"id":5001,"parameterSlots":0,"returnSlots":1},"@_ownerOf_3981":{"entryPoint":2168,"id":3981,"parameterSlots":1,"returnSlots":1},"@_requireMinted_4376":{"entryPoint":1554,"id":4376,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_3968":{"entryPoint":2397,"id":3968,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_4362":{"entryPoint":2195,"id":4362,"parameterSlots":3,"returnSlots":0},"@_transfer_4306":{"entryPoint":1799,"id":4306,"parameterSlots":3,"returnSlots":0},"@approve_3810":{"entryPoint":762,"id":3810,"parameterSlots":2,"returnSlots":0},"@balanceOf_3671":{"entryPoint":1172,"id":3671,"parameterSlots":1,"returnSlots":1},"@getApproved_3828":{"entryPoint":723,"id":3828,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_3863":{"entryPoint":1508,"id":3863,"parameterSlots":2,"returnSlots":1},"@isContract_4677":{"entryPoint":null,"id":4677,"parameterSlots":1,"returnSlots":1},"@log10_5998":{"entryPoint":3017,"id":5998,"parameterSlots":1,"returnSlots":1},"@name_3709":{"entryPoint":577,"id":3709,"parameterSlots":0,"returnSlots":1},"@ownerOf_3699":{"entryPoint":1120,"id":3699,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_3909":{"entryPoint":1093,"id":3909,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_3939":{"entryPoint":1336,"id":3939,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_3845":{"entryPoint":1321,"id":3845,"parameterSlots":2,"returnSlots":0},"@supportsInterface_3647":{"entryPoint":495,"id":3647,"parameterSlots":1,"returnSlots":1},"@supportsInterface_5283":{"entryPoint":null,"id":5283,"parameterSlots":1,"returnSlots":1},"@symbol_3719":{"entryPoint":1306,"id":3719,"parameterSlots":0,"returnSlots":1},"@toString_5143":{"entryPoint":2448,"id":5143,"parameterSlots":1,"returnSlots":1},"@tokenURI_3758":{"entryPoint":1392,"id":3758,"parameterSlots":1,"returnSlots":1},"@transferFrom_3890":{"entryPoint":1044,"id":3890,"parameterSlots":3,"returnSlots":0},"abi_decode_address":{"entryPoint":3408,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3538,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":3867,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":3478,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":3647,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":3565,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":3436,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":3255,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":4422,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":3383,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":3320,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":4103,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4361,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3364,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3976,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4219,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4150,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4053,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4342,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4323,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":3284,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":3918,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4301,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3625,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":3233,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:10527:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:87:33","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:33"},"nodeType":"YulFunctionCall","src":"125:12:33"},"nodeType":"YulExpressionStatement","src":"125:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"108:10:33","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"99:3:33"},"nodeType":"YulFunctionCall","src":"99:20:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:33"},"nodeType":"YulFunctionCall","src":"88:32:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:33"},"nodeType":"YulFunctionCall","src":"78:43:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:33"},"nodeType":"YulFunctionCall","src":"71:51:33"},"nodeType":"YulIf","src":"68:71:33"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:33","type":""}],"src":"14:131:33"},{"body":{"nodeType":"YulBlock","src":"219:176:33","statements":[{"body":{"nodeType":"YulBlock","src":"265:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"274:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"277:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"267:6:33"},"nodeType":"YulFunctionCall","src":"267:12:33"},"nodeType":"YulExpressionStatement","src":"267:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"240:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"249:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"236:3:33"},"nodeType":"YulFunctionCall","src":"236:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"261:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"232:3:33"},"nodeType":"YulFunctionCall","src":"232:32:33"},"nodeType":"YulIf","src":"229:52:33"},{"nodeType":"YulVariableDeclaration","src":"290:36:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"316:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"303:12:33"},"nodeType":"YulFunctionCall","src":"303:23:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"294:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"359:5:33"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"335:23:33"},"nodeType":"YulFunctionCall","src":"335:30:33"},"nodeType":"YulExpressionStatement","src":"335:30:33"},{"nodeType":"YulAssignment","src":"374:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"384:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"374:6:33"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"185:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"196:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"208:6:33","type":""}],"src":"150:245:33"},{"body":{"nodeType":"YulBlock","src":"495:92:33","statements":[{"nodeType":"YulAssignment","src":"505:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"517:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"528:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"513:3:33"},"nodeType":"YulFunctionCall","src":"513:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"505:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"547:9:33"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"572:6:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"565:6:33"},"nodeType":"YulFunctionCall","src":"565:14:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"558:6:33"},"nodeType":"YulFunctionCall","src":"558:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"540:6:33"},"nodeType":"YulFunctionCall","src":"540:41:33"},"nodeType":"YulExpressionStatement","src":"540:41:33"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"464:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"475:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"486:4:33","type":""}],"src":"400:187:33"},{"body":{"nodeType":"YulBlock","src":"658:184:33","statements":[{"nodeType":"YulVariableDeclaration","src":"668:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"677:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"672:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"737:63:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"762:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"767:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"758:3:33"},"nodeType":"YulFunctionCall","src":"758:11:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"781:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"786:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:33"},"nodeType":"YulFunctionCall","src":"777:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"771:5:33"},"nodeType":"YulFunctionCall","src":"771:18:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"751:6:33"},"nodeType":"YulFunctionCall","src":"751:39:33"},"nodeType":"YulExpressionStatement","src":"751:39:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"698:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"701:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"695:2:33"},"nodeType":"YulFunctionCall","src":"695:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"709:19:33","statements":[{"nodeType":"YulAssignment","src":"711:15:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"720:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"723:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"716:3:33"},"nodeType":"YulFunctionCall","src":"716:10:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"711:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"691:3:33","statements":[]},"src":"687:113:33"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"820:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"825:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"816:3:33"},"nodeType":"YulFunctionCall","src":"816:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"834:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"809:6:33"},"nodeType":"YulFunctionCall","src":"809:27:33"},"nodeType":"YulExpressionStatement","src":"809:27:33"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"636:3:33","type":""},{"name":"dst","nodeType":"YulTypedName","src":"641:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"646:6:33","type":""}],"src":"592:250:33"},{"body":{"nodeType":"YulBlock","src":"897:221:33","statements":[{"nodeType":"YulVariableDeclaration","src":"907:26:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"927:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"921:5:33"},"nodeType":"YulFunctionCall","src":"921:12:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"911:6:33","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"949:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"954:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"942:6:33"},"nodeType":"YulFunctionCall","src":"942:19:33"},"nodeType":"YulExpressionStatement","src":"942:19:33"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1009:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"1016:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1005:3:33"},"nodeType":"YulFunctionCall","src":"1005:16:33"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1027:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"1032:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1023:3:33"},"nodeType":"YulFunctionCall","src":"1023:14:33"},{"name":"length","nodeType":"YulIdentifier","src":"1039:6:33"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"970:34:33"},"nodeType":"YulFunctionCall","src":"970:76:33"},"nodeType":"YulExpressionStatement","src":"970:76:33"},{"nodeType":"YulAssignment","src":"1055:57:33","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1070:3:33"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1083:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1091:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1079:3:33"},"nodeType":"YulFunctionCall","src":"1079:15:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1100:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1096:3:33"},"nodeType":"YulFunctionCall","src":"1096:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1075:3:33"},"nodeType":"YulFunctionCall","src":"1075:29:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1066:3:33"},"nodeType":"YulFunctionCall","src":"1066:39:33"},{"kind":"number","nodeType":"YulLiteral","src":"1107:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1062:3:33"},"nodeType":"YulFunctionCall","src":"1062:50:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1055:3:33"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"874:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"881:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"889:3:33","type":""}],"src":"847:271:33"},{"body":{"nodeType":"YulBlock","src":"1244:99:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1261:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1272:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1254:6:33"},"nodeType":"YulFunctionCall","src":"1254:21:33"},"nodeType":"YulExpressionStatement","src":"1254:21:33"},{"nodeType":"YulAssignment","src":"1284:53:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1310:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1322:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1333:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1318:3:33"},"nodeType":"YulFunctionCall","src":"1318:18:33"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1292:17:33"},"nodeType":"YulFunctionCall","src":"1292:45:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1284:4:33"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1213:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1224:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1235:4:33","type":""}],"src":"1123:220:33"},{"body":{"nodeType":"YulBlock","src":"1418:110:33","statements":[{"body":{"nodeType":"YulBlock","src":"1464:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1473:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1476:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1466:6:33"},"nodeType":"YulFunctionCall","src":"1466:12:33"},"nodeType":"YulExpressionStatement","src":"1466:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1439:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"1448:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1435:3:33"},"nodeType":"YulFunctionCall","src":"1435:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"1460:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1431:3:33"},"nodeType":"YulFunctionCall","src":"1431:32:33"},"nodeType":"YulIf","src":"1428:52:33"},{"nodeType":"YulAssignment","src":"1489:33:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1512:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1499:12:33"},"nodeType":"YulFunctionCall","src":"1499:23:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1489:6:33"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1384:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1395:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1407:6:33","type":""}],"src":"1348:180:33"},{"body":{"nodeType":"YulBlock","src":"1634:102:33","statements":[{"nodeType":"YulAssignment","src":"1644:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1656:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1667:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1652:3:33"},"nodeType":"YulFunctionCall","src":"1652:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1644:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1686:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1701:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1717:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1722:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1713:3:33"},"nodeType":"YulFunctionCall","src":"1713:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"1726:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1709:3:33"},"nodeType":"YulFunctionCall","src":"1709:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1697:3:33"},"nodeType":"YulFunctionCall","src":"1697:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1679:6:33"},"nodeType":"YulFunctionCall","src":"1679:51:33"},"nodeType":"YulExpressionStatement","src":"1679:51:33"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1603:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1614:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1625:4:33","type":""}],"src":"1533:203:33"},{"body":{"nodeType":"YulBlock","src":"1790:124:33","statements":[{"nodeType":"YulAssignment","src":"1800:29:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1822:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1809:12:33"},"nodeType":"YulFunctionCall","src":"1809:20:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1800:5:33"}]},{"body":{"nodeType":"YulBlock","src":"1892:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1901:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1904:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1894:6:33"},"nodeType":"YulFunctionCall","src":"1894:12:33"},"nodeType":"YulExpressionStatement","src":"1894:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1851:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1862:5:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1877:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1882:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1873:3:33"},"nodeType":"YulFunctionCall","src":"1873:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"1886:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1869:3:33"},"nodeType":"YulFunctionCall","src":"1869:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1858:3:33"},"nodeType":"YulFunctionCall","src":"1858:31:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1848:2:33"},"nodeType":"YulFunctionCall","src":"1848:42:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1841:6:33"},"nodeType":"YulFunctionCall","src":"1841:50:33"},"nodeType":"YulIf","src":"1838:70:33"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1769:6:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1780:5:33","type":""}],"src":"1741:173:33"},{"body":{"nodeType":"YulBlock","src":"2006:167:33","statements":[{"body":{"nodeType":"YulBlock","src":"2052:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2061:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2064:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2054:6:33"},"nodeType":"YulFunctionCall","src":"2054:12:33"},"nodeType":"YulExpressionStatement","src":"2054:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2027:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"2036:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2023:3:33"},"nodeType":"YulFunctionCall","src":"2023:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"2048:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2019:3:33"},"nodeType":"YulFunctionCall","src":"2019:32:33"},"nodeType":"YulIf","src":"2016:52:33"},{"nodeType":"YulAssignment","src":"2077:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2106:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2087:18:33"},"nodeType":"YulFunctionCall","src":"2087:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2077:6:33"}]},{"nodeType":"YulAssignment","src":"2125:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2152:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2163:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2148:3:33"},"nodeType":"YulFunctionCall","src":"2148:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2135:12:33"},"nodeType":"YulFunctionCall","src":"2135:32:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2125:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1964:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1975:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1987:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1995:6:33","type":""}],"src":"1919:254:33"},{"body":{"nodeType":"YulBlock","src":"2282:224:33","statements":[{"body":{"nodeType":"YulBlock","src":"2328:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2337:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2340:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2330:6:33"},"nodeType":"YulFunctionCall","src":"2330:12:33"},"nodeType":"YulExpressionStatement","src":"2330:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2303:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"2312:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2299:3:33"},"nodeType":"YulFunctionCall","src":"2299:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"2324:2:33","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2295:3:33"},"nodeType":"YulFunctionCall","src":"2295:32:33"},"nodeType":"YulIf","src":"2292:52:33"},{"nodeType":"YulAssignment","src":"2353:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2382:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2363:18:33"},"nodeType":"YulFunctionCall","src":"2363:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2353:6:33"}]},{"nodeType":"YulAssignment","src":"2401:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2434:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2445:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2430:3:33"},"nodeType":"YulFunctionCall","src":"2430:18:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2411:18:33"},"nodeType":"YulFunctionCall","src":"2411:38:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2401:6:33"}]},{"nodeType":"YulAssignment","src":"2458:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2485:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2496:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2481:3:33"},"nodeType":"YulFunctionCall","src":"2481:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2468:12:33"},"nodeType":"YulFunctionCall","src":"2468:32:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2458:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2232:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2243:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2255:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2263:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2271:6:33","type":""}],"src":"2178:328:33"},{"body":{"nodeType":"YulBlock","src":"2581:116:33","statements":[{"body":{"nodeType":"YulBlock","src":"2627:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2636:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2639:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2629:6:33"},"nodeType":"YulFunctionCall","src":"2629:12:33"},"nodeType":"YulExpressionStatement","src":"2629:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2602:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"2611:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2598:3:33"},"nodeType":"YulFunctionCall","src":"2598:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"2623:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2594:3:33"},"nodeType":"YulFunctionCall","src":"2594:32:33"},"nodeType":"YulIf","src":"2591:52:33"},{"nodeType":"YulAssignment","src":"2652:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2681:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2662:18:33"},"nodeType":"YulFunctionCall","src":"2662:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2652:6:33"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2547:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2558:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2570:6:33","type":""}],"src":"2511:186:33"},{"body":{"nodeType":"YulBlock","src":"2803:76:33","statements":[{"nodeType":"YulAssignment","src":"2813:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2825:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2836:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2821:3:33"},"nodeType":"YulFunctionCall","src":"2821:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2813:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2855:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"2866:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2848:6:33"},"nodeType":"YulFunctionCall","src":"2848:25:33"},"nodeType":"YulExpressionStatement","src":"2848:25:33"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2772:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2783:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2794:4:33","type":""}],"src":"2702:177:33"},{"body":{"nodeType":"YulBlock","src":"2968:263:33","statements":[{"body":{"nodeType":"YulBlock","src":"3014:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3023:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3026:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3016:6:33"},"nodeType":"YulFunctionCall","src":"3016:12:33"},"nodeType":"YulExpressionStatement","src":"3016:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2989:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"2998:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2985:3:33"},"nodeType":"YulFunctionCall","src":"2985:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"3010:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2981:3:33"},"nodeType":"YulFunctionCall","src":"2981:32:33"},"nodeType":"YulIf","src":"2978:52:33"},{"nodeType":"YulAssignment","src":"3039:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3068:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3049:18:33"},"nodeType":"YulFunctionCall","src":"3049:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3039:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"3087:45:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3117:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3128:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3113:3:33"},"nodeType":"YulFunctionCall","src":"3113:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3100:12:33"},"nodeType":"YulFunctionCall","src":"3100:32:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3091:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3185:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3194:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3197:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3187:6:33"},"nodeType":"YulFunctionCall","src":"3187:12:33"},"nodeType":"YulExpressionStatement","src":"3187:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3154:5:33"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3175:5:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3168:6:33"},"nodeType":"YulFunctionCall","src":"3168:13:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3161:6:33"},"nodeType":"YulFunctionCall","src":"3161:21:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3151:2:33"},"nodeType":"YulFunctionCall","src":"3151:32:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3144:6:33"},"nodeType":"YulFunctionCall","src":"3144:40:33"},"nodeType":"YulIf","src":"3141:60:33"},{"nodeType":"YulAssignment","src":"3210:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"3220:5:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3210:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2926:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2937:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2949:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2957:6:33","type":""}],"src":"2884:347:33"},{"body":{"nodeType":"YulBlock","src":"3268:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3285:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3292:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3297:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3288:3:33"},"nodeType":"YulFunctionCall","src":"3288:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3278:6:33"},"nodeType":"YulFunctionCall","src":"3278:31:33"},"nodeType":"YulExpressionStatement","src":"3278:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3325:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3328:4:33","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3318:6:33"},"nodeType":"YulFunctionCall","src":"3318:15:33"},"nodeType":"YulExpressionStatement","src":"3318:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3349:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3352:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3342:6:33"},"nodeType":"YulFunctionCall","src":"3342:15:33"},"nodeType":"YulExpressionStatement","src":"3342:15:33"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3236:127:33"},{"body":{"nodeType":"YulBlock","src":"3498:1008:33","statements":[{"body":{"nodeType":"YulBlock","src":"3545:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3554:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3557:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3547:6:33"},"nodeType":"YulFunctionCall","src":"3547:12:33"},"nodeType":"YulExpressionStatement","src":"3547:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3519:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"3528:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3515:3:33"},"nodeType":"YulFunctionCall","src":"3515:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"3540:3:33","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3511:3:33"},"nodeType":"YulFunctionCall","src":"3511:33:33"},"nodeType":"YulIf","src":"3508:53:33"},{"nodeType":"YulAssignment","src":"3570:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3599:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3580:18:33"},"nodeType":"YulFunctionCall","src":"3580:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3570:6:33"}]},{"nodeType":"YulAssignment","src":"3618:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3651:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3662:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3647:3:33"},"nodeType":"YulFunctionCall","src":"3647:18:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3628:18:33"},"nodeType":"YulFunctionCall","src":"3628:38:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3618:6:33"}]},{"nodeType":"YulAssignment","src":"3675:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3702:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3713:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3698:3:33"},"nodeType":"YulFunctionCall","src":"3698:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3685:12:33"},"nodeType":"YulFunctionCall","src":"3685:32:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3675:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"3726:46:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3757:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3768:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3753:3:33"},"nodeType":"YulFunctionCall","src":"3753:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3740:12:33"},"nodeType":"YulFunctionCall","src":"3740:32:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3730:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3781:28:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3791:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3785:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3836:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3845:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3848:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3838:6:33"},"nodeType":"YulFunctionCall","src":"3838:12:33"},"nodeType":"YulExpressionStatement","src":"3838:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3824:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"3832:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3821:2:33"},"nodeType":"YulFunctionCall","src":"3821:14:33"},"nodeType":"YulIf","src":"3818:34:33"},{"nodeType":"YulVariableDeclaration","src":"3861:32:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3875:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"3886:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3871:3:33"},"nodeType":"YulFunctionCall","src":"3871:22:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3865:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3941:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3950:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3953:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3943:6:33"},"nodeType":"YulFunctionCall","src":"3943:12:33"},"nodeType":"YulExpressionStatement","src":"3943:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3920:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"3924:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3916:3:33"},"nodeType":"YulFunctionCall","src":"3916:13:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3931:7:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3912:3:33"},"nodeType":"YulFunctionCall","src":"3912:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3905:6:33"},"nodeType":"YulFunctionCall","src":"3905:35:33"},"nodeType":"YulIf","src":"3902:55:33"},{"nodeType":"YulVariableDeclaration","src":"3966:26:33","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3989:2:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3976:12:33"},"nodeType":"YulFunctionCall","src":"3976:16:33"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3970:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4015:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4017:16:33"},"nodeType":"YulFunctionCall","src":"4017:18:33"},"nodeType":"YulExpressionStatement","src":"4017:18:33"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4007:2:33"},{"name":"_1","nodeType":"YulIdentifier","src":"4011:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4004:2:33"},"nodeType":"YulFunctionCall","src":"4004:10:33"},"nodeType":"YulIf","src":"4001:36:33"},{"nodeType":"YulVariableDeclaration","src":"4046:17:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4060:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4056:3:33"},"nodeType":"YulFunctionCall","src":"4056:7:33"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"4050:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4072:23:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4092:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4086:5:33"},"nodeType":"YulFunctionCall","src":"4086:9:33"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4076:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4104:71:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4126:6:33"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4150:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"4154:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4146:3:33"},"nodeType":"YulFunctionCall","src":"4146:13:33"},{"name":"_4","nodeType":"YulIdentifier","src":"4161:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4142:3:33"},"nodeType":"YulFunctionCall","src":"4142:22:33"},{"kind":"number","nodeType":"YulLiteral","src":"4166:2:33","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4138:3:33"},"nodeType":"YulFunctionCall","src":"4138:31:33"},{"name":"_4","nodeType":"YulIdentifier","src":"4171:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4134:3:33"},"nodeType":"YulFunctionCall","src":"4134:40:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4122:3:33"},"nodeType":"YulFunctionCall","src":"4122:53:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4108:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4234:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4236:16:33"},"nodeType":"YulFunctionCall","src":"4236:18:33"},"nodeType":"YulExpressionStatement","src":"4236:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4193:10:33"},{"name":"_1","nodeType":"YulIdentifier","src":"4205:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4190:2:33"},"nodeType":"YulFunctionCall","src":"4190:18:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4213:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4225:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4210:2:33"},"nodeType":"YulFunctionCall","src":"4210:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4187:2:33"},"nodeType":"YulFunctionCall","src":"4187:46:33"},"nodeType":"YulIf","src":"4184:72:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4272:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4276:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4265:6:33"},"nodeType":"YulFunctionCall","src":"4265:22:33"},"nodeType":"YulExpressionStatement","src":"4265:22:33"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4303:6:33"},{"name":"_3","nodeType":"YulIdentifier","src":"4311:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4296:6:33"},"nodeType":"YulFunctionCall","src":"4296:18:33"},"nodeType":"YulExpressionStatement","src":"4296:18:33"},{"body":{"nodeType":"YulBlock","src":"4360:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4369:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4372:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4362:6:33"},"nodeType":"YulFunctionCall","src":"4362:12:33"},"nodeType":"YulExpressionStatement","src":"4362:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4337:2:33"},{"name":"_3","nodeType":"YulIdentifier","src":"4341:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4333:3:33"},"nodeType":"YulFunctionCall","src":"4333:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"4346:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4329:3:33"},"nodeType":"YulFunctionCall","src":"4329:20:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4351:7:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4326:2:33"},"nodeType":"YulFunctionCall","src":"4326:33:33"},"nodeType":"YulIf","src":"4323:53:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4402:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"4410:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4398:3:33"},"nodeType":"YulFunctionCall","src":"4398:15:33"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4419:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"4423:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4415:3:33"},"nodeType":"YulFunctionCall","src":"4415:11:33"},{"name":"_3","nodeType":"YulIdentifier","src":"4428:2:33"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4385:12:33"},"nodeType":"YulFunctionCall","src":"4385:46:33"},"nodeType":"YulExpressionStatement","src":"4385:46:33"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4455:6:33"},{"name":"_3","nodeType":"YulIdentifier","src":"4463:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4451:3:33"},"nodeType":"YulFunctionCall","src":"4451:15:33"},{"kind":"number","nodeType":"YulLiteral","src":"4468:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4447:3:33"},"nodeType":"YulFunctionCall","src":"4447:24:33"},{"kind":"number","nodeType":"YulLiteral","src":"4473:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4440:6:33"},"nodeType":"YulFunctionCall","src":"4440:35:33"},"nodeType":"YulExpressionStatement","src":"4440:35:33"},{"nodeType":"YulAssignment","src":"4484:16:33","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4494:6:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4484:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3440:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3451:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3463:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3471:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3479:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3487:6:33","type":""}],"src":"3368:1138:33"},{"body":{"nodeType":"YulBlock","src":"4598:173:33","statements":[{"body":{"nodeType":"YulBlock","src":"4644:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4653:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4656:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4646:6:33"},"nodeType":"YulFunctionCall","src":"4646:12:33"},"nodeType":"YulExpressionStatement","src":"4646:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4619:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"4628:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4615:3:33"},"nodeType":"YulFunctionCall","src":"4615:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"4640:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4611:3:33"},"nodeType":"YulFunctionCall","src":"4611:32:33"},"nodeType":"YulIf","src":"4608:52:33"},{"nodeType":"YulAssignment","src":"4669:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4698:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4679:18:33"},"nodeType":"YulFunctionCall","src":"4679:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4669:6:33"}]},{"nodeType":"YulAssignment","src":"4717:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4750:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4761:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4746:3:33"},"nodeType":"YulFunctionCall","src":"4746:18:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4727:18:33"},"nodeType":"YulFunctionCall","src":"4727:38:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4717:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4556:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4567:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4579:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4587:6:33","type":""}],"src":"4511:260:33"},{"body":{"nodeType":"YulBlock","src":"4831:325:33","statements":[{"nodeType":"YulAssignment","src":"4841:22:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4855:1:33","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"4858:4:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4851:3:33"},"nodeType":"YulFunctionCall","src":"4851:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4841:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"4872:38:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4902:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"4908:1:33","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4898:3:33"},"nodeType":"YulFunctionCall","src":"4898:12:33"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"4876:18:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4949:31:33","statements":[{"nodeType":"YulAssignment","src":"4951:27:33","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4965:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"4973:4:33","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4961:3:33"},"nodeType":"YulFunctionCall","src":"4961:17:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4951:6:33"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4929:18:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4922:6:33"},"nodeType":"YulFunctionCall","src":"4922:26:33"},"nodeType":"YulIf","src":"4919:61:33"},{"body":{"nodeType":"YulBlock","src":"5039:111:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5060:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5067:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5072:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5063:3:33"},"nodeType":"YulFunctionCall","src":"5063:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5053:6:33"},"nodeType":"YulFunctionCall","src":"5053:31:33"},"nodeType":"YulExpressionStatement","src":"5053:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5104:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5107:4:33","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5097:6:33"},"nodeType":"YulFunctionCall","src":"5097:15:33"},"nodeType":"YulExpressionStatement","src":"5097:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5132:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5135:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5125:6:33"},"nodeType":"YulFunctionCall","src":"5125:15:33"},"nodeType":"YulExpressionStatement","src":"5125:15:33"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4995:18:33"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5018:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"5026:2:33","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5015:2:33"},"nodeType":"YulFunctionCall","src":"5015:14:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4992:2:33"},"nodeType":"YulFunctionCall","src":"4992:38:33"},"nodeType":"YulIf","src":"4989:161:33"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"4811:4:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"4820:6:33","type":""}],"src":"4776:380:33"},{"body":{"nodeType":"YulBlock","src":"5335:223:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5352:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5363:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5345:6:33"},"nodeType":"YulFunctionCall","src":"5345:21:33"},"nodeType":"YulExpressionStatement","src":"5345:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5386:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5397:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5382:3:33"},"nodeType":"YulFunctionCall","src":"5382:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"5402:2:33","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5375:6:33"},"nodeType":"YulFunctionCall","src":"5375:30:33"},"nodeType":"YulExpressionStatement","src":"5375:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5425:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5436:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5421:3:33"},"nodeType":"YulFunctionCall","src":"5421:18:33"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"5441:34:33","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5414:6:33"},"nodeType":"YulFunctionCall","src":"5414:62:33"},"nodeType":"YulExpressionStatement","src":"5414:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5496:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5507:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5492:3:33"},"nodeType":"YulFunctionCall","src":"5492:18:33"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"5512:3:33","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5485:6:33"},"nodeType":"YulFunctionCall","src":"5485:31:33"},"nodeType":"YulExpressionStatement","src":"5485:31:33"},{"nodeType":"YulAssignment","src":"5525:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5537:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5548:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5533:3:33"},"nodeType":"YulFunctionCall","src":"5533:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5525:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5312:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5326:4:33","type":""}],"src":"5161:397:33"},{"body":{"nodeType":"YulBlock","src":"5737:251:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5754:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5765:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5747:6:33"},"nodeType":"YulFunctionCall","src":"5747:21:33"},"nodeType":"YulExpressionStatement","src":"5747:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5788:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5799:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5784:3:33"},"nodeType":"YulFunctionCall","src":"5784:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"5804:2:33","type":"","value":"61"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5777:6:33"},"nodeType":"YulFunctionCall","src":"5777:30:33"},"nodeType":"YulExpressionStatement","src":"5777:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5827:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5838:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5823:3:33"},"nodeType":"YulFunctionCall","src":"5823:18:33"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"5843:34:33","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5816:6:33"},"nodeType":"YulFunctionCall","src":"5816:62:33"},"nodeType":"YulExpressionStatement","src":"5816:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5898:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5909:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5894:3:33"},"nodeType":"YulFunctionCall","src":"5894:18:33"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"5914:31:33","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5887:6:33"},"nodeType":"YulFunctionCall","src":"5887:59:33"},"nodeType":"YulExpressionStatement","src":"5887:59:33"},{"nodeType":"YulAssignment","src":"5955:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5967:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5978:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5963:3:33"},"nodeType":"YulFunctionCall","src":"5963:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5955:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5714:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5728:4:33","type":""}],"src":"5563:425:33"},{"body":{"nodeType":"YulBlock","src":"6167:235:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6184:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6195:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6177:6:33"},"nodeType":"YulFunctionCall","src":"6177:21:33"},"nodeType":"YulExpressionStatement","src":"6177:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6218:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6229:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6214:3:33"},"nodeType":"YulFunctionCall","src":"6214:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"6234:2:33","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6207:6:33"},"nodeType":"YulFunctionCall","src":"6207:30:33"},"nodeType":"YulExpressionStatement","src":"6207:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6257:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6268:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6253:3:33"},"nodeType":"YulFunctionCall","src":"6253:18:33"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"6273:34:33","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6246:6:33"},"nodeType":"YulFunctionCall","src":"6246:62:33"},"nodeType":"YulExpressionStatement","src":"6246:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6328:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6339:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6324:3:33"},"nodeType":"YulFunctionCall","src":"6324:18:33"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"6344:15:33","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6317:6:33"},"nodeType":"YulFunctionCall","src":"6317:43:33"},"nodeType":"YulExpressionStatement","src":"6317:43:33"},{"nodeType":"YulAssignment","src":"6369:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6381:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6392:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6377:3:33"},"nodeType":"YulFunctionCall","src":"6377:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6369:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6144:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6158:4:33","type":""}],"src":"5993:409:33"},{"body":{"nodeType":"YulBlock","src":"6581:174:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6598:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6609:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6591:6:33"},"nodeType":"YulFunctionCall","src":"6591:21:33"},"nodeType":"YulExpressionStatement","src":"6591:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6632:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6643:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6628:3:33"},"nodeType":"YulFunctionCall","src":"6628:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"6648:2:33","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6621:6:33"},"nodeType":"YulFunctionCall","src":"6621:30:33"},"nodeType":"YulExpressionStatement","src":"6621:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6671:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6682:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6667:3:33"},"nodeType":"YulFunctionCall","src":"6667:18:33"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"6687:26:33","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6660:6:33"},"nodeType":"YulFunctionCall","src":"6660:54:33"},"nodeType":"YulExpressionStatement","src":"6660:54:33"},{"nodeType":"YulAssignment","src":"6723:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6735:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6746:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6731:3:33"},"nodeType":"YulFunctionCall","src":"6731:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6723:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6558:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6572:4:33","type":""}],"src":"6407:348:33"},{"body":{"nodeType":"YulBlock","src":"6934:231:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6951:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6962:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6944:6:33"},"nodeType":"YulFunctionCall","src":"6944:21:33"},"nodeType":"YulExpressionStatement","src":"6944:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6985:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6996:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6981:3:33"},"nodeType":"YulFunctionCall","src":"6981:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"7001:2:33","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6974:6:33"},"nodeType":"YulFunctionCall","src":"6974:30:33"},"nodeType":"YulExpressionStatement","src":"6974:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7024:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7035:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7020:3:33"},"nodeType":"YulFunctionCall","src":"7020:18:33"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"7040:34:33","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7013:6:33"},"nodeType":"YulFunctionCall","src":"7013:62:33"},"nodeType":"YulExpressionStatement","src":"7013:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7095:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7106:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7091:3:33"},"nodeType":"YulFunctionCall","src":"7091:18:33"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"7111:11:33","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7084:6:33"},"nodeType":"YulFunctionCall","src":"7084:39:33"},"nodeType":"YulExpressionStatement","src":"7084:39:33"},{"nodeType":"YulAssignment","src":"7132:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7144:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7155:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7140:3:33"},"nodeType":"YulFunctionCall","src":"7140:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7132:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6911:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6925:4:33","type":""}],"src":"6760:405:33"},{"body":{"nodeType":"YulBlock","src":"7357:309:33","statements":[{"nodeType":"YulVariableDeclaration","src":"7367:27:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7387:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7381:5:33"},"nodeType":"YulFunctionCall","src":"7381:13:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7371:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7442:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"7450:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7438:3:33"},"nodeType":"YulFunctionCall","src":"7438:17:33"},{"name":"pos","nodeType":"YulIdentifier","src":"7457:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"7462:6:33"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7403:34:33"},"nodeType":"YulFunctionCall","src":"7403:66:33"},"nodeType":"YulExpressionStatement","src":"7403:66:33"},{"nodeType":"YulVariableDeclaration","src":"7478:29:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7495:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"7500:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7491:3:33"},"nodeType":"YulFunctionCall","src":"7491:16:33"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"7482:5:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7516:29:33","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7538:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7532:5:33"},"nodeType":"YulFunctionCall","src":"7532:13:33"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"7520:8:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7593:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"7601:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7589:3:33"},"nodeType":"YulFunctionCall","src":"7589:17:33"},{"name":"end_1","nodeType":"YulIdentifier","src":"7608:5:33"},{"name":"length_1","nodeType":"YulIdentifier","src":"7615:8:33"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7554:34:33"},"nodeType":"YulFunctionCall","src":"7554:70:33"},"nodeType":"YulExpressionStatement","src":"7554:70:33"},{"nodeType":"YulAssignment","src":"7633:27:33","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"7644:5:33"},{"name":"length_1","nodeType":"YulIdentifier","src":"7651:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7640:3:33"},"nodeType":"YulFunctionCall","src":"7640:20:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7633:3:33"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7325:3:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7330:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7338:6:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7349:3:33","type":""}],"src":"7170:496:33"},{"body":{"nodeType":"YulBlock","src":"7845:227:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7862:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7873:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7855:6:33"},"nodeType":"YulFunctionCall","src":"7855:21:33"},"nodeType":"YulExpressionStatement","src":"7855:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7896:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7907:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7892:3:33"},"nodeType":"YulFunctionCall","src":"7892:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"7912:2:33","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7885:6:33"},"nodeType":"YulFunctionCall","src":"7885:30:33"},"nodeType":"YulExpressionStatement","src":"7885:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7935:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7946:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7931:3:33"},"nodeType":"YulFunctionCall","src":"7931:18:33"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"7951:34:33","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7924:6:33"},"nodeType":"YulFunctionCall","src":"7924:62:33"},"nodeType":"YulExpressionStatement","src":"7924:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8006:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8017:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8002:3:33"},"nodeType":"YulFunctionCall","src":"8002:18:33"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"8022:7:33","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7995:6:33"},"nodeType":"YulFunctionCall","src":"7995:35:33"},"nodeType":"YulExpressionStatement","src":"7995:35:33"},{"nodeType":"YulAssignment","src":"8039:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8051:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8062:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8047:3:33"},"nodeType":"YulFunctionCall","src":"8047:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8039:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7822:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7836:4:33","type":""}],"src":"7671:401:33"},{"body":{"nodeType":"YulBlock","src":"8251:226:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8268:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8279:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8261:6:33"},"nodeType":"YulFunctionCall","src":"8261:21:33"},"nodeType":"YulExpressionStatement","src":"8261:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8302:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8313:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8298:3:33"},"nodeType":"YulFunctionCall","src":"8298:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"8318:2:33","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8291:6:33"},"nodeType":"YulFunctionCall","src":"8291:30:33"},"nodeType":"YulExpressionStatement","src":"8291:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8341:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8352:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8337:3:33"},"nodeType":"YulFunctionCall","src":"8337:18:33"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"8357:34:33","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8330:6:33"},"nodeType":"YulFunctionCall","src":"8330:62:33"},"nodeType":"YulExpressionStatement","src":"8330:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8412:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8423:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8408:3:33"},"nodeType":"YulFunctionCall","src":"8408:18:33"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"8428:6:33","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8401:6:33"},"nodeType":"YulFunctionCall","src":"8401:34:33"},"nodeType":"YulExpressionStatement","src":"8401:34:33"},{"nodeType":"YulAssignment","src":"8444:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8456:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8467:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8452:3:33"},"nodeType":"YulFunctionCall","src":"8452:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8444:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8228:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8242:4:33","type":""}],"src":"8077:400:33"},{"body":{"nodeType":"YulBlock","src":"8656:175:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8673:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8684:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8666:6:33"},"nodeType":"YulFunctionCall","src":"8666:21:33"},"nodeType":"YulExpressionStatement","src":"8666:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8707:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8718:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8703:3:33"},"nodeType":"YulFunctionCall","src":"8703:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"8723:2:33","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8696:6:33"},"nodeType":"YulFunctionCall","src":"8696:30:33"},"nodeType":"YulExpressionStatement","src":"8696:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8746:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8757:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8742:3:33"},"nodeType":"YulFunctionCall","src":"8742:18:33"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"8762:27:33","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8735:6:33"},"nodeType":"YulFunctionCall","src":"8735:55:33"},"nodeType":"YulExpressionStatement","src":"8735:55:33"},{"nodeType":"YulAssignment","src":"8799:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8811:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8822:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8807:3:33"},"nodeType":"YulFunctionCall","src":"8807:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8799:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8633:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8647:4:33","type":""}],"src":"8482:349:33"},{"body":{"nodeType":"YulBlock","src":"9010:240:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9027:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9038:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9020:6:33"},"nodeType":"YulFunctionCall","src":"9020:21:33"},"nodeType":"YulExpressionStatement","src":"9020:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9061:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9072:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9057:3:33"},"nodeType":"YulFunctionCall","src":"9057:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"9077:2:33","type":"","value":"50"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9050:6:33"},"nodeType":"YulFunctionCall","src":"9050:30:33"},"nodeType":"YulExpressionStatement","src":"9050:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9100:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9111:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9096:3:33"},"nodeType":"YulFunctionCall","src":"9096:18:33"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"9116:34:33","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9089:6:33"},"nodeType":"YulFunctionCall","src":"9089:62:33"},"nodeType":"YulExpressionStatement","src":"9089:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9171:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9182:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9167:3:33"},"nodeType":"YulFunctionCall","src":"9167:18:33"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"9187:20:33","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9160:6:33"},"nodeType":"YulFunctionCall","src":"9160:48:33"},"nodeType":"YulExpressionStatement","src":"9160:48:33"},{"nodeType":"YulAssignment","src":"9217:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9229:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9240:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9225:3:33"},"nodeType":"YulFunctionCall","src":"9225:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9217:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8987:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9001:4:33","type":""}],"src":"8836:414:33"},{"body":{"nodeType":"YulBlock","src":"9287:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9304:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9311:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9316:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9307:3:33"},"nodeType":"YulFunctionCall","src":"9307:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9297:6:33"},"nodeType":"YulFunctionCall","src":"9297:31:33"},"nodeType":"YulExpressionStatement","src":"9297:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9344:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9347:4:33","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9337:6:33"},"nodeType":"YulFunctionCall","src":"9337:15:33"},"nodeType":"YulExpressionStatement","src":"9337:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9368:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9371:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9361:6:33"},"nodeType":"YulFunctionCall","src":"9361:15:33"},"nodeType":"YulExpressionStatement","src":"9361:15:33"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"9255:127:33"},{"body":{"nodeType":"YulBlock","src":"9419:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9436:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9443:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9448:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9439:3:33"},"nodeType":"YulFunctionCall","src":"9439:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9429:6:33"},"nodeType":"YulFunctionCall","src":"9429:31:33"},"nodeType":"YulExpressionStatement","src":"9429:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9476:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9479:4:33","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9469:6:33"},"nodeType":"YulFunctionCall","src":"9469:15:33"},"nodeType":"YulExpressionStatement","src":"9469:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9500:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9503:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9493:6:33"},"nodeType":"YulFunctionCall","src":"9493:15:33"},"nodeType":"YulExpressionStatement","src":"9493:15:33"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"9387:127:33"},{"body":{"nodeType":"YulBlock","src":"9568:79:33","statements":[{"nodeType":"YulAssignment","src":"9578:17:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9590:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"9593:1:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9586:3:33"},"nodeType":"YulFunctionCall","src":"9586:9:33"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"9578:4:33"}]},{"body":{"nodeType":"YulBlock","src":"9619:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9621:16:33"},"nodeType":"YulFunctionCall","src":"9621:18:33"},"nodeType":"YulExpressionStatement","src":"9621:18:33"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"9610:4:33"},{"name":"x","nodeType":"YulIdentifier","src":"9616:1:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9607:2:33"},"nodeType":"YulFunctionCall","src":"9607:11:33"},"nodeType":"YulIf","src":"9604:37:33"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9550:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"9553:1:33","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"9559:4:33","type":""}],"src":"9519:128:33"},{"body":{"nodeType":"YulBlock","src":"9700:77:33","statements":[{"nodeType":"YulAssignment","src":"9710:16:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9721:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"9724:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9717:3:33"},"nodeType":"YulFunctionCall","src":"9717:9:33"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"9710:3:33"}]},{"body":{"nodeType":"YulBlock","src":"9749:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9751:16:33"},"nodeType":"YulFunctionCall","src":"9751:18:33"},"nodeType":"YulExpressionStatement","src":"9751:18:33"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9741:1:33"},{"name":"sum","nodeType":"YulIdentifier","src":"9744:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9738:2:33"},"nodeType":"YulFunctionCall","src":"9738:10:33"},"nodeType":"YulIf","src":"9735:36:33"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9683:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"9686:1:33","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"9692:3:33","type":""}],"src":"9652:125:33"},{"body":{"nodeType":"YulBlock","src":"9985:286:33","statements":[{"nodeType":"YulVariableDeclaration","src":"9995:29:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10013:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"10018:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10009:3:33"},"nodeType":"YulFunctionCall","src":"10009:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"10022:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10005:3:33"},"nodeType":"YulFunctionCall","src":"10005:19:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9999:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10040:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10055:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"10063:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10051:3:33"},"nodeType":"YulFunctionCall","src":"10051:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10033:6:33"},"nodeType":"YulFunctionCall","src":"10033:34:33"},"nodeType":"YulExpressionStatement","src":"10033:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10087:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10098:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10083:3:33"},"nodeType":"YulFunctionCall","src":"10083:18:33"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10107:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"10115:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10103:3:33"},"nodeType":"YulFunctionCall","src":"10103:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10076:6:33"},"nodeType":"YulFunctionCall","src":"10076:43:33"},"nodeType":"YulExpressionStatement","src":"10076:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10139:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10150:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10135:3:33"},"nodeType":"YulFunctionCall","src":"10135:18:33"},{"name":"value2","nodeType":"YulIdentifier","src":"10155:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10128:6:33"},"nodeType":"YulFunctionCall","src":"10128:34:33"},"nodeType":"YulExpressionStatement","src":"10128:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10182:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10193:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10178:3:33"},"nodeType":"YulFunctionCall","src":"10178:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"10198:3:33","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10171:6:33"},"nodeType":"YulFunctionCall","src":"10171:31:33"},"nodeType":"YulExpressionStatement","src":"10171:31:33"},{"nodeType":"YulAssignment","src":"10211:54:33","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"10237:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10249:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10260:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10245:3:33"},"nodeType":"YulFunctionCall","src":"10245:19:33"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"10219:17:33"},"nodeType":"YulFunctionCall","src":"10219:46:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10211:4:33"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9930:9:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9941:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9949:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9957:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9965:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9976:4:33","type":""}],"src":"9782:489:33"},{"body":{"nodeType":"YulBlock","src":"10356:169:33","statements":[{"body":{"nodeType":"YulBlock","src":"10402:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10411:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10414:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10404:6:33"},"nodeType":"YulFunctionCall","src":"10404:12:33"},"nodeType":"YulExpressionStatement","src":"10404:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10377:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"10386:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10373:3:33"},"nodeType":"YulFunctionCall","src":"10373:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"10398:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10369:3:33"},"nodeType":"YulFunctionCall","src":"10369:32:33"},"nodeType":"YulIf","src":"10366:52:33"},{"nodeType":"YulVariableDeclaration","src":"10427:29:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10446:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10440:5:33"},"nodeType":"YulFunctionCall","src":"10440:16:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"10431:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10489:5:33"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"10465:23:33"},"nodeType":"YulFunctionCall","src":"10465:30:33"},"nodeType":"YulExpressionStatement","src":"10465:30:33"},{"nodeType":"YulAssignment","src":"10504:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"10514:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10504:6:33"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10322:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10333:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10345:6:33","type":""}],"src":"10276:249:33"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 61)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not to\")\n        mstore(add(headStart, 96), \"ken owner or approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC721: caller is not token owne\")\n        mstore(add(headStart, 96), \"r or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ERC721: invalid token ID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: address zero is not a va\")\n        mstore(add(headStart, 96), \"lid owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100bf5760003560e01c80636352211e1161007c5780636352211e1461016757806370a082311461017a57806395d89b411461019b578063a22cb465146101a3578063b88d4fde146101b6578063c87b56dd146101c9578063e985e9c5146101dc57600080fd5b806301ffc9a7146100c457806306fdde03146100ec578063081812fc14610101578063095ea7b31461012c57806323b872dd1461014157806342842e0e14610154575b600080fd5b6100d76100d2366004610cb7565b6101ef565b60405190151581526020015b60405180910390f35b6100f4610241565b6040516100e39190610d24565b61011461010f366004610d37565b6102d3565b6040516001600160a01b0390911681526020016100e3565b61013f61013a366004610d6c565b6102fa565b005b61013f61014f366004610d96565b610414565b61013f610162366004610d96565b610445565b610114610175366004610d37565b610460565b61018d610188366004610dd2565b610494565b6040519081526020016100e3565b6100f461051a565b61013f6101b1366004610ded565b610529565b61013f6101c4366004610e3f565b610538565b6100f46101d7366004610d37565b610570565b6100d76101ea366004610f1b565b6105e4565b60006001600160e01b031982166380ac58cd60e01b148061022057506001600160e01b03198216635b5e139f60e01b145b8061023b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461025090610f4e565b80601f016020809104026020016040519081016040528092919081815260200182805461027c90610f4e565b80156102c95780601f1061029e576101008083540402835291602001916102c9565b820191906000526020600020905b8154815290600101906020018083116102ac57829003601f168201915b5050505050905090565b60006102de82610612565b506000908152600460205260409020546001600160a01b031690565b600061030582610460565b9050806001600160a01b0316836001600160a01b0316036103775760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610393575061039381336105e4565b6104055760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161036e565b61040f838361063a565b505050565b61041e33826106a8565b61043a5760405162461bcd60e51b815260040161036e90610f88565b61040f838383610707565b61040f83838360405180602001604052806000815250610538565b60008061046c83610878565b90506001600160a01b03811661023b5760405162461bcd60e51b815260040161036e90610fd5565b60006001600160a01b0382166104fe5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161036e565b506001600160a01b031660009081526003602052604090205490565b60606001805461025090610f4e565b610534338383610893565b5050565b61054233836106a8565b61055e5760405162461bcd60e51b815260040161036e90610f88565b61056a8484848461095d565b50505050565b606061057b82610612565b600061059260408051602081019091526000815290565b905060008151116105b257604051806020016040528060008152506105dd565b806105bc84610990565b6040516020016105cd929190611007565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61061b81610a23565b6106375760405162461bcd60e51b815260040161036e90610fd5565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061066f82610460565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806106b483610460565b9050806001600160a01b0316846001600160a01b031614806106db57506106db81856105e4565b806106ff5750836001600160a01b03166106f4846102d3565b6001600160a01b0316145b949350505050565b826001600160a01b031661071a82610460565b6001600160a01b0316146107405760405162461bcd60e51b815260040161036e90611036565b6001600160a01b0382166107a25760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161036e565b6107af8383836001610a40565b826001600160a01b03166107c282610460565b6001600160a01b0316146107e85760405162461bcd60e51b815260040161036e90611036565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000908152600260205260409020546001600160a01b031690565b816001600160a01b0316836001600160a01b0316036108f05760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640161036e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610968848484610707565b61097484848484610ac8565b61056a5760405162461bcd60e51b815260040161036e9061107b565b6060600061099d83610bc9565b600101905060008167ffffffffffffffff8111156109bd576109bd610e29565b6040519080825280601f01601f1916602001820160405280156109e7576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846109f157509392505050565b600080610a2f83610878565b6001600160a01b0316141592915050565b600181111561056a576001600160a01b03841615610a86576001600160a01b03841660009081526003602052604081208054839290610a809084906110e3565b90915550505b6001600160a01b0383161561056a576001600160a01b03831660009081526003602052604081208054839290610abd9084906110f6565b909155505050505050565b60006001600160a01b0384163b15610bbe57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610b0c903390899088908890600401611109565b6020604051808303816000875af1925050508015610b47575060408051601f3d908101601f19168201909252610b4491810190611146565b60015b610ba4573d808015610b75576040519150601f19603f3d011682016040523d82523d6000602084013e610b7a565b606091505b508051600003610b9c5760405162461bcd60e51b815260040161036e9061107b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506106ff565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610c085772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610c34576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610c5257662386f26fc10000830492506010015b6305f5e1008310610c6a576305f5e100830492506008015b6127108310610c7e57612710830492506004015b60648310610c90576064830492506002015b600a831061023b5760010192915050565b6001600160e01b03198116811461063757600080fd5b600060208284031215610cc957600080fd5b81356105dd81610ca1565b60005b83811015610cef578181015183820152602001610cd7565b50506000910152565b60008151808452610d10816020860160208601610cd4565b601f01601f19169290920160200192915050565b6020815260006105dd6020830184610cf8565b600060208284031215610d4957600080fd5b5035919050565b80356001600160a01b0381168114610d6757600080fd5b919050565b60008060408385031215610d7f57600080fd5b610d8883610d50565b946020939093013593505050565b600080600060608486031215610dab57600080fd5b610db484610d50565b9250610dc260208501610d50565b9150604084013590509250925092565b600060208284031215610de457600080fd5b6105dd82610d50565b60008060408385031215610e0057600080fd5b610e0983610d50565b915060208301358015158114610e1e57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610e5557600080fd5b610e5e85610d50565b9350610e6c60208601610d50565b925060408501359150606085013567ffffffffffffffff80821115610e9057600080fd5b818701915087601f830112610ea457600080fd5b813581811115610eb657610eb6610e29565b604051601f8201601f19908116603f01168101908382118183101715610ede57610ede610e29565b816040528281528a6020848701011115610ef757600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215610f2e57600080fd5b610f3783610d50565b9150610f4560208401610d50565b90509250929050565b600181811c90821680610f6257607f821691505b602082108103610f8257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b60008351611019818460208801610cd4565b83519083019061102d818360208801610cd4565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561023b5761023b6110cd565b8082018082111561023b5761023b6110cd565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061113c90830184610cf8565b9695505050505050565b60006020828403121561115857600080fd5b81516105dd81610ca156fea26469706673582212201ded905bdfff73f4f44dac5c98bbdbc139b325527f7c3aac16826b27608bc3b664736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x7C JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x19B JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1A3 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1B6 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x1DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xC4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xEC JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x12C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x141 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x154 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD7 PUSH2 0xD2 CALLDATASIZE PUSH1 0x4 PUSH2 0xCB7 JUMP JUMPDEST PUSH2 0x1EF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF4 PUSH2 0x241 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0xD24 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0xD37 JUMP JUMPDEST PUSH2 0x2D3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x13F PUSH2 0x13A CALLDATASIZE PUSH1 0x4 PUSH2 0xD6C JUMP JUMPDEST PUSH2 0x2FA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x13F PUSH2 0x14F CALLDATASIZE PUSH1 0x4 PUSH2 0xD96 JUMP JUMPDEST PUSH2 0x414 JUMP JUMPDEST PUSH2 0x13F PUSH2 0x162 CALLDATASIZE PUSH1 0x4 PUSH2 0xD96 JUMP JUMPDEST PUSH2 0x445 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0xD37 JUMP JUMPDEST PUSH2 0x460 JUMP JUMPDEST PUSH2 0x18D PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0xDD2 JUMP JUMPDEST PUSH2 0x494 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x51A JUMP JUMPDEST PUSH2 0x13F PUSH2 0x1B1 CALLDATASIZE PUSH1 0x4 PUSH2 0xDED JUMP JUMPDEST PUSH2 0x529 JUMP JUMPDEST PUSH2 0x13F PUSH2 0x1C4 CALLDATASIZE PUSH1 0x4 PUSH2 0xE3F JUMP JUMPDEST PUSH2 0x538 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0xD37 JUMP JUMPDEST PUSH2 0x570 JUMP JUMPDEST PUSH2 0xD7 PUSH2 0x1EA CALLDATASIZE PUSH1 0x4 PUSH2 0xF1B JUMP JUMPDEST PUSH2 0x5E4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x220 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x23B JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x250 SWAP1 PUSH2 0xF4E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x27C SWAP1 PUSH2 0xF4E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2C9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x29E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2C9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2AC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DE DUP3 PUSH2 0x612 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x305 DUP3 PUSH2 0x460 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x377 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x393 JUMPI POP PUSH2 0x393 DUP2 CALLER PUSH2 0x5E4 JUMP JUMPDEST PUSH2 0x405 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x36E JUMP JUMPDEST PUSH2 0x40F DUP4 DUP4 PUSH2 0x63A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x41E CALLER DUP3 PUSH2 0x6A8 JUMP JUMPDEST PUSH2 0x43A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36E SWAP1 PUSH2 0xF88 JUMP JUMPDEST PUSH2 0x40F DUP4 DUP4 DUP4 PUSH2 0x707 JUMP JUMPDEST PUSH2 0x40F DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x538 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x46C DUP4 PUSH2 0x878 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x23B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36E SWAP1 PUSH2 0xFD5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x36E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x250 SWAP1 PUSH2 0xF4E JUMP JUMPDEST PUSH2 0x534 CALLER DUP4 DUP4 PUSH2 0x893 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x542 CALLER DUP4 PUSH2 0x6A8 JUMP JUMPDEST PUSH2 0x55E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36E SWAP1 PUSH2 0xF88 JUMP JUMPDEST PUSH2 0x56A DUP5 DUP5 DUP5 DUP5 PUSH2 0x95D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x57B DUP3 PUSH2 0x612 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x592 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x5B2 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x5DD JUMP JUMPDEST DUP1 PUSH2 0x5BC DUP5 PUSH2 0x990 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5CD SWAP3 SWAP2 SWAP1 PUSH2 0x1007 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x61B DUP2 PUSH2 0xA23 JUMP JUMPDEST PUSH2 0x637 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36E SWAP1 PUSH2 0xFD5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x66F DUP3 PUSH2 0x460 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6B4 DUP4 PUSH2 0x460 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x6DB JUMPI POP PUSH2 0x6DB DUP2 DUP6 PUSH2 0x5E4 JUMP JUMPDEST DUP1 PUSH2 0x6FF JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6F4 DUP5 PUSH2 0x2D3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x71A DUP3 PUSH2 0x460 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x740 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36E SWAP1 PUSH2 0x1036 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x7A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x36E JUMP JUMPDEST PUSH2 0x7AF DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0xA40 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7C2 DUP3 PUSH2 0x460 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36E SWAP1 PUSH2 0x1036 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x8F0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x22A9219B99189D1030B8383937BB32903A379031B0B63632B9 PUSH1 0x39 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x36E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x968 DUP5 DUP5 DUP5 PUSH2 0x707 JUMP JUMPDEST PUSH2 0x974 DUP5 DUP5 DUP5 DUP5 PUSH2 0xAC8 JUMP JUMPDEST PUSH2 0x56A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36E SWAP1 PUSH2 0x107B JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x99D DUP4 PUSH2 0xBC9 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9BD JUMPI PUSH2 0x9BD PUSH2 0xE29 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9E7 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x9F1 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xA2F DUP4 PUSH2 0x878 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x56A JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0xA86 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xA80 SWAP1 DUP5 SWAP1 PUSH2 0x10E3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x56A JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xABD SWAP1 DUP5 SWAP1 PUSH2 0x10F6 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xBBE JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xB0C SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1109 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xB47 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xB44 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1146 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xBA4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xB75 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB7A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xB9C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36E SWAP1 PUSH2 0x107B JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x6FF JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0xC08 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xC34 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xC52 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xC6A JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xC7E JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xC90 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x23B JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x637 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x5DD DUP2 PUSH2 0xCA1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCEF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xCD7 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xD10 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xCD4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x5DD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCF8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD88 DUP4 PUSH2 0xD50 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xDAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDB4 DUP5 PUSH2 0xD50 JUMP JUMPDEST SWAP3 POP PUSH2 0xDC2 PUSH1 0x20 DUP6 ADD PUSH2 0xD50 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5DD DUP3 PUSH2 0xD50 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE09 DUP4 PUSH2 0xD50 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xE55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE5E DUP6 PUSH2 0xD50 JUMP JUMPDEST SWAP4 POP PUSH2 0xE6C PUSH1 0x20 DUP7 ADD PUSH2 0xD50 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xEA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xEB6 JUMPI PUSH2 0xEB6 PUSH2 0xE29 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xEDE JUMPI PUSH2 0xEDE PUSH2 0xE29 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xEF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF37 DUP4 PUSH2 0xD50 JUMP JUMPDEST SWAP2 POP PUSH2 0xF45 PUSH1 0x20 DUP5 ADD PUSH2 0xD50 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xF62 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xF82 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1019 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xCD4 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x102D DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xCD4 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x23B JUMPI PUSH2 0x23B PUSH2 0x10CD JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x23B JUMPI PUSH2 0x23B PUSH2 0x10CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x113C SWAP1 DUP4 ADD DUP5 PUSH2 0xCF8 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1158 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x5DD DUP2 PUSH2 0xCA1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SAR 0xED SWAP1 JUMPDEST 0xDF SELFDESTRUCT PUSH20 0xF4F44DAC5C98BBDBC139B325527F7C3AAC16826B 0x27 PUSH1 0x8B 0xC3 0xB6 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"628:16327:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300;;;;;;:::i;:::-;;:::i;:::-;;;565:14:33;;558:22;540:41;;528:2;513:18;1570:300:19;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;3935:167::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1697:32:33;;;1679:51;;1667:2;1652:18;3935:167:19;1533:203:33;3468:406:19;;;;;;:::i;:::-;;:::i;:::-;;4612:326;;;;;;:::i;:::-;;:::i;5004:179::-;;;;;;:::i;:::-;;:::i;2190:219::-;;;;;;:::i;:::-;;:::i;1929:204::-;;;;;;:::i;:::-;;:::i;:::-;;;2848:25:33;;;2836:2;2821:18;1929:204:19;2702:177:33;2633:102:19;;;:::i;4169:153::-;;;;;;:::i;:::-;;:::i;5249:314::-;;;;;;:::i;:::-;;:::i;2801:276::-;;;;;;:::i;:::-;;:::i;4388:162::-;;;;;;:::i;:::-;;:::i;1570:300::-;1672:4;-1:-1:-1;;;;;;1707:40:19;;-1:-1:-1;;;1707:40:19;;:104;;-1:-1:-1;;;;;;;1763:48:19;;-1:-1:-1;;;1763:48:19;1707:104;:156;;;-1:-1:-1;;;;;;;;;;937:40:27;;;1827:36:19;1688:175;1570:300;-1:-1:-1;;1570:300:19:o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;-1:-1:-1;4071:24:19;;;;:15;:24;;;;;;-1:-1:-1;;;;;4071:24:19;;3935:167::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;-1:-1:-1;;;;;3605:11:19;:2;-1:-1:-1;;;;;3605:11:19;;3597:57;;;;-1:-1:-1;;;3597:57:19;;5363:2:33;3597:57:19;;;5345:21:33;5402:2;5382:18;;;5375:30;5441:34;5421:18;;;5414:62;-1:-1:-1;;;5492:18:33;;;5485:31;5533:19;;3597:57:19;;;;;;;;;719:10:24;-1:-1:-1;;;;;3686:21:19;;;;:62;;-1:-1:-1;3711:37:19;3728:5;719:10:24;4388:162:19;:::i;3711:37::-;3665:170;;;;-1:-1:-1;;;3665:170:19;;5765:2:33;3665:170:19;;;5747:21:33;5804:2;5784:18;;;5777:30;5843:34;5823:18;;;5816:62;5914:31;5894:18;;;5887:59;5963:19;;3665:170:19;5563:425:33;3665:170:19;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;4612:326::-;4801:41;719:10:24;4834:7:19;4801:18;:41::i;:::-;4793:99;;;;-1:-1:-1;;;4793:99:19;;;;;;;:::i;:::-;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;5004:179::-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;2190:219::-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;-1:-1:-1;;;;;;2332:19:19;;2324:56;;;;-1:-1:-1;;;2324:56:19;;;;;;;:::i;1929:204::-;2001:7;-1:-1:-1;;;;;2028:19:19;;2020:73;;;;-1:-1:-1;;;2020:73:19;;6962:2:33;2020:73:19;;;6944:21:33;7001:2;6981:18;;;6974:30;7040:34;7020:18;;;7013:62;-1:-1:-1;;;7091:18:33;;;7084:39;7140:19;;2020:73:19;6760:405:33;2020:73:19;-1:-1:-1;;;;;;2110:16:19;;;;;:9;:16;;;;;;;1929:204::o;2633:102::-;2689:13;2721:7;2714:14;;;;;:::i;4169:153::-;4263:52;719:10:24;4296:8:19;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;719:10:24;5450:7:19;5417:18;:41::i;:::-;5409:99;;;;-1:-1:-1;;;5409:99:19;;;;;;;:::i;:::-;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;3395:9;;;;;;;;;-1:-1:-1;3395:9:19;;;3319:92;2957:10;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;2801:276;-1:-1:-1;;;2801:276:19:o;4388:162::-;-1:-1:-1;;;;;4508:25:19;;;4485:4;4508:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4388:162::o;13466:133::-;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;-1:-1:-1;;;13539:53:19;;;;;;;:::i;:::-;13466:133;:::o;12768:171::-;12842:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;12842:29:19;-1:-1:-1;;;;;12842:29:19;;;;;;;;:24;;12895:23;12842:24;12895:14;:23::i;:::-;-1:-1:-1;;;;;12886:46:19;;;;;;;;;;;12768:171;;:::o;7540:261::-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;-1:-1:-1;;;;;7706:16:19;:7;-1:-1:-1;;;;;7706:16:19;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:87;;;;7786:7;-1:-1:-1;;;;;7762:31:19;:20;7774:7;7762:11;:20::i;:::-;-1:-1:-1;;;;;7762:31:19;;7706:87;7698:96;7540:261;-1:-1:-1;;;;7540:261:19:o;11423:1233::-;11577:4;-1:-1:-1;;;;;11550:31:19;:23;11565:7;11550:14;:23::i;:::-;-1:-1:-1;;;;;11550:31:19;;11542:81;;;;-1:-1:-1;;;11542:81:19;;;;;;;:::i;:::-;-1:-1:-1;;;;;11641:16:19;;11633:65;;;;-1:-1:-1;;;11633:65:19;;8279:2:33;11633:65:19;;;8261:21:33;8318:2;8298:18;;;8291:30;8357:34;8337:18;;;8330:62;-1:-1:-1;;;8408:18:33;;;8401:34;8452:19;;11633:65:19;8077:400:33;11633:65:19;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;-1:-1:-1;;;;;11851:31:19;:23;11866:7;11851:14;:23::i;:::-;-1:-1:-1;;;;;11851:31:19;;11843:81;;;;-1:-1:-1;;;11843:81:19;;;;;;;:::i;:::-;11993:24;;;;:15;:24;;;;;;;;11986:31;;-1:-1:-1;;;;;;11986:31:19;;;;;;-1:-1:-1;;;;;12461:15:19;;;;;;:9;:15;;;;;:20;;-1:-1:-1;;12461:20:19;;;12495:13;;;;;;;;;:18;;11986:31;12495:18;;;12533:16;;;:7;:16;;;;;;:21;;;;;;;;;;12570:27;;12009:7;;12570:27;;;3538:336;3468:406;;:::o;6838:115::-;6904:7;6930:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6930:16:19;;6838:115::o;13075:307::-;13225:8;-1:-1:-1;;;;;13216:17:19;:5;-1:-1:-1;;;;;13216:17:19;;13208:55;;;;-1:-1:-1;;;13208:55:19;;8684:2:33;13208:55:19;;;8666:21:33;8723:2;8703:18;;;8696:30;-1:-1:-1;;;8742:18:33;;;8735:55;8807:18;;13208:55:19;8482:349:33;13208:55:19;-1:-1:-1;;;;;13273:25:19;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;13273:46:19;;;;;;;;;;13334:41;;540::33;;;13334::19;;513:18:33;13334:41:19;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;-1:-1:-1;;;6612:110:19;;;;;;;:::i;415:696:26:-;471:13;520:14;537:17;548:5;537:10;:17::i;:::-;557:1;537:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;595:18:26;-1:-1:-1;572:41:26;-1:-1:-1;733:28:26;;;749:2;733:28;788:280;-1:-1:-1;;819:5:26;-1:-1:-1;;;953:2:26;942:14;;937:30;819:5;924:44;1012:2;1003:11;;;-1:-1:-1;1032:21:26;788:280;1032:21;-1:-1:-1;1088:6:26;415:696;-1:-1:-1;;;415:696:26:o;7256:126:19:-;7321:4;;7344:17;7353:7;7344:8;:17::i;:::-;-1:-1:-1;;;;;7344:31:19;;;;7256:126;-1:-1:-1;;7256:126:19:o;15698:396::-;15882:1;15870:9;:13;15866:222;;;-1:-1:-1;;;;;15903:18:19;;;15899:85;;-1:-1:-1;;;;;15941:15:19;;;;;;:9;:15;;;;;:28;;15960:9;;15941:15;:28;;15960:9;;15941:28;:::i;:::-;;;;-1:-1:-1;;15899:85:19;-1:-1:-1;;;;;16001:16:19;;;15997:81;;-1:-1:-1;;;;;16037:13:19;;;;;;:9;:13;;;;;:26;;16054:9;;16037:13;:26;;16054:9;;16037:26;:::i;:::-;;;;-1:-1:-1;;15698:396:19;;;;:::o;14151:831::-;14300:4;-1:-1:-1;;;;;14320:13:19;;1465:19:23;:23;14316:660:19;;14355:71;;-1:-1:-1;;;14355:71:19;;-1:-1:-1;;;;;14355:36:19;;;;;:71;;719:10:24;;14406:4:19;;14412:7;;14421:4;;14355:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14355:71:19;;;;;;;;-1:-1:-1;;14355:71:19;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14593:6;:13;14610:1;14593:18;14589:321;;14635:60;;-1:-1:-1;;;14635:60:19;;;;;;;:::i;14589:321::-;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;-1:-1:-1;;;;;;14476:51:19;-1:-1:-1;;;14476:51:19;;-1:-1:-1;14469:58:19;;14316:660;-1:-1:-1;14961:4:19;14151:831;;;;;;:::o;9889:890:29:-;9942:7;;-1:-1:-1;;;10017:15:29;;10013:99;;-1:-1:-1;;;10052:15:29;;;-1:-1:-1;10095:2:29;10085:12;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;-1:-1:-1;10207:2:29;10197:12;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;-1:-1:-1;10319:2:29;10309:12;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;-1:-1:-1;10429:1:29;10419:11;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;-1:-1:-1;10538:1:29;10528:11;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;-1:-1:-1;10647:1:29;10637:11;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;10766:6;9889:890;-1:-1:-1;;9889:890:29:o;14:131:33:-;-1:-1:-1;;;;;;88:32:33;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:250::-;677:1;687:113;701:6;698:1;695:13;687:113;;;777:11;;;771:18;758:11;;;751:39;723:2;716:10;687:113;;;-1:-1:-1;;834:1:33;816:16;;809:27;592:250::o;847:271::-;889:3;927:5;921:12;954:6;949:3;942:19;970:76;1039:6;1032:4;1027:3;1023:14;1016:4;1009:5;1005:16;970:76;:::i;:::-;1100:2;1079:15;-1:-1:-1;;1075:29:33;1066:39;;;;1107:4;1062:50;;847:271;-1:-1:-1;;847:271:33:o;1123:220::-;1272:2;1261:9;1254:21;1235:4;1292:45;1333:2;1322:9;1318:18;1310:6;1292:45;:::i;1348:180::-;1407:6;1460:2;1448:9;1439:7;1435:23;1431:32;1428:52;;;1476:1;1473;1466:12;1428:52;-1:-1:-1;1499:23:33;;1348:180;-1:-1:-1;1348:180:33:o;1741:173::-;1809:20;;-1:-1:-1;;;;;1858:31:33;;1848:42;;1838:70;;1904:1;1901;1894:12;1838:70;1741:173;;;:::o;1919:254::-;1987:6;1995;2048:2;2036:9;2027:7;2023:23;2019:32;2016:52;;;2064:1;2061;2054:12;2016:52;2087:29;2106:9;2087:29;:::i;:::-;2077:39;2163:2;2148:18;;;;2135:32;;-1:-1:-1;;;1919:254:33:o;2178:328::-;2255:6;2263;2271;2324:2;2312:9;2303:7;2299:23;2295:32;2292:52;;;2340:1;2337;2330:12;2292:52;2363:29;2382:9;2363:29;:::i;:::-;2353:39;;2411:38;2445:2;2434:9;2430:18;2411:38;:::i;:::-;2401:48;;2496:2;2485:9;2481:18;2468:32;2458:42;;2178:328;;;;;:::o;2511:186::-;2570:6;2623:2;2611:9;2602:7;2598:23;2594:32;2591:52;;;2639:1;2636;2629:12;2591:52;2662:29;2681:9;2662:29;:::i;2884:347::-;2949:6;2957;3010:2;2998:9;2989:7;2985:23;2981:32;2978:52;;;3026:1;3023;3016:12;2978:52;3049:29;3068:9;3049:29;:::i;:::-;3039:39;;3128:2;3117:9;3113:18;3100:32;3175:5;3168:13;3161:21;3154:5;3151:32;3141:60;;3197:1;3194;3187:12;3141:60;3220:5;3210:15;;;2884:347;;;;;:::o;3236:127::-;3297:10;3292:3;3288:20;3285:1;3278:31;3328:4;3325:1;3318:15;3352:4;3349:1;3342:15;3368:1138;3463:6;3471;3479;3487;3540:3;3528:9;3519:7;3515:23;3511:33;3508:53;;;3557:1;3554;3547:12;3508:53;3580:29;3599:9;3580:29;:::i;:::-;3570:39;;3628:38;3662:2;3651:9;3647:18;3628:38;:::i;:::-;3618:48;;3713:2;3702:9;3698:18;3685:32;3675:42;;3768:2;3757:9;3753:18;3740:32;3791:18;3832:2;3824:6;3821:14;3818:34;;;3848:1;3845;3838:12;3818:34;3886:6;3875:9;3871:22;3861:32;;3931:7;3924:4;3920:2;3916:13;3912:27;3902:55;;3953:1;3950;3943:12;3902:55;3989:2;3976:16;4011:2;4007;4004:10;4001:36;;;4017:18;;:::i;:::-;4092:2;4086:9;4060:2;4146:13;;-1:-1:-1;;4142:22:33;;;4166:2;4138:31;4134:40;4122:53;;;4190:18;;;4210:22;;;4187:46;4184:72;;;4236:18;;:::i;:::-;4276:10;4272:2;4265:22;4311:2;4303:6;4296:18;4351:7;4346:2;4341;4337;4333:11;4329:20;4326:33;4323:53;;;4372:1;4369;4362:12;4323:53;4428:2;4423;4419;4415:11;4410:2;4402:6;4398:15;4385:46;4473:1;4468:2;4463;4455:6;4451:15;4447:24;4440:35;4494:6;4484:16;;;;;;;3368:1138;;;;;;;:::o;4511:260::-;4579:6;4587;4640:2;4628:9;4619:7;4615:23;4611:32;4608:52;;;4656:1;4653;4646:12;4608:52;4679:29;4698:9;4679:29;:::i;:::-;4669:39;;4727:38;4761:2;4750:9;4746:18;4727:38;:::i;:::-;4717:48;;4511:260;;;;;:::o;4776:380::-;4855:1;4851:12;;;;4898;;;4919:61;;4973:4;4965:6;4961:17;4951:27;;4919:61;5026:2;5018:6;5015:14;4995:18;4992:38;4989:161;;5072:10;5067:3;5063:20;5060:1;5053:31;5107:4;5104:1;5097:15;5135:4;5132:1;5125:15;4989:161;;4776:380;;;:::o;5993:409::-;6195:2;6177:21;;;6234:2;6214:18;;;6207:30;6273:34;6268:2;6253:18;;6246:62;-1:-1:-1;;;6339:2:33;6324:18;;6317:43;6392:3;6377:19;;5993:409::o;6407:348::-;6609:2;6591:21;;;6648:2;6628:18;;;6621:30;-1:-1:-1;;;6682:2:33;6667:18;;6660:54;6746:2;6731:18;;6407:348::o;7170:496::-;7349:3;7387:6;7381:13;7403:66;7462:6;7457:3;7450:4;7442:6;7438:17;7403:66;:::i;:::-;7532:13;;7491:16;;;;7554:70;7532:13;7491:16;7601:4;7589:17;;7554:70;:::i;:::-;7640:20;;7170:496;-1:-1:-1;;;;7170:496:33:o;7671:401::-;7873:2;7855:21;;;7912:2;7892:18;;;7885:30;7951:34;7946:2;7931:18;;7924:62;-1:-1:-1;;;8017:2:33;8002:18;;7995:35;8062:3;8047:19;;7671:401::o;8836:414::-;9038:2;9020:21;;;9077:2;9057:18;;;9050:30;9116:34;9111:2;9096:18;;9089:62;-1:-1:-1;;;9182:2:33;9167:18;;9160:48;9240:3;9225:19;;8836:414::o;9387:127::-;9448:10;9443:3;9439:20;9436:1;9429:31;9479:4;9476:1;9469:15;9503:4;9500:1;9493:15;9519:128;9586:9;;;9607:11;;;9604:37;;;9621:18;;:::i;9652:125::-;9717:9;;;9738:10;;;9735:36;;;9751:18;;:::i;9782:489::-;-1:-1:-1;;;;;10051:15:33;;;10033:34;;10103:15;;10098:2;10083:18;;10076:43;10150:2;10135:18;;10128:34;;;10198:3;10193:2;10178:18;;10171:31;;;9976:4;;10219:46;;10245:19;;10237:6;10219:46;:::i;:::-;10211:54;9782:489;-1:-1:-1;;;;;;9782:489:33:o;10276:249::-;10345:6;10398:2;10386:9;10377:7;10373:23;10369:32;10366:52;;;10414:1;10411;10404:12;10366:52;10446:9;10440:16;10465:30;10489:5;10465:30;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"901000","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2611","getApproved(uint256)":"4866","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"2618","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26749","supportsInterface(bytes4)":"511","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"},"internal":{"_afterTokenTransfer(address,address,uint256,uint256)":"infinite","_approve(address,uint256)":"infinite","_baseURI()":"infinite","_beforeTokenTransfer(address,address,uint256,uint256)":"24513","_burn(uint256)":"infinite","_checkOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"2272","_isApprovedOrOwner(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_ownerOf(uint256)":"2205","_requireMinted(uint256)":"infinite","_safeMint(address,uint256)":"infinite","_safeMint(address,uint256,bytes memory)":"infinite","_safeTransfer(address,address,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3579,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":3581,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":3585,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":3589,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":3593,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":3599,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e352bd0d7ee4df0d8088adaf497d4c43a364d441b71da1866bc292bdbe5506cb64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 MSTORE 0xBD 0xD PUSH31 0xE4DF0D8088ADAF497D4C43A364D441B71DA1866BC292BDBE5506CB64736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"194:8964:23:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:23;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e352bd0d7ee4df0d8088adaf497d4c43a364d441b71da1866bc292bdbe5506cb64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 MSTORE 0xBD 0xD PUSH31 0xE4DF0D8088ADAF497D4C43A364D441B71DA1866BC292BDBE5506CB64736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"194:8964:23:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Counters.sol":{"Counters":{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208e7b32457e46c348d44f72f619bce6882fd266cd1a033aa8a6d2fa2540f2576064736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP15 PUSH28 0x32457E46C348D44F72F619BCE6882FD266CD1A033AA8A6D2FA2540F2 JUMPI PUSH1 0x64 PUSH20 0x6F6C634300081100330000000000000000000000 ","sourceMap":"424:971:25:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;424:971:25;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208e7b32457e46c348d44f72f619bce6882fd266cd1a033aa8a6d2fa2540f2576064736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP15 PUSH28 0x32457E46C348D44F72F619BCE6882FD266CD1A033AA8A6D2FA2540F2 JUMPI PUSH1 0x64 PUSH20 0x6F6C634300081100330000000000000000000000 ","sourceMap":"424:971:25:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"current(struct Counters.Counter storage pointer)":"infinite","decrement(struct Counters.Counter storage pointer)":"infinite","increment(struct Counters.Counter storage pointer)":"infinite","reset(struct Counters.Counter storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ffb47ead665ebdcf6a0ef58047a7966c203786c1ac7a2cfb45282b02db6fabf464736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT 0xB4 PUSH31 0xAD665EBDCF6A0EF58047A7966C203786C1AC7A2CFB45282B02DB6FABF46473 PUSH16 0x6C634300081100330000000000000000 ","sourceMap":"188:2065:26:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;188:2065:26;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ffb47ead665ebdcf6a0ef58047a7966c203786c1ac7a2cfb45282b02db6fabf464736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT 0xB4 PUSH31 0xAD665EBDCF6A0EF58047A7966C203786C1AC7A2CFB45282B02DB6FABF46473 PUSH16 0x6C634300081100330000000000000000 ","sourceMap":"188:2065:26:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207832ac2eb4dd019556a7b1dbb57a2b6653aac7534bd9e30206bb08b13e4d279664736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0x32AC2EB4DD019556A7B1DBB57A2B6653AAC7534BD9E30206BB ADDMOD 0xB1 RETURNDATACOPY 0x4D 0x27 SWAP7 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"202:12302:29:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12302:29;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207832ac2eb4dd019556a7b1dbb57a2b6653aac7534bd9e30206bb08b13e4d279664736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0x32AC2EB4DD019556A7B1DBB57A2B6653AAC7534BD9E30206BB ADDMOD 0xB1 RETURNDATACOPY 0x4D 0x27 SWAP7 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"202:12302:29:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"SafeMath":{"abi":[],"devdoc":{"details":"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209d0cb9b342b48e93f57ec47f520d88e6c3a34aa7589d80ad5a14a277369cf56364736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP14 0xC 0xB9 0xB3 TIMESTAMP 0xB4 DUP15 SWAP4 CREATE2 PUSH31 0xC47F520D88E6C3A34AA7589D80AD5A14A277369CF56364736F6C6343000811 STOP CALLER ","sourceMap":"482:6300:30:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;482:6300:30;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209d0cb9b342b48e93f57ec47f520d88e6c3a34aa7589d80ad5a14a277369cf56364736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP14 0xC 0xB9 0xB3 TIMESTAMP 0xB4 DUP15 SWAP4 CREATE2 PUSH31 0xC47F520D88E6C3A34AA7589D80AD5A14A277369CF56364736F6C6343000811 STOP CALLER ","sourceMap":"482:6300:30:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","div(uint256,uint256,string memory)":"infinite","mod(uint256,uint256)":"infinite","mod(uint256,uint256,string memory)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite","sub(uint256,uint256,string memory)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/FundingContract.sol":{"FundingContract":{"abi":[{"inputs":[{"internalType":"uint256","name":"totalFunding","type":"uint256"},{"internalType":"uint256","name":"withdrawalFee","type":"uint256"},{"internalType":"uint256","name":"vestingPeriod","type":"uint256"},{"internalType":"bool","name":"isGroupWithdrawal","type":"bool"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"FundingContract__NotEnoughETH","type":"error"},{"inputs":[],"name":"FundingContract__NotGroupFunding","type":"error"},{"inputs":[],"name":"FundingContract__TransferFailed","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"depositFunds","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"funder","type":"address"}],"name":"getAddressToAmountFunded","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getFunder","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getIsGroupWithdrawal","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMinimumFundingAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVestingPeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getWithdrawalFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"requestForWithdrawal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawFunds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawalCheck","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3464":{"entryPoint":null,"id":3464,"parameterSlots":0,"returnSlots":0},"@_3616":{"entryPoint":null,"id":3616,"parameterSlots":2,"returnSlots":0},"@_6566":{"entryPoint":null,"id":6566,"parameterSlots":4,"returnSlots":0},"@_msgSender_5001":{"entryPoint":233,"id":5001,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_3552":{"entryPoint":237,"id":3552,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_uint256t_uint256t_uint256t_bool_fromMemory":{"entryPoint":319,"id":null,"parameterSlots":2,"returnSlots":4},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":473,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":556,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":413,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":391,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3198:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"143:332:33","statements":[{"body":{"nodeType":"YulBlock","src":"190:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"199:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"202:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"192:6:33"},"nodeType":"YulFunctionCall","src":"192:12:33"},"nodeType":"YulExpressionStatement","src":"192:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"164:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"173:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"160:3:33"},"nodeType":"YulFunctionCall","src":"160:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"185:3:33","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"156:3:33"},"nodeType":"YulFunctionCall","src":"156:33:33"},"nodeType":"YulIf","src":"153:53:33"},{"nodeType":"YulAssignment","src":"215:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"231:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"225:5:33"},"nodeType":"YulFunctionCall","src":"225:16:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"215:6:33"}]},{"nodeType":"YulAssignment","src":"250:35:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"270:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"281:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"266:3:33"},"nodeType":"YulFunctionCall","src":"266:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"260:5:33"},"nodeType":"YulFunctionCall","src":"260:25:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"250:6:33"}]},{"nodeType":"YulAssignment","src":"294:35:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"314:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"325:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"310:3:33"},"nodeType":"YulFunctionCall","src":"310:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"304:5:33"},"nodeType":"YulFunctionCall","src":"304:25:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"294:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"338:38:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"361:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"372:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"357:3:33"},"nodeType":"YulFunctionCall","src":"357:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"351:5:33"},"nodeType":"YulFunctionCall","src":"351:25:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"342:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"429:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"438:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"441:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"431:6:33"},"nodeType":"YulFunctionCall","src":"431:12:33"},"nodeType":"YulExpressionStatement","src":"431:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"398:5:33"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"419:5:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"412:6:33"},"nodeType":"YulFunctionCall","src":"412:13:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"405:6:33"},"nodeType":"YulFunctionCall","src":"405:21:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"395:2:33"},"nodeType":"YulFunctionCall","src":"395:32:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"388:6:33"},"nodeType":"YulFunctionCall","src":"388:40:33"},"nodeType":"YulIf","src":"385:60:33"},{"nodeType":"YulAssignment","src":"454:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"464:5:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"454:6:33"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"85:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"96:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"108:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"116:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"124:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"132:6:33","type":""}],"src":"14:461:33"},{"body":{"nodeType":"YulBlock","src":"512:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"529:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"536:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"541:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"532:3:33"},"nodeType":"YulFunctionCall","src":"532:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"522:6:33"},"nodeType":"YulFunctionCall","src":"522:31:33"},"nodeType":"YulExpressionStatement","src":"522:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"569:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"572:4:33","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"562:6:33"},"nodeType":"YulFunctionCall","src":"562:15:33"},"nodeType":"YulExpressionStatement","src":"562:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"593:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"596:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"586:6:33"},"nodeType":"YulFunctionCall","src":"586:15:33"},"nodeType":"YulExpressionStatement","src":"586:15:33"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"480:127:33"},{"body":{"nodeType":"YulBlock","src":"667:325:33","statements":[{"nodeType":"YulAssignment","src":"677:22:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"691:1:33","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"694:4:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"687:3:33"},"nodeType":"YulFunctionCall","src":"687:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"677:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"708:38:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"738:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"744:1:33","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"734:3:33"},"nodeType":"YulFunctionCall","src":"734:12:33"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"712:18:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"785:31:33","statements":[{"nodeType":"YulAssignment","src":"787:27:33","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"801:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"809:4:33","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"797:3:33"},"nodeType":"YulFunctionCall","src":"797:17:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"787:6:33"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"765:18:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"758:6:33"},"nodeType":"YulFunctionCall","src":"758:26:33"},"nodeType":"YulIf","src":"755:61:33"},{"body":{"nodeType":"YulBlock","src":"875:111:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"896:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"903:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"908:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"899:3:33"},"nodeType":"YulFunctionCall","src":"899:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"889:6:33"},"nodeType":"YulFunctionCall","src":"889:31:33"},"nodeType":"YulExpressionStatement","src":"889:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"940:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"943:4:33","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"933:6:33"},"nodeType":"YulFunctionCall","src":"933:15:33"},"nodeType":"YulExpressionStatement","src":"933:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"968:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"971:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"961:6:33"},"nodeType":"YulFunctionCall","src":"961:15:33"},"nodeType":"YulExpressionStatement","src":"961:15:33"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"831:18:33"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"854:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"862:2:33","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"851:2:33"},"nodeType":"YulFunctionCall","src":"851:14:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"828:2:33"},"nodeType":"YulFunctionCall","src":"828:38:33"},"nodeType":"YulIf","src":"825:161:33"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"647:4:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"656:6:33","type":""}],"src":"612:380:33"},{"body":{"nodeType":"YulBlock","src":"1053:65:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1070:1:33","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"1073:3:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1063:6:33"},"nodeType":"YulFunctionCall","src":"1063:14:33"},"nodeType":"YulExpressionStatement","src":"1063:14:33"},{"nodeType":"YulAssignment","src":"1086:26:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1104:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1107:4:33","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"1094:9:33"},"nodeType":"YulFunctionCall","src":"1094:18:33"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1086:4:33"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1036:3:33","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1044:4:33","type":""}],"src":"997:121:33"},{"body":{"nodeType":"YulBlock","src":"1204:464:33","statements":[{"body":{"nodeType":"YulBlock","src":"1237:425:33","statements":[{"nodeType":"YulVariableDeclaration","src":"1251:11:33","value":{"kind":"number","nodeType":"YulLiteral","src":"1261:1:33","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1255:2:33","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1282:2:33"},{"name":"array","nodeType":"YulIdentifier","src":"1286:5:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1275:6:33"},"nodeType":"YulFunctionCall","src":"1275:17:33"},"nodeType":"YulExpressionStatement","src":"1275:17:33"},{"nodeType":"YulVariableDeclaration","src":"1305:31:33","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1327:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"1331:4:33","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"1317:9:33"},"nodeType":"YulFunctionCall","src":"1317:19:33"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"1309:4:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1349:57:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1372:4:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1382:1:33","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"1389:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"1401:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1385:3:33"},"nodeType":"YulFunctionCall","src":"1385:19:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1378:3:33"},"nodeType":"YulFunctionCall","src":"1378:27:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1368:3:33"},"nodeType":"YulFunctionCall","src":"1368:38:33"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"1353:11:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1443:23:33","statements":[{"nodeType":"YulAssignment","src":"1445:19:33","value":{"name":"data","nodeType":"YulIdentifier","src":"1460:4:33"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"1445:11:33"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"1425:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"1437:4:33","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1422:2:33"},"nodeType":"YulFunctionCall","src":"1422:20:33"},"nodeType":"YulIf","src":"1419:47:33"},{"nodeType":"YulVariableDeclaration","src":"1479:41:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1493:4:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1503:1:33","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"1510:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"1515:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1506:3:33"},"nodeType":"YulFunctionCall","src":"1506:12:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1499:3:33"},"nodeType":"YulFunctionCall","src":"1499:20:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1489:3:33"},"nodeType":"YulFunctionCall","src":"1489:31:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1483:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1533:24:33","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"1546:11:33"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"1537:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1631:21:33","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1640:5:33"},{"name":"_1","nodeType":"YulIdentifier","src":"1647:2:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"1633:6:33"},"nodeType":"YulFunctionCall","src":"1633:17:33"},"nodeType":"YulExpressionStatement","src":"1633:17:33"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1581:5:33"},{"name":"_2","nodeType":"YulIdentifier","src":"1588:2:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1578:2:33"},"nodeType":"YulFunctionCall","src":"1578:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1592:26:33","statements":[{"nodeType":"YulAssignment","src":"1594:22:33","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1607:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"1614:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1603:3:33"},"nodeType":"YulFunctionCall","src":"1603:13:33"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"1594:5:33"}]}]},"pre":{"nodeType":"YulBlock","src":"1574:3:33","statements":[]},"src":"1570:82:33"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"1220:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"1225:2:33","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1217:2:33"},"nodeType":"YulFunctionCall","src":"1217:11:33"},"nodeType":"YulIf","src":"1214:448:33"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"1176:5:33","type":""},{"name":"len","nodeType":"YulTypedName","src":"1183:3:33","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"1188:10:33","type":""}],"src":"1123:545:33"},{"body":{"nodeType":"YulBlock","src":"1758:81:33","statements":[{"nodeType":"YulAssignment","src":"1768:65:33","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1783:4:33"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1801:1:33","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"1804:3:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1797:3:33"},"nodeType":"YulFunctionCall","src":"1797:11:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1814:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1810:3:33"},"nodeType":"YulFunctionCall","src":"1810:6:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1793:3:33"},"nodeType":"YulFunctionCall","src":"1793:24:33"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1789:3:33"},"nodeType":"YulFunctionCall","src":"1789:29:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1779:3:33"},"nodeType":"YulFunctionCall","src":"1779:40:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1825:1:33","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"1828:3:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1821:3:33"},"nodeType":"YulFunctionCall","src":"1821:11:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1776:2:33"},"nodeType":"YulFunctionCall","src":"1776:57:33"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"1768:4:33"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1735:4:33","type":""},{"name":"len","nodeType":"YulTypedName","src":"1741:3:33","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"1749:4:33","type":""}],"src":"1673:166:33"},{"body":{"nodeType":"YulBlock","src":"1940:1256:33","statements":[{"nodeType":"YulVariableDeclaration","src":"1950:24:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1970:3:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1964:5:33"},"nodeType":"YulFunctionCall","src":"1964:10:33"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"1954:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2017:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2019:16:33"},"nodeType":"YulFunctionCall","src":"2019:18:33"},"nodeType":"YulExpressionStatement","src":"2019:18:33"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1989:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2005:2:33","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2009:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2001:3:33"},"nodeType":"YulFunctionCall","src":"2001:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"2013:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1997:3:33"},"nodeType":"YulFunctionCall","src":"1997:18:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1986:2:33"},"nodeType":"YulFunctionCall","src":"1986:30:33"},"nodeType":"YulIf","src":"1983:56:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2092:4:33"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2130:4:33"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"2124:5:33"},"nodeType":"YulFunctionCall","src":"2124:11:33"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"2098:25:33"},"nodeType":"YulFunctionCall","src":"2098:38:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"2138:6:33"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"2048:43:33"},"nodeType":"YulFunctionCall","src":"2048:97:33"},"nodeType":"YulExpressionStatement","src":"2048:97:33"},{"nodeType":"YulVariableDeclaration","src":"2154:18:33","value":{"kind":"number","nodeType":"YulLiteral","src":"2171:1:33","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"2158:9:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2181:23:33","value":{"kind":"number","nodeType":"YulLiteral","src":"2200:4:33","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"2185:11:33","type":""}]},{"nodeType":"YulAssignment","src":"2213:24:33","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2226:11:33"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2213:9:33"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"2283:656:33","statements":[{"nodeType":"YulVariableDeclaration","src":"2297:35:33","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2316:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2328:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2324:3:33"},"nodeType":"YulFunctionCall","src":"2324:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2312:3:33"},"nodeType":"YulFunctionCall","src":"2312:20:33"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"2301:7:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2345:49:33","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2389:4:33"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"2359:29:33"},"nodeType":"YulFunctionCall","src":"2359:35:33"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"2349:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2407:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"2416:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2411:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2494:172:33","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2519:6:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2537:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2542:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2533:3:33"},"nodeType":"YulFunctionCall","src":"2533:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2527:5:33"},"nodeType":"YulFunctionCall","src":"2527:26:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2512:6:33"},"nodeType":"YulFunctionCall","src":"2512:42:33"},"nodeType":"YulExpressionStatement","src":"2512:42:33"},{"nodeType":"YulAssignment","src":"2571:24:33","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2585:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2593:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2581:3:33"},"nodeType":"YulFunctionCall","src":"2581:14:33"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2571:6:33"}]},{"nodeType":"YulAssignment","src":"2612:40:33","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2629:9:33"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2640:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2625:3:33"},"nodeType":"YulFunctionCall","src":"2625:27:33"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2612:9:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2441:1:33"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"2444:7:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2438:2:33"},"nodeType":"YulFunctionCall","src":"2438:14:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2453:28:33","statements":[{"nodeType":"YulAssignment","src":"2455:24:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2464:1:33"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2467:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2460:3:33"},"nodeType":"YulFunctionCall","src":"2460:19:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2455:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"2434:3:33","statements":[]},"src":"2430:236:33"},{"body":{"nodeType":"YulBlock","src":"2714:166:33","statements":[{"nodeType":"YulVariableDeclaration","src":"2732:43:33","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2759:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2764:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2755:3:33"},"nodeType":"YulFunctionCall","src":"2755:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2749:5:33"},"nodeType":"YulFunctionCall","src":"2749:26:33"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"2736:9:33","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2799:6:33"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"2811:9:33"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2838:1:33","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"2841:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2834:3:33"},"nodeType":"YulFunctionCall","src":"2834:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"2850:3:33","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2830:3:33"},"nodeType":"YulFunctionCall","src":"2830:24:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2860:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2856:3:33"},"nodeType":"YulFunctionCall","src":"2856:6:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2826:3:33"},"nodeType":"YulFunctionCall","src":"2826:37:33"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2822:3:33"},"nodeType":"YulFunctionCall","src":"2822:42:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2807:3:33"},"nodeType":"YulFunctionCall","src":"2807:58:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2792:6:33"},"nodeType":"YulFunctionCall","src":"2792:74:33"},"nodeType":"YulExpressionStatement","src":"2792:74:33"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"2685:7:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"2694:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2682:2:33"},"nodeType":"YulFunctionCall","src":"2682:19:33"},"nodeType":"YulIf","src":"2679:201:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2900:4:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2914:1:33","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"2917:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2910:3:33"},"nodeType":"YulFunctionCall","src":"2910:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"2926:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2906:3:33"},"nodeType":"YulFunctionCall","src":"2906:22:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2893:6:33"},"nodeType":"YulFunctionCall","src":"2893:36:33"},"nodeType":"YulExpressionStatement","src":"2893:36:33"}]},"nodeType":"YulCase","src":"2276:663:33","value":{"kind":"number","nodeType":"YulLiteral","src":"2281:1:33","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"2956:234:33","statements":[{"nodeType":"YulVariableDeclaration","src":"2970:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"2983:1:33","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2974:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3019:67:33","statements":[{"nodeType":"YulAssignment","src":"3037:35:33","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3056:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3061:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3052:3:33"},"nodeType":"YulFunctionCall","src":"3052:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3046:5:33"},"nodeType":"YulFunctionCall","src":"3046:26:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3037:5:33"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"3000:6:33"},"nodeType":"YulIf","src":"2997:89:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3106:4:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3165:5:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"3172:6:33"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"3112:52:33"},"nodeType":"YulFunctionCall","src":"3112:67:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3099:6:33"},"nodeType":"YulFunctionCall","src":"3099:81:33"},"nodeType":"YulExpressionStatement","src":"3099:81:33"}]},"nodeType":"YulCase","src":"2948:242:33","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2256:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2264:2:33","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2253:2:33"},"nodeType":"YulFunctionCall","src":"2253:14:33"},"nodeType":"YulSwitch","src":"2246:944:33"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"1925:4:33","type":""},{"name":"src","nodeType":"YulTypedName","src":"1931:3:33","type":""}],"src":"1844:1352:33"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_bool_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n        let value := mload(add(headStart, 96))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value3 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060405162001b4138038062001b4183398101604081905262000034916200013f565b6040518060400160405280601481526020017f46756e64696e67436f6e7472616374546f6b656e000000000000000000000000815250604051806040016040528060038152602001621190d560ea1b81525081600090816200009791906200022c565b506001620000a682826200022c565b505050620000c3620000bd620000e960201b60201c565b620000ed565b600993909355600a91909155600b55600c805460ff1916911515919091179055620002f8565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080600080608085870312156200015657600080fd5b845193506020850151925060408501519150606085015180151581146200017c57600080fd5b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620001b257607f821691505b602082108103620001d357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200022757600081815260208120601f850160051c81016020861015620002025750805b601f850160051c820191505b8181101562000223578281556001016200020e565b5050505b505050565b81516001600160401b0381111562000248576200024862000187565b62000260816200025984546200019d565b84620001d9565b602080601f8311600181146200029857600084156200027f5750858301515b600019600386901b1c1916600185901b17855562000223565b600085815260208120601f198616915b82811015620002c957888601518255948401946001909101908401620002a8565b5085821015620002e85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61183980620003086000396000f3fe60806040526004361061017b5760003560e01c8063715018a6116100cc578063c87b56dd1161007a578063c87b56dd1461041c578063d7b4750c1461043d578063d8e159f81461045d578063db06941e14610472578063e2c41dbc14610487578063e985e9c51461048f578063f2fde38b146104af57600080fd5b8063715018a6146103675780637dc4c2ba1461037c5780638da5cb5b1461039157806395d89b41146103af5780639c885eb3146103c4578063a22cb465146103dc578063b88d4fde146103fc57600080fd5b806323b872dd1161012957806323b872dd146102b157806324600fc3146102d157806342842e0e146102e65780634e71d92d146103065780636352211e1461031257806365ac43411461033257806370a082311461034757600080fd5b806301ffc9a7146101875780630343fb25146101bc57806306fdde0314610200578063081812fc14610222578063095ea7b31461025a5780631095941e1461027c5780631096cb791461029c57600080fd5b3661018257005b600080fd5b34801561019357600080fd5b506101a76101a236600461130a565b6104cf565b60405190151581526020015b60405180910390f35b3480156101c857600080fd5b506101f26101d7366004611343565b6001600160a01b03166000908152600d602052604090205490565b6040519081526020016101b3565b34801561020c57600080fd5b50610215610521565b6040516101b391906113a4565b34801561022e57600080fd5b5061024261023d3660046113b7565b6105b3565b6040516001600160a01b0390911681526020016101b3565b34801561026657600080fd5b5061027a6102753660046113d0565b6105da565b005b34801561028857600080fd5b5061027a6102973660046113b7565b6106f4565b3480156102a857600080fd5b50600b546101f2565b3480156102bd57600080fd5b5061027a6102cc3660046113fa565b61074c565b3480156102dd57600080fd5b5061027a61077d565b3480156102f257600080fd5b5061027a6103013660046113fa565b610865565b34801561027a57600080fd5b34801561031e57600080fd5b5061024261032d3660046113b7565b610882565b34801561033e57600080fd5b506009546101f2565b34801561035357600080fd5b506101f2610362366004611343565b6108b6565b34801561037357600080fd5b5061027a61093c565b34801561038857600080fd5b506101a761094e565b34801561039d57600080fd5b506006546001600160a01b0316610242565b3480156103bb57600080fd5b506102156109bb565b3480156103d057600080fd5b50600c5460ff166101a7565b3480156103e857600080fd5b5061027a6103f7366004611436565b6109ca565b34801561040857600080fd5b5061027a610417366004611488565b6109d5565b34801561042857600080fd5b506102156104373660046113b7565b50606090565b34801561044957600080fd5b506102426104583660046113b7565b610a0d565b34801561046957600080fd5b50600a546101f2565b34801561047e57600080fd5b506101f2610a3d565b61027a610a5b565b34801561049b57600080fd5b506101a76104aa366004611564565b610afc565b3480156104bb57600080fd5b5061027a6104ca366004611343565b610b2a565b60006001600160e01b031982166380ac58cd60e01b148061050057506001600160e01b03198216635b5e139f60e01b145b8061051b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461053090611597565b80601f016020809104026020016040519081016040528092919081815260200182805461055c90611597565b80156105a95780601f1061057e576101008083540402835291602001916105a9565b820191906000526020600020905b81548152906001019060200180831161058c57829003601f168201915b5050505050905090565b60006105be82610ba0565b506000908152600460205260409020546001600160a01b031690565b60006105e582610882565b9050806001600160a01b0316836001600160a01b0316036106575760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061067357506106738133610afc565b6106e55760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161064e565b6106ef8383610bc5565b505050565b600c5460ff166107175760405163568fd53960e11b815260040160405180910390fd5b6000818152600f602090815260408083203384529091529020805460ff19166001179055610749600880546001019055565b50565b6107563382610c33565b6107725760405162461bcd60e51b815260040161064e906115d1565b6106ef838383610c92565b610785610e03565b600c5460ff16156107f65761079861094e565b6107f65760405162461bcd60e51b815260206004820152602960248201527f5468657265206973206e6f206d616a6f7269747920617070726f76616c20746f60448201526820776974686472617760b81b606482015260840161064e565b6040514790600090339083908381818185875af1925050503d806000811461083a576040519150601f19603f3d011682016040523d82523d6000602084013e61083f565b606091505b505090508061086157604051639af25e5d60e01b815260040160405180910390fd5b5050565b6106ef838383604051806020016040528060008152506109d5565b565b60008061088e83610e5d565b90506001600160a01b03811661051b5760405162461bcd60e51b815260040161064e9061161e565b60006001600160a01b0382166109205760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161064e565b506001600160a01b031660009081526003602052604090205490565b610944610e03565b6108806000610e78565b600c5460009060ff166109745760405163568fd53960e11b815260040160405180910390fd5b600061097f60085490565b600e549091506000906109a09060649061099a90603c610eca565b90610edd565b90508082106109b25760019250505090565b60009250505090565b60606001805461053090611597565b610861338383610ee9565b6109df3383610c33565b6109fb5760405162461bcd60e51b815260040161064e906115d1565b610a0784848484610fb3565b50505050565b6000600e8281548110610a2257610a22611650565b6000918252602090912001546001600160a01b031692915050565b6000610a56600b54600954610edd90919063ffffffff16565b905090565b6000610a65610a3d565b90506000610a7260075490565b9050813411610a945760405163cf463cf960e01b815260040160405180910390fd5b336000818152600d60205260408120349055600e805460018101825591527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180546001600160a01b03191682179055610aee9082610fe6565b610861600780546001019055565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610b32610e03565b6001600160a01b038116610b975760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161064e565b61074981610e78565b610ba981611000565b6107495760405162461bcd60e51b815260040161064e9061161e565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610bfa82610882565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610c3f83610882565b9050806001600160a01b0316846001600160a01b03161480610c665750610c668185610afc565b80610c8a5750836001600160a01b0316610c7f846105b3565b6001600160a01b0316145b949350505050565b826001600160a01b0316610ca582610882565b6001600160a01b031614610ccb5760405162461bcd60e51b815260040161064e90611666565b6001600160a01b038216610d2d5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161064e565b610d3a838383600161101d565b826001600160a01b0316610d4d82610882565b6001600160a01b031614610d735760405162461bcd60e51b815260040161064e90611666565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6006546001600160a01b031633146108805760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161064e565b6000908152600260205260409020546001600160a01b031690565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610ed682846116c1565b9392505050565b6000610ed682846116d8565b816001600160a01b0316836001600160a01b031603610f465760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640161064e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610fbe848484610c92565b610fca848484846110a5565b610a075760405162461bcd60e51b815260040161064e906116fa565b6108618282604051806020016040528060008152506111a6565b60008061100c83610e5d565b6001600160a01b0316141592915050565b6001811115610a07576001600160a01b03841615611063576001600160a01b0384166000908152600360205260408120805483929061105d90849061174c565b90915550505b6001600160a01b03831615610a07576001600160a01b0383166000908152600360205260408120805483929061109a90849061175f565b909155505050505050565b60006001600160a01b0384163b1561119b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906110e9903390899088908890600401611772565b6020604051808303816000875af1925050508015611124575060408051601f3d908101601f19168201909252611121918101906117af565b60015b611181573d808015611152576040519150601f19603f3d011682016040523d82523d6000602084013e611157565b606091505b5080516000036111795760405162461bcd60e51b815260040161064e906116fa565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610c8a565b506001949350505050565b6111b083836111d9565b6111bd60008484846110a5565b6106ef5760405162461bcd60e51b815260040161064e906116fa565b6001600160a01b03821661122f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161064e565b61123881611000565b156112555760405162461bcd60e51b815260040161064e906117cc565b61126360008383600161101d565b61126c81611000565b156112895760405162461bcd60e51b815260040161064e906117cc565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b03198116811461074957600080fd5b60006020828403121561131c57600080fd5b8135610ed6816112f4565b80356001600160a01b038116811461133e57600080fd5b919050565b60006020828403121561135557600080fd5b610ed682611327565b6000815180845260005b8181101561138457602081850181015186830182015201611368565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610ed6602083018461135e565b6000602082840312156113c957600080fd5b5035919050565b600080604083850312156113e357600080fd5b6113ec83611327565b946020939093013593505050565b60008060006060848603121561140f57600080fd5b61141884611327565b925061142660208501611327565b9150604084013590509250925092565b6000806040838503121561144957600080fd5b61145283611327565b91506020830135801515811461146757600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561149e57600080fd5b6114a785611327565b93506114b560208601611327565b925060408501359150606085013567ffffffffffffffff808211156114d957600080fd5b818701915087601f8301126114ed57600080fd5b8135818111156114ff576114ff611472565b604051601f8201601f19908116603f0116810190838211818310171561152757611527611472565b816040528281528a602084870101111561154057600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561157757600080fd5b61158083611327565b915061158e60208401611327565b90509250929050565b600181811c908216806115ab57607f821691505b6020821081036115cb57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761051b5761051b6116ab565b6000826116f557634e487b7160e01b600052601260045260246000fd5b500490565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b8181038181111561051b5761051b6116ab565b8082018082111561051b5761051b6116ab565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906117a59083018461135e565b9695505050505050565b6000602082840312156117c157600080fd5b8151610ed6816112f4565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060408201526060019056fea2646970667358221220599eda65bdcd62a61f847b03f64c19e6f820915df7e86063244c4da937bbcc2f64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1B41 CODESIZE SUB DUP1 PUSH3 0x1B41 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x13F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x14 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x46756E64696E67436F6E7472616374546F6B656E000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x1190D5 PUSH1 0xEA SHL DUP2 MSTORE POP DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0x97 SWAP2 SWAP1 PUSH3 0x22C JUMP JUMPDEST POP PUSH1 0x1 PUSH3 0xA6 DUP3 DUP3 PUSH3 0x22C JUMP JUMPDEST POP POP POP PUSH3 0xC3 PUSH3 0xBD PUSH3 0xE9 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xED JUMP JUMPDEST PUSH1 0x9 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0xA SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xB SSTORE PUSH1 0xC DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH3 0x2F8 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x156 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP6 ADD MLOAD SWAP2 POP PUSH1 0x60 DUP6 ADD MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x17C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x1B2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x1D3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x227 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x202 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x223 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x20E JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x248 JUMPI PUSH3 0x248 PUSH3 0x187 JUMP JUMPDEST PUSH3 0x260 DUP2 PUSH3 0x259 DUP5 SLOAD PUSH3 0x19D JUMP JUMPDEST DUP5 PUSH3 0x1D9 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x298 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x27F JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x223 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x2C9 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x2A8 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x2E8 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x1839 DUP1 PUSH3 0x308 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x17B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xCC JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x41C JUMPI DUP1 PUSH4 0xD7B4750C EQ PUSH2 0x43D JUMPI DUP1 PUSH4 0xD8E159F8 EQ PUSH2 0x45D JUMPI DUP1 PUSH4 0xDB06941E EQ PUSH2 0x472 JUMPI DUP1 PUSH4 0xE2C41DBC EQ PUSH2 0x487 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x48F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x367 JUMPI DUP1 PUSH4 0x7DC4C2BA EQ PUSH2 0x37C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3AF JUMPI DUP1 PUSH4 0x9C885EB3 EQ PUSH2 0x3C4 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3DC JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x129 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2B1 JUMPI DUP1 PUSH4 0x24600FC3 EQ PUSH2 0x2D1 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x4E71D92D EQ PUSH2 0x306 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x312 JUMPI DUP1 PUSH4 0x65AC4341 EQ PUSH2 0x332 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x347 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0x343FB25 EQ PUSH2 0x1BC JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x200 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0x1095941E EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0x1096CB79 EQ PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x182 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x193 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A7 PUSH2 0x1A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x130A JUMP JUMPDEST PUSH2 0x4CF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1343 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x215 PUSH2 0x521 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B3 SWAP2 SWAP1 PUSH2 0x13A4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x242 PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0x13B7 JUMP JUMPDEST PUSH2 0x5B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x275 CALLDATASIZE PUSH1 0x4 PUSH2 0x13D0 JUMP JUMPDEST PUSH2 0x5DA JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x288 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B7 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB SLOAD PUSH2 0x1F2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x2CC CALLDATASIZE PUSH1 0x4 PUSH2 0x13FA JUMP JUMPDEST PUSH2 0x74C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x77D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x301 CALLDATASIZE PUSH1 0x4 PUSH2 0x13FA JUMP JUMPDEST PUSH2 0x865 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x242 PUSH2 0x32D CALLDATASIZE PUSH1 0x4 PUSH2 0x13B7 JUMP JUMPDEST PUSH2 0x882 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x9 SLOAD PUSH2 0x1F2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x1343 JUMP JUMPDEST PUSH2 0x8B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x93C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x388 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A7 PUSH2 0x94E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x242 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x215 PUSH2 0x9BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xC SLOAD PUSH1 0xFF AND PUSH2 0x1A7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x3F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1436 JUMP JUMPDEST PUSH2 0x9CA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x408 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x417 CALLDATASIZE PUSH1 0x4 PUSH2 0x1488 JUMP JUMPDEST PUSH2 0x9D5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x428 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x215 PUSH2 0x437 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B7 JUMP JUMPDEST POP PUSH1 0x60 SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x242 PUSH2 0x458 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B7 JUMP JUMPDEST PUSH2 0xA0D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x469 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xA SLOAD PUSH2 0x1F2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0xA3D JUMP JUMPDEST PUSH2 0x27A PUSH2 0xA5B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A7 PUSH2 0x4AA CALLDATASIZE PUSH1 0x4 PUSH2 0x1564 JUMP JUMPDEST PUSH2 0xAFC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x4CA CALLDATASIZE PUSH1 0x4 PUSH2 0x1343 JUMP JUMPDEST PUSH2 0xB2A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x500 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x51B JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x530 SWAP1 PUSH2 0x1597 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x55C SWAP1 PUSH2 0x1597 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5A9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x57E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5A9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x58C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BE DUP3 PUSH2 0xBA0 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E5 DUP3 PUSH2 0x882 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x657 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x673 JUMPI POP PUSH2 0x673 DUP2 CALLER PUSH2 0xAFC JUMP JUMPDEST PUSH2 0x6E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x64E JUMP JUMPDEST PUSH2 0x6EF DUP4 DUP4 PUSH2 0xBC5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0xFF AND PUSH2 0x717 JUMPI PUSH1 0x40 MLOAD PUSH4 0x568FD539 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x749 PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x756 CALLER DUP3 PUSH2 0xC33 JUMP JUMPDEST PUSH2 0x772 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x15D1 JUMP JUMPDEST PUSH2 0x6EF DUP4 DUP4 DUP4 PUSH2 0xC92 JUMP JUMPDEST PUSH2 0x785 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x7F6 JUMPI PUSH2 0x798 PUSH2 0x94E JUMP JUMPDEST PUSH2 0x7F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468657265206973206E6F206D616A6F7269747920617070726F76616C20746F PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x207769746864726177 PUSH1 0xB8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x64E JUMP JUMPDEST PUSH1 0x40 MLOAD SELFBALANCE SWAP1 PUSH1 0x0 SWAP1 CALLER SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x83A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x83F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x861 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9AF25E5D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x6EF DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x9D5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x88E DUP4 PUSH2 0xE5D JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x51B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x161E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x920 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x64E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x944 PUSH2 0xE03 JUMP JUMPDEST PUSH2 0x880 PUSH1 0x0 PUSH2 0xE78 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND PUSH2 0x974 JUMPI PUSH1 0x40 MLOAD PUSH4 0x568FD539 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x97F PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xE SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x9A0 SWAP1 PUSH1 0x64 SWAP1 PUSH2 0x99A SWAP1 PUSH1 0x3C PUSH2 0xECA JUMP JUMPDEST SWAP1 PUSH2 0xEDD JUMP JUMPDEST SWAP1 POP DUP1 DUP3 LT PUSH2 0x9B2 JUMPI PUSH1 0x1 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x530 SWAP1 PUSH2 0x1597 JUMP JUMPDEST PUSH2 0x861 CALLER DUP4 DUP4 PUSH2 0xEE9 JUMP JUMPDEST PUSH2 0x9DF CALLER DUP4 PUSH2 0xC33 JUMP JUMPDEST PUSH2 0x9FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x15D1 JUMP JUMPDEST PUSH2 0xA07 DUP5 DUP5 DUP5 DUP5 PUSH2 0xFB3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xA22 JUMPI PUSH2 0xA22 PUSH2 0x1650 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA56 PUSH1 0xB SLOAD PUSH1 0x9 SLOAD PUSH2 0xEDD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA65 PUSH2 0xA3D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA72 PUSH1 0x7 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP DUP2 CALLVALUE GT PUSH2 0xA94 JUMPI PUSH1 0x40 MLOAD PUSH4 0xCF463CF9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 CALLVALUE SWAP1 SSTORE PUSH1 0xE DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP2 MSTORE PUSH32 0xBB7B4A454DC3493923482F07822329ED19E8244EFF582CC204F8554C3620C3FD ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP3 OR SWAP1 SSTORE PUSH2 0xAEE SWAP1 DUP3 PUSH2 0xFE6 JUMP JUMPDEST PUSH2 0x861 PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0xB32 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB97 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x64E JUMP JUMPDEST PUSH2 0x749 DUP2 PUSH2 0xE78 JUMP JUMPDEST PUSH2 0xBA9 DUP2 PUSH2 0x1000 JUMP JUMPDEST PUSH2 0x749 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x161E JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0xBFA DUP3 PUSH2 0x882 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC3F DUP4 PUSH2 0x882 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xC66 JUMPI POP PUSH2 0xC66 DUP2 DUP6 PUSH2 0xAFC JUMP JUMPDEST DUP1 PUSH2 0xC8A JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xC7F DUP5 PUSH2 0x5B3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xCA5 DUP3 PUSH2 0x882 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xCCB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x1666 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x64E JUMP JUMPDEST PUSH2 0xD3A DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x101D JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD4D DUP3 PUSH2 0x882 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xD73 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x1666 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x880 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x64E JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xED6 DUP3 DUP5 PUSH2 0x16C1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xED6 DUP3 DUP5 PUSH2 0x16D8 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xF46 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x22A9219B99189D1030B8383937BB32903A379031B0B63632B9 PUSH1 0x39 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x64E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xFBE DUP5 DUP5 DUP5 PUSH2 0xC92 JUMP JUMPDEST PUSH2 0xFCA DUP5 DUP5 DUP5 DUP5 PUSH2 0x10A5 JUMP JUMPDEST PUSH2 0xA07 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x16FA JUMP JUMPDEST PUSH2 0x861 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x11A6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x100C DUP4 PUSH2 0xE5D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xA07 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1063 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x105D SWAP1 DUP5 SWAP1 PUSH2 0x174C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0xA07 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x109A SWAP1 DUP5 SWAP1 PUSH2 0x175F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x119B JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x10E9 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1772 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1124 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1121 SWAP2 DUP2 ADD SWAP1 PUSH2 0x17AF JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1181 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1152 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1157 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1179 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x16FA JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0xC8A JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x11B0 DUP4 DUP4 PUSH2 0x11D9 JUMP JUMPDEST PUSH2 0x11BD PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x10A5 JUMP JUMPDEST PUSH2 0x6EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x16FA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x122F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x64E JUMP JUMPDEST PUSH2 0x1238 DUP2 PUSH2 0x1000 JUMP JUMPDEST ISZERO PUSH2 0x1255 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x17CC JUMP JUMPDEST PUSH2 0x1263 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x101D JUMP JUMPDEST PUSH2 0x126C DUP2 PUSH2 0x1000 JUMP JUMPDEST ISZERO PUSH2 0x1289 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x17CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x749 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x131C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xED6 DUP2 PUSH2 0x12F4 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x133E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1355 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xED6 DUP3 PUSH2 0x1327 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1384 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x1368 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xED6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x135E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13EC DUP4 PUSH2 0x1327 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x140F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1418 DUP5 PUSH2 0x1327 JUMP JUMPDEST SWAP3 POP PUSH2 0x1426 PUSH1 0x20 DUP6 ADD PUSH2 0x1327 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1452 DUP4 PUSH2 0x1327 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1467 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x149E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14A7 DUP6 PUSH2 0x1327 JUMP JUMPDEST SWAP4 POP PUSH2 0x14B5 PUSH1 0x20 DUP7 ADD PUSH2 0x1327 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x14D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x14ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x14FF JUMPI PUSH2 0x14FF PUSH2 0x1472 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1527 JUMPI PUSH2 0x1527 PUSH2 0x1472 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1540 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1577 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1580 DUP4 PUSH2 0x1327 JUMP JUMPDEST SWAP2 POP PUSH2 0x158E PUSH1 0x20 DUP5 ADD PUSH2 0x1327 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x15AB JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x15CB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x51B JUMPI PUSH2 0x51B PUSH2 0x16AB JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x16F5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x51B JUMPI PUSH2 0x51B PUSH2 0x16AB JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x51B JUMPI PUSH2 0x51B PUSH2 0x16AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x17A5 SWAP1 DUP4 ADD DUP5 PUSH2 0x135E JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xED6 DUP2 PUSH2 0x12F4 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSIZE SWAP15 0xDA PUSH6 0xBDCD62A61F84 PUSH28 0x3F64C19E6F820915DF7E86063244C4DA937BBCC2F64736F6C634300 ADDMOD GT STOP CALLER ","sourceMap":"403:3495:31:-:0;;;1087:355;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1390:113:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1390:113:19;;;1464:5;1456;:13;;;;;;:::i;:::-;-1:-1:-1;1479:7:19;:17;1489:7;1479;:17;:::i;:::-;;1390:113;;936:32:18;955:12;:10;;;:12;;:::i;:::-;936:18;:32::i;:::-;1277:13:31::1;:28:::0;;;;1315:15:::1;:31:::0;;;;1356:15:::1;:31:::0;1397:18:::1;:38:::0;;-1:-1:-1;;1397:38:31::1;::::0;::::1;;::::0;;;::::1;::::0;;403:3495;;640:96:24;719:10;;640:96::o;2433:187:18:-;2525:6;;;-1:-1:-1;;;;;2541:17:18;;;-1:-1:-1;;;;;;2541:17:18;;;;;;;2573:40;;2525:6;;;2541:17;2525:6;;2573:40;;2506:16;;2573:40;2496:124;2433:187;:::o;14:461:33:-;108:6;116;124;132;185:3;173:9;164:7;160:23;156:33;153:53;;;202:1;199;192:12;153:53;231:9;225:16;215:26;;281:2;270:9;266:18;260:25;250:35;;325:2;314:9;310:18;304:25;294:35;;372:2;361:9;357:18;351:25;419:5;412:13;405:21;398:5;395:32;385:60;;441:1;438;431:12;385:60;14:461;;;;-1:-1:-1;14:461:33;;-1:-1:-1;;14:461:33:o;480:127::-;541:10;536:3;532:20;529:1;522:31;572:4;569:1;562:15;596:4;593:1;586:15;612:380;691:1;687:12;;;;734;;;755:61;;809:4;801:6;797:17;787:27;;755:61;862:2;854:6;851:14;831:18;828:38;825:161;;908:10;903:3;899:20;896:1;889:31;943:4;940:1;933:15;971:4;968:1;961:15;825:161;;612:380;;;:::o;1123:545::-;1225:2;1220:3;1217:11;1214:448;;;1261:1;1286:5;1282:2;1275:17;1331:4;1327:2;1317:19;1401:2;1389:10;1385:19;1382:1;1378:27;1372:4;1368:38;1437:4;1425:10;1422:20;1419:47;;;-1:-1:-1;1460:4:33;1419:47;1515:2;1510:3;1506:12;1503:1;1499:20;1493:4;1489:31;1479:41;;1570:82;1588:2;1581:5;1578:13;1570:82;;;1633:17;;;1614:1;1603:13;1570:82;;;1574:3;;;1214:448;1123:545;;;:::o;1844:1352::-;1964:10;;-1:-1:-1;;;;;1986:30:33;;1983:56;;;2019:18;;:::i;:::-;2048:97;2138:6;2098:38;2130:4;2124:11;2098:38;:::i;:::-;2092:4;2048:97;:::i;:::-;2200:4;;2264:2;2253:14;;2281:1;2276:663;;;;2983:1;3000:6;2997:89;;;-1:-1:-1;3052:19:33;;;3046:26;2997:89;-1:-1:-1;;1801:1:33;1797:11;;;1793:24;1789:29;1779:40;1825:1;1821:11;;;1776:57;3099:81;;2246:944;;2276:663;1070:1;1063:14;;;1107:4;1094:18;;-1:-1:-1;;2312:20:33;;;2430:236;2444:7;2441:1;2438:14;2430:236;;;2533:19;;;2527:26;2512:42;;2625:27;;;;2593:1;2581:14;;;;2460:19;;2430:236;;;2434:3;2694:6;2685:7;2682:19;2679:201;;;2755:19;;;2749:26;-1:-1:-1;;2838:1:33;2834:14;;;2850:3;2830:24;2826:37;2822:42;2807:58;2792:74;;2679:201;-1:-1:-1;;;;;2926:1:33;2910:14;;;2906:22;2893:36;;-1:-1:-1;1844:1352:33:o;:::-;403:3495:31;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_6655":{"entryPoint":null,"id":6655,"parameterSlots":0,"returnSlots":0},"@_afterTokenTransfer_4497":{"entryPoint":null,"id":4497,"parameterSlots":4,"returnSlots":0},"@_approve_4330":{"entryPoint":3013,"id":4330,"parameterSlots":2,"returnSlots":0},"@_beforeTokenTransfer_4484":{"entryPoint":4125,"id":4484,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_4438":{"entryPoint":4261,"id":4438,"parameterSlots":4,"returnSlots":1},"@_checkOwner_3495":{"entryPoint":3587,"id":3495,"parameterSlots":0,"returnSlots":0},"@_exists_3999":{"entryPoint":4096,"id":3999,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_4033":{"entryPoint":3123,"id":4033,"parameterSlots":2,"returnSlots":1},"@_mint_4154":{"entryPoint":4569,"id":4154,"parameterSlots":2,"returnSlots":0},"@_msgSender_5001":{"entryPoint":null,"id":5001,"parameterSlots":0,"returnSlots":1},"@_ownerOf_3981":{"entryPoint":3677,"id":3981,"parameterSlots":1,"returnSlots":1},"@_requireMinted_4376":{"entryPoint":2976,"id":4376,"parameterSlots":1,"returnSlots":0},"@_safeMint_4048":{"entryPoint":4070,"id":4048,"parameterSlots":2,"returnSlots":0},"@_safeMint_4077":{"entryPoint":4518,"id":4077,"parameterSlots":3,"returnSlots":0},"@_safeTransfer_3968":{"entryPoint":4019,"id":3968,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_4362":{"entryPoint":3817,"id":4362,"parameterSlots":3,"returnSlots":0},"@_transferOwnership_3552":{"entryPoint":3704,"id":3552,"parameterSlots":1,"returnSlots":0},"@_transfer_4306":{"entryPoint":3218,"id":4306,"parameterSlots":3,"returnSlots":0},"@approve_3810":{"entryPoint":1498,"id":3810,"parameterSlots":2,"returnSlots":0},"@balanceOf_3671":{"entryPoint":2230,"id":3671,"parameterSlots":1,"returnSlots":1},"@claim_6629":{"entryPoint":2176,"id":6629,"parameterSlots":0,"returnSlots":0},"@current_5029":{"entryPoint":null,"id":5029,"parameterSlots":1,"returnSlots":1},"@depositFunds_6616":{"entryPoint":2651,"id":6616,"parameterSlots":0,"returnSlots":0},"@div_6382":{"entryPoint":3805,"id":6382,"parameterSlots":2,"returnSlots":1},"@getAddressToAmountFunded_6787":{"entryPoint":null,"id":6787,"parameterSlots":1,"returnSlots":1},"@getApproved_3828":{"entryPoint":1459,"id":3828,"parameterSlots":1,"returnSlots":1},"@getFunder_6799":{"entryPoint":2573,"id":6799,"parameterSlots":1,"returnSlots":1},"@getIsGroupWithdrawal_6775":{"entryPoint":null,"id":6775,"parameterSlots":0,"returnSlots":1},"@getMinimumFundingAmount_6743":{"entryPoint":2621,"id":6743,"parameterSlots":0,"returnSlots":1},"@getTotalAmount_6751":{"entryPoint":null,"id":6751,"parameterSlots":0,"returnSlots":1},"@getVestingPeriod_6767":{"entryPoint":null,"id":6767,"parameterSlots":0,"returnSlots":1},"@getWithdrawalFee_6759":{"entryPoint":null,"id":6759,"parameterSlots":0,"returnSlots":1},"@increment_5043":{"entryPoint":null,"id":5043,"parameterSlots":1,"returnSlots":0},"@isApprovedForAll_3863":{"entryPoint":2812,"id":3863,"parameterSlots":2,"returnSlots":1},"@isContract_4677":{"entryPoint":null,"id":4677,"parameterSlots":1,"returnSlots":1},"@mul_6367":{"entryPoint":3786,"id":6367,"parameterSlots":2,"returnSlots":1},"@name_3709":{"entryPoint":1313,"id":3709,"parameterSlots":0,"returnSlots":1},"@ownerOf_3699":{"entryPoint":2178,"id":3699,"parameterSlots":1,"returnSlots":1},"@owner_3481":{"entryPoint":null,"id":3481,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_3509":{"entryPoint":2364,"id":3509,"parameterSlots":0,"returnSlots":0},"@requestForWithdrawal_6651":{"entryPoint":1780,"id":6651,"parameterSlots":1,"returnSlots":0},"@safeTransferFrom_3909":{"entryPoint":2149,"id":3909,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_3939":{"entryPoint":2517,"id":3939,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_3845":{"entryPoint":2506,"id":3845,"parameterSlots":2,"returnSlots":0},"@supportsInterface_3647":{"entryPoint":1231,"id":3647,"parameterSlots":1,"returnSlots":1},"@supportsInterface_5283":{"entryPoint":null,"id":5283,"parameterSlots":1,"returnSlots":1},"@symbol_3719":{"entryPoint":2491,"id":3719,"parameterSlots":0,"returnSlots":1},"@tokenURI_6625":{"entryPoint":null,"id":6625,"parameterSlots":1,"returnSlots":1},"@transferFrom_3890":{"entryPoint":1868,"id":3890,"parameterSlots":3,"returnSlots":0},"@transferOwnership_3532":{"entryPoint":2858,"id":3532,"parameterSlots":1,"returnSlots":0},"@withdrawFunds_6732":{"entryPoint":1917,"id":6732,"parameterSlots":0,"returnSlots":0},"@withdrawalCheck_6689":{"entryPoint":2382,"id":6689,"parameterSlots":0,"returnSlots":1},"abi_decode_address":{"entryPoint":4903,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":4931,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":5476,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":5114,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":5256,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":5174,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":5072,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":4874,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":6063,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":5047,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":4958,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":6002,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5028,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5585,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1996ccb6adb7d105883c503be6c0fca8b239a35cc290cf1105e26098b6525e2f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5882,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5734,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6092,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5662,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":5983,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":5848,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":5825,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":5964,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":5527,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":5803,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":5712,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":5234,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":4852,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:12424:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:87:33","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:33"},"nodeType":"YulFunctionCall","src":"125:12:33"},"nodeType":"YulExpressionStatement","src":"125:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"108:10:33","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"99:3:33"},"nodeType":"YulFunctionCall","src":"99:20:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:33"},"nodeType":"YulFunctionCall","src":"88:32:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:33"},"nodeType":"YulFunctionCall","src":"78:43:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:33"},"nodeType":"YulFunctionCall","src":"71:51:33"},"nodeType":"YulIf","src":"68:71:33"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:33","type":""}],"src":"14:131:33"},{"body":{"nodeType":"YulBlock","src":"219:176:33","statements":[{"body":{"nodeType":"YulBlock","src":"265:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"274:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"277:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"267:6:33"},"nodeType":"YulFunctionCall","src":"267:12:33"},"nodeType":"YulExpressionStatement","src":"267:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"240:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"249:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"236:3:33"},"nodeType":"YulFunctionCall","src":"236:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"261:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"232:3:33"},"nodeType":"YulFunctionCall","src":"232:32:33"},"nodeType":"YulIf","src":"229:52:33"},{"nodeType":"YulVariableDeclaration","src":"290:36:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"316:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"303:12:33"},"nodeType":"YulFunctionCall","src":"303:23:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"294:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"359:5:33"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"335:23:33"},"nodeType":"YulFunctionCall","src":"335:30:33"},"nodeType":"YulExpressionStatement","src":"335:30:33"},{"nodeType":"YulAssignment","src":"374:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"384:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"374:6:33"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"185:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"196:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"208:6:33","type":""}],"src":"150:245:33"},{"body":{"nodeType":"YulBlock","src":"495:92:33","statements":[{"nodeType":"YulAssignment","src":"505:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"517:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"528:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"513:3:33"},"nodeType":"YulFunctionCall","src":"513:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"505:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"547:9:33"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"572:6:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"565:6:33"},"nodeType":"YulFunctionCall","src":"565:14:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"558:6:33"},"nodeType":"YulFunctionCall","src":"558:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"540:6:33"},"nodeType":"YulFunctionCall","src":"540:41:33"},"nodeType":"YulExpressionStatement","src":"540:41:33"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"464:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"475:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"486:4:33","type":""}],"src":"400:187:33"},{"body":{"nodeType":"YulBlock","src":"641:124:33","statements":[{"nodeType":"YulAssignment","src":"651:29:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"673:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"660:12:33"},"nodeType":"YulFunctionCall","src":"660:20:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"651:5:33"}]},{"body":{"nodeType":"YulBlock","src":"743:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"752:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"755:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"745:6:33"},"nodeType":"YulFunctionCall","src":"745:12:33"},"nodeType":"YulExpressionStatement","src":"745:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"702:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"713:5:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"728:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"733:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"724:3:33"},"nodeType":"YulFunctionCall","src":"724:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"737:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"720:3:33"},"nodeType":"YulFunctionCall","src":"720:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"709:3:33"},"nodeType":"YulFunctionCall","src":"709:31:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"699:2:33"},"nodeType":"YulFunctionCall","src":"699:42:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"692:6:33"},"nodeType":"YulFunctionCall","src":"692:50:33"},"nodeType":"YulIf","src":"689:70:33"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"620:6:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"631:5:33","type":""}],"src":"592:173:33"},{"body":{"nodeType":"YulBlock","src":"840:116:33","statements":[{"body":{"nodeType":"YulBlock","src":"886:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"895:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"898:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"888:6:33"},"nodeType":"YulFunctionCall","src":"888:12:33"},"nodeType":"YulExpressionStatement","src":"888:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"861:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"870:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"857:3:33"},"nodeType":"YulFunctionCall","src":"857:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"882:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"853:3:33"},"nodeType":"YulFunctionCall","src":"853:32:33"},"nodeType":"YulIf","src":"850:52:33"},{"nodeType":"YulAssignment","src":"911:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"940:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"921:18:33"},"nodeType":"YulFunctionCall","src":"921:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"911:6:33"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"806:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"817:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"829:6:33","type":""}],"src":"770:186:33"},{"body":{"nodeType":"YulBlock","src":"1062:76:33","statements":[{"nodeType":"YulAssignment","src":"1072:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1084:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1095:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1080:3:33"},"nodeType":"YulFunctionCall","src":"1080:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1072:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1114:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"1125:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1107:6:33"},"nodeType":"YulFunctionCall","src":"1107:25:33"},"nodeType":"YulExpressionStatement","src":"1107:25:33"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1031:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1042:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1053:4:33","type":""}],"src":"961:177:33"},{"body":{"nodeType":"YulBlock","src":"1193:373:33","statements":[{"nodeType":"YulVariableDeclaration","src":"1203:26:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1223:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1217:5:33"},"nodeType":"YulFunctionCall","src":"1217:12:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1207:6:33","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1245:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"1250:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1238:6:33"},"nodeType":"YulFunctionCall","src":"1238:19:33"},"nodeType":"YulExpressionStatement","src":"1238:19:33"},{"nodeType":"YulVariableDeclaration","src":"1266:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"1275:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1270:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1337:110:33","statements":[{"nodeType":"YulVariableDeclaration","src":"1351:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"1361:4:33","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1355:2:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1393:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"1398:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1389:3:33"},"nodeType":"YulFunctionCall","src":"1389:11:33"},{"name":"_1","nodeType":"YulIdentifier","src":"1402:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1385:3:33"},"nodeType":"YulFunctionCall","src":"1385:20:33"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1421:5:33"},{"name":"i","nodeType":"YulIdentifier","src":"1428:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1417:3:33"},"nodeType":"YulFunctionCall","src":"1417:13:33"},{"name":"_1","nodeType":"YulIdentifier","src":"1432:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1413:3:33"},"nodeType":"YulFunctionCall","src":"1413:22:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1407:5:33"},"nodeType":"YulFunctionCall","src":"1407:29:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1378:6:33"},"nodeType":"YulFunctionCall","src":"1378:59:33"},"nodeType":"YulExpressionStatement","src":"1378:59:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1296:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"1299:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1293:2:33"},"nodeType":"YulFunctionCall","src":"1293:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1307:21:33","statements":[{"nodeType":"YulAssignment","src":"1309:17:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1318:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"1321:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1314:3:33"},"nodeType":"YulFunctionCall","src":"1314:12:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1309:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"1289:3:33","statements":[]},"src":"1285:162:33"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1471:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"1476:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1467:3:33"},"nodeType":"YulFunctionCall","src":"1467:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"1485:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1463:3:33"},"nodeType":"YulFunctionCall","src":"1463:27:33"},{"kind":"number","nodeType":"YulLiteral","src":"1492:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1456:6:33"},"nodeType":"YulFunctionCall","src":"1456:38:33"},"nodeType":"YulExpressionStatement","src":"1456:38:33"},{"nodeType":"YulAssignment","src":"1503:57:33","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1518:3:33"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1531:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1539:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1527:3:33"},"nodeType":"YulFunctionCall","src":"1527:15:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1548:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1544:3:33"},"nodeType":"YulFunctionCall","src":"1544:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1523:3:33"},"nodeType":"YulFunctionCall","src":"1523:29:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1514:3:33"},"nodeType":"YulFunctionCall","src":"1514:39:33"},{"kind":"number","nodeType":"YulLiteral","src":"1555:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1510:3:33"},"nodeType":"YulFunctionCall","src":"1510:50:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1503:3:33"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1170:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1177:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1185:3:33","type":""}],"src":"1143:423:33"},{"body":{"nodeType":"YulBlock","src":"1692:99:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1709:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1720:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1702:6:33"},"nodeType":"YulFunctionCall","src":"1702:21:33"},"nodeType":"YulExpressionStatement","src":"1702:21:33"},{"nodeType":"YulAssignment","src":"1732:53:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1758:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1770:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1781:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1766:3:33"},"nodeType":"YulFunctionCall","src":"1766:18:33"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1740:17:33"},"nodeType":"YulFunctionCall","src":"1740:45:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1732:4:33"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1661:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1672:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1683:4:33","type":""}],"src":"1571:220:33"},{"body":{"nodeType":"YulBlock","src":"1866:110:33","statements":[{"body":{"nodeType":"YulBlock","src":"1912:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1921:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1924:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1914:6:33"},"nodeType":"YulFunctionCall","src":"1914:12:33"},"nodeType":"YulExpressionStatement","src":"1914:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1887:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"1896:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1883:3:33"},"nodeType":"YulFunctionCall","src":"1883:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"1908:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1879:3:33"},"nodeType":"YulFunctionCall","src":"1879:32:33"},"nodeType":"YulIf","src":"1876:52:33"},{"nodeType":"YulAssignment","src":"1937:33:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1960:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1947:12:33"},"nodeType":"YulFunctionCall","src":"1947:23:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1937:6:33"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1832:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1843:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1855:6:33","type":""}],"src":"1796:180:33"},{"body":{"nodeType":"YulBlock","src":"2082:102:33","statements":[{"nodeType":"YulAssignment","src":"2092:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2104:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2115:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2100:3:33"},"nodeType":"YulFunctionCall","src":"2100:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2092:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2134:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2149:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2165:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2170:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2161:3:33"},"nodeType":"YulFunctionCall","src":"2161:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"2174:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2157:3:33"},"nodeType":"YulFunctionCall","src":"2157:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2145:3:33"},"nodeType":"YulFunctionCall","src":"2145:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2127:6:33"},"nodeType":"YulFunctionCall","src":"2127:51:33"},"nodeType":"YulExpressionStatement","src":"2127:51:33"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2051:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2062:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2073:4:33","type":""}],"src":"1981:203:33"},{"body":{"nodeType":"YulBlock","src":"2276:167:33","statements":[{"body":{"nodeType":"YulBlock","src":"2322:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2331:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2334:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2324:6:33"},"nodeType":"YulFunctionCall","src":"2324:12:33"},"nodeType":"YulExpressionStatement","src":"2324:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2297:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"2306:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2293:3:33"},"nodeType":"YulFunctionCall","src":"2293:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"2318:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2289:3:33"},"nodeType":"YulFunctionCall","src":"2289:32:33"},"nodeType":"YulIf","src":"2286:52:33"},{"nodeType":"YulAssignment","src":"2347:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2376:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2357:18:33"},"nodeType":"YulFunctionCall","src":"2357:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2347:6:33"}]},{"nodeType":"YulAssignment","src":"2395:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2422:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2433:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2418:3:33"},"nodeType":"YulFunctionCall","src":"2418:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2405:12:33"},"nodeType":"YulFunctionCall","src":"2405:32:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2395:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2234:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2245:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2257:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2265:6:33","type":""}],"src":"2189:254:33"},{"body":{"nodeType":"YulBlock","src":"2552:224:33","statements":[{"body":{"nodeType":"YulBlock","src":"2598:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2607:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2610:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2600:6:33"},"nodeType":"YulFunctionCall","src":"2600:12:33"},"nodeType":"YulExpressionStatement","src":"2600:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2573:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"2582:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2569:3:33"},"nodeType":"YulFunctionCall","src":"2569:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"2594:2:33","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2565:3:33"},"nodeType":"YulFunctionCall","src":"2565:32:33"},"nodeType":"YulIf","src":"2562:52:33"},{"nodeType":"YulAssignment","src":"2623:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2652:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2633:18:33"},"nodeType":"YulFunctionCall","src":"2633:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2623:6:33"}]},{"nodeType":"YulAssignment","src":"2671:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2704:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2715:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2700:3:33"},"nodeType":"YulFunctionCall","src":"2700:18:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2681:18:33"},"nodeType":"YulFunctionCall","src":"2681:38:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2671:6:33"}]},{"nodeType":"YulAssignment","src":"2728:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2755:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2766:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2751:3:33"},"nodeType":"YulFunctionCall","src":"2751:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2738:12:33"},"nodeType":"YulFunctionCall","src":"2738:32:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2728:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2502:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2513:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2525:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2533:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2541:6:33","type":""}],"src":"2448:328:33"},{"body":{"nodeType":"YulBlock","src":"2865:263:33","statements":[{"body":{"nodeType":"YulBlock","src":"2911:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2920:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2923:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2913:6:33"},"nodeType":"YulFunctionCall","src":"2913:12:33"},"nodeType":"YulExpressionStatement","src":"2913:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2886:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"2895:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2882:3:33"},"nodeType":"YulFunctionCall","src":"2882:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"2907:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2878:3:33"},"nodeType":"YulFunctionCall","src":"2878:32:33"},"nodeType":"YulIf","src":"2875:52:33"},{"nodeType":"YulAssignment","src":"2936:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2965:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2946:18:33"},"nodeType":"YulFunctionCall","src":"2946:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2936:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"2984:45:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3014:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3025:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3010:3:33"},"nodeType":"YulFunctionCall","src":"3010:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2997:12:33"},"nodeType":"YulFunctionCall","src":"2997:32:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2988:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3082:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3091:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3094:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3084:6:33"},"nodeType":"YulFunctionCall","src":"3084:12:33"},"nodeType":"YulExpressionStatement","src":"3084:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3051:5:33"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3072:5:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3065:6:33"},"nodeType":"YulFunctionCall","src":"3065:13:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3058:6:33"},"nodeType":"YulFunctionCall","src":"3058:21:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3048:2:33"},"nodeType":"YulFunctionCall","src":"3048:32:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3041:6:33"},"nodeType":"YulFunctionCall","src":"3041:40:33"},"nodeType":"YulIf","src":"3038:60:33"},{"nodeType":"YulAssignment","src":"3107:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"3117:5:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3107:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2823:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2834:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2846:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2854:6:33","type":""}],"src":"2781:347:33"},{"body":{"nodeType":"YulBlock","src":"3165:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3182:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3189:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3194:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3185:3:33"},"nodeType":"YulFunctionCall","src":"3185:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3175:6:33"},"nodeType":"YulFunctionCall","src":"3175:31:33"},"nodeType":"YulExpressionStatement","src":"3175:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3222:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3225:4:33","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3215:6:33"},"nodeType":"YulFunctionCall","src":"3215:15:33"},"nodeType":"YulExpressionStatement","src":"3215:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3246:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3249:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3239:6:33"},"nodeType":"YulFunctionCall","src":"3239:15:33"},"nodeType":"YulExpressionStatement","src":"3239:15:33"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3133:127:33"},{"body":{"nodeType":"YulBlock","src":"3395:1008:33","statements":[{"body":{"nodeType":"YulBlock","src":"3442:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3451:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3454:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3444:6:33"},"nodeType":"YulFunctionCall","src":"3444:12:33"},"nodeType":"YulExpressionStatement","src":"3444:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3416:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"3425:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3412:3:33"},"nodeType":"YulFunctionCall","src":"3412:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"3437:3:33","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3408:3:33"},"nodeType":"YulFunctionCall","src":"3408:33:33"},"nodeType":"YulIf","src":"3405:53:33"},{"nodeType":"YulAssignment","src":"3467:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3496:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3477:18:33"},"nodeType":"YulFunctionCall","src":"3477:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3467:6:33"}]},{"nodeType":"YulAssignment","src":"3515:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3548:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3559:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3544:3:33"},"nodeType":"YulFunctionCall","src":"3544:18:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3525:18:33"},"nodeType":"YulFunctionCall","src":"3525:38:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3515:6:33"}]},{"nodeType":"YulAssignment","src":"3572:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3599:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3610:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3595:3:33"},"nodeType":"YulFunctionCall","src":"3595:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3582:12:33"},"nodeType":"YulFunctionCall","src":"3582:32:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3572:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"3623:46:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3654:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3665:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3650:3:33"},"nodeType":"YulFunctionCall","src":"3650:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3637:12:33"},"nodeType":"YulFunctionCall","src":"3637:32:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3627:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3678:28:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3688:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3682:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3733:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3742:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3745:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3735:6:33"},"nodeType":"YulFunctionCall","src":"3735:12:33"},"nodeType":"YulExpressionStatement","src":"3735:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3721:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"3729:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3718:2:33"},"nodeType":"YulFunctionCall","src":"3718:14:33"},"nodeType":"YulIf","src":"3715:34:33"},{"nodeType":"YulVariableDeclaration","src":"3758:32:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3772:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"3783:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3768:3:33"},"nodeType":"YulFunctionCall","src":"3768:22:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3762:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3838:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3847:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3850:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3840:6:33"},"nodeType":"YulFunctionCall","src":"3840:12:33"},"nodeType":"YulExpressionStatement","src":"3840:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3817:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"3821:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3813:3:33"},"nodeType":"YulFunctionCall","src":"3813:13:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3828:7:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3809:3:33"},"nodeType":"YulFunctionCall","src":"3809:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3802:6:33"},"nodeType":"YulFunctionCall","src":"3802:35:33"},"nodeType":"YulIf","src":"3799:55:33"},{"nodeType":"YulVariableDeclaration","src":"3863:26:33","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3886:2:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3873:12:33"},"nodeType":"YulFunctionCall","src":"3873:16:33"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3867:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3912:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3914:16:33"},"nodeType":"YulFunctionCall","src":"3914:18:33"},"nodeType":"YulExpressionStatement","src":"3914:18:33"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3904:2:33"},{"name":"_1","nodeType":"YulIdentifier","src":"3908:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3901:2:33"},"nodeType":"YulFunctionCall","src":"3901:10:33"},"nodeType":"YulIf","src":"3898:36:33"},{"nodeType":"YulVariableDeclaration","src":"3943:17:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3957:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3953:3:33"},"nodeType":"YulFunctionCall","src":"3953:7:33"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"3947:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3969:23:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3989:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3983:5:33"},"nodeType":"YulFunctionCall","src":"3983:9:33"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3973:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4001:71:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4023:6:33"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4047:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"4051:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4043:3:33"},"nodeType":"YulFunctionCall","src":"4043:13:33"},{"name":"_4","nodeType":"YulIdentifier","src":"4058:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4039:3:33"},"nodeType":"YulFunctionCall","src":"4039:22:33"},{"kind":"number","nodeType":"YulLiteral","src":"4063:2:33","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4035:3:33"},"nodeType":"YulFunctionCall","src":"4035:31:33"},{"name":"_4","nodeType":"YulIdentifier","src":"4068:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4031:3:33"},"nodeType":"YulFunctionCall","src":"4031:40:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4019:3:33"},"nodeType":"YulFunctionCall","src":"4019:53:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4005:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4131:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4133:16:33"},"nodeType":"YulFunctionCall","src":"4133:18:33"},"nodeType":"YulExpressionStatement","src":"4133:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4090:10:33"},{"name":"_1","nodeType":"YulIdentifier","src":"4102:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4087:2:33"},"nodeType":"YulFunctionCall","src":"4087:18:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4110:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4122:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4107:2:33"},"nodeType":"YulFunctionCall","src":"4107:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4084:2:33"},"nodeType":"YulFunctionCall","src":"4084:46:33"},"nodeType":"YulIf","src":"4081:72:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4169:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4173:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4162:6:33"},"nodeType":"YulFunctionCall","src":"4162:22:33"},"nodeType":"YulExpressionStatement","src":"4162:22:33"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4200:6:33"},{"name":"_3","nodeType":"YulIdentifier","src":"4208:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4193:6:33"},"nodeType":"YulFunctionCall","src":"4193:18:33"},"nodeType":"YulExpressionStatement","src":"4193:18:33"},{"body":{"nodeType":"YulBlock","src":"4257:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4266:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4269:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4259:6:33"},"nodeType":"YulFunctionCall","src":"4259:12:33"},"nodeType":"YulExpressionStatement","src":"4259:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4234:2:33"},{"name":"_3","nodeType":"YulIdentifier","src":"4238:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4230:3:33"},"nodeType":"YulFunctionCall","src":"4230:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"4243:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4226:3:33"},"nodeType":"YulFunctionCall","src":"4226:20:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4248:7:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4223:2:33"},"nodeType":"YulFunctionCall","src":"4223:33:33"},"nodeType":"YulIf","src":"4220:53:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4299:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"4307:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4295:3:33"},"nodeType":"YulFunctionCall","src":"4295:15:33"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4316:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"4320:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4312:3:33"},"nodeType":"YulFunctionCall","src":"4312:11:33"},{"name":"_3","nodeType":"YulIdentifier","src":"4325:2:33"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4282:12:33"},"nodeType":"YulFunctionCall","src":"4282:46:33"},"nodeType":"YulExpressionStatement","src":"4282:46:33"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4352:6:33"},{"name":"_3","nodeType":"YulIdentifier","src":"4360:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4348:3:33"},"nodeType":"YulFunctionCall","src":"4348:15:33"},{"kind":"number","nodeType":"YulLiteral","src":"4365:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4344:3:33"},"nodeType":"YulFunctionCall","src":"4344:24:33"},{"kind":"number","nodeType":"YulLiteral","src":"4370:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4337:6:33"},"nodeType":"YulFunctionCall","src":"4337:35:33"},"nodeType":"YulExpressionStatement","src":"4337:35:33"},{"nodeType":"YulAssignment","src":"4381:16:33","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4391:6:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4381:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3337:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3348:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3360:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3368:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3376:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3384:6:33","type":""}],"src":"3265:1138:33"},{"body":{"nodeType":"YulBlock","src":"4495:173:33","statements":[{"body":{"nodeType":"YulBlock","src":"4541:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4550:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4553:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4543:6:33"},"nodeType":"YulFunctionCall","src":"4543:12:33"},"nodeType":"YulExpressionStatement","src":"4543:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4516:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"4525:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4512:3:33"},"nodeType":"YulFunctionCall","src":"4512:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"4537:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4508:3:33"},"nodeType":"YulFunctionCall","src":"4508:32:33"},"nodeType":"YulIf","src":"4505:52:33"},{"nodeType":"YulAssignment","src":"4566:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4595:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4576:18:33"},"nodeType":"YulFunctionCall","src":"4576:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4566:6:33"}]},{"nodeType":"YulAssignment","src":"4614:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4647:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4658:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4643:3:33"},"nodeType":"YulFunctionCall","src":"4643:18:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4624:18:33"},"nodeType":"YulFunctionCall","src":"4624:38:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4614:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4453:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4464:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4476:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4484:6:33","type":""}],"src":"4408:260:33"},{"body":{"nodeType":"YulBlock","src":"4728:325:33","statements":[{"nodeType":"YulAssignment","src":"4738:22:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4752:1:33","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"4755:4:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4748:3:33"},"nodeType":"YulFunctionCall","src":"4748:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4738:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"4769:38:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4799:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"4805:1:33","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4795:3:33"},"nodeType":"YulFunctionCall","src":"4795:12:33"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"4773:18:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4846:31:33","statements":[{"nodeType":"YulAssignment","src":"4848:27:33","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4862:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"4870:4:33","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4858:3:33"},"nodeType":"YulFunctionCall","src":"4858:17:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4848:6:33"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4826:18:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4819:6:33"},"nodeType":"YulFunctionCall","src":"4819:26:33"},"nodeType":"YulIf","src":"4816:61:33"},{"body":{"nodeType":"YulBlock","src":"4936:111:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4957:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4964:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4969:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4960:3:33"},"nodeType":"YulFunctionCall","src":"4960:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4950:6:33"},"nodeType":"YulFunctionCall","src":"4950:31:33"},"nodeType":"YulExpressionStatement","src":"4950:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5001:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5004:4:33","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4994:6:33"},"nodeType":"YulFunctionCall","src":"4994:15:33"},"nodeType":"YulExpressionStatement","src":"4994:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5029:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5032:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5022:6:33"},"nodeType":"YulFunctionCall","src":"5022:15:33"},"nodeType":"YulExpressionStatement","src":"5022:15:33"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4892:18:33"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4915:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"4923:2:33","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4912:2:33"},"nodeType":"YulFunctionCall","src":"4912:14:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4889:2:33"},"nodeType":"YulFunctionCall","src":"4889:38:33"},"nodeType":"YulIf","src":"4886:161:33"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"4708:4:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"4717:6:33","type":""}],"src":"4673:380:33"},{"body":{"nodeType":"YulBlock","src":"5232:223:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5249:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5260:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5242:6:33"},"nodeType":"YulFunctionCall","src":"5242:21:33"},"nodeType":"YulExpressionStatement","src":"5242:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5283:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5294:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5279:3:33"},"nodeType":"YulFunctionCall","src":"5279:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"5299:2:33","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5272:6:33"},"nodeType":"YulFunctionCall","src":"5272:30:33"},"nodeType":"YulExpressionStatement","src":"5272:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5322:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5333:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5318:3:33"},"nodeType":"YulFunctionCall","src":"5318:18:33"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"5338:34:33","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5311:6:33"},"nodeType":"YulFunctionCall","src":"5311:62:33"},"nodeType":"YulExpressionStatement","src":"5311:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5393:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5404:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5389:3:33"},"nodeType":"YulFunctionCall","src":"5389:18:33"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"5409:3:33","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5382:6:33"},"nodeType":"YulFunctionCall","src":"5382:31:33"},"nodeType":"YulExpressionStatement","src":"5382:31:33"},{"nodeType":"YulAssignment","src":"5422:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5434:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5445:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5430:3:33"},"nodeType":"YulFunctionCall","src":"5430:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5422:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5209:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5223:4:33","type":""}],"src":"5058:397:33"},{"body":{"nodeType":"YulBlock","src":"5634:251:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5651:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5662:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5644:6:33"},"nodeType":"YulFunctionCall","src":"5644:21:33"},"nodeType":"YulExpressionStatement","src":"5644:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5685:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5696:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5681:3:33"},"nodeType":"YulFunctionCall","src":"5681:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"5701:2:33","type":"","value":"61"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5674:6:33"},"nodeType":"YulFunctionCall","src":"5674:30:33"},"nodeType":"YulExpressionStatement","src":"5674:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5724:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5735:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5720:3:33"},"nodeType":"YulFunctionCall","src":"5720:18:33"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"5740:34:33","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5713:6:33"},"nodeType":"YulFunctionCall","src":"5713:62:33"},"nodeType":"YulExpressionStatement","src":"5713:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5795:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5806:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5791:3:33"},"nodeType":"YulFunctionCall","src":"5791:18:33"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"5811:31:33","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5784:6:33"},"nodeType":"YulFunctionCall","src":"5784:59:33"},"nodeType":"YulExpressionStatement","src":"5784:59:33"},{"nodeType":"YulAssignment","src":"5852:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5864:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5875:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5860:3:33"},"nodeType":"YulFunctionCall","src":"5860:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5852:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5611:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5625:4:33","type":""}],"src":"5460:425:33"},{"body":{"nodeType":"YulBlock","src":"6064:235:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6081:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6092:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6074:6:33"},"nodeType":"YulFunctionCall","src":"6074:21:33"},"nodeType":"YulExpressionStatement","src":"6074:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6115:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6126:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6111:3:33"},"nodeType":"YulFunctionCall","src":"6111:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"6131:2:33","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6104:6:33"},"nodeType":"YulFunctionCall","src":"6104:30:33"},"nodeType":"YulExpressionStatement","src":"6104:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6154:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6165:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6150:3:33"},"nodeType":"YulFunctionCall","src":"6150:18:33"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"6170:34:33","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6143:6:33"},"nodeType":"YulFunctionCall","src":"6143:62:33"},"nodeType":"YulExpressionStatement","src":"6143:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6225:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6236:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6221:3:33"},"nodeType":"YulFunctionCall","src":"6221:18:33"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"6241:15:33","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6214:6:33"},"nodeType":"YulFunctionCall","src":"6214:43:33"},"nodeType":"YulExpressionStatement","src":"6214:43:33"},{"nodeType":"YulAssignment","src":"6266:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6278:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6289:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6274:3:33"},"nodeType":"YulFunctionCall","src":"6274:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6266:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6041:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6055:4:33","type":""}],"src":"5890:409:33"},{"body":{"nodeType":"YulBlock","src":"6478:231:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6495:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6506:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6488:6:33"},"nodeType":"YulFunctionCall","src":"6488:21:33"},"nodeType":"YulExpressionStatement","src":"6488:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6529:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6540:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6525:3:33"},"nodeType":"YulFunctionCall","src":"6525:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"6545:2:33","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6518:6:33"},"nodeType":"YulFunctionCall","src":"6518:30:33"},"nodeType":"YulExpressionStatement","src":"6518:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6568:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6579:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6564:3:33"},"nodeType":"YulFunctionCall","src":"6564:18:33"},{"hexValue":"5468657265206973206e6f206d616a6f7269747920617070726f76616c20746f","kind":"string","nodeType":"YulLiteral","src":"6584:34:33","type":"","value":"There is no majority approval to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6557:6:33"},"nodeType":"YulFunctionCall","src":"6557:62:33"},"nodeType":"YulExpressionStatement","src":"6557:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6639:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6650:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6635:3:33"},"nodeType":"YulFunctionCall","src":"6635:18:33"},{"hexValue":"207769746864726177","kind":"string","nodeType":"YulLiteral","src":"6655:11:33","type":"","value":" withdraw"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6628:6:33"},"nodeType":"YulFunctionCall","src":"6628:39:33"},"nodeType":"YulExpressionStatement","src":"6628:39:33"},{"nodeType":"YulAssignment","src":"6676:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6688:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6699:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6684:3:33"},"nodeType":"YulFunctionCall","src":"6684:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6676:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_1996ccb6adb7d105883c503be6c0fca8b239a35cc290cf1105e26098b6525e2f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6455:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6469:4:33","type":""}],"src":"6304:405:33"},{"body":{"nodeType":"YulBlock","src":"6905:14:33","statements":[{"nodeType":"YulAssignment","src":"6907:10:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"6914:3:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6907:3:33"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6889:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6897:3:33","type":""}],"src":"6714:205:33"},{"body":{"nodeType":"YulBlock","src":"7098:174:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7115:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7126:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7108:6:33"},"nodeType":"YulFunctionCall","src":"7108:21:33"},"nodeType":"YulExpressionStatement","src":"7108:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7149:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7160:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7145:3:33"},"nodeType":"YulFunctionCall","src":"7145:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"7165:2:33","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7138:6:33"},"nodeType":"YulFunctionCall","src":"7138:30:33"},"nodeType":"YulExpressionStatement","src":"7138:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7188:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7199:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7184:3:33"},"nodeType":"YulFunctionCall","src":"7184:18:33"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"7204:26:33","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7177:6:33"},"nodeType":"YulFunctionCall","src":"7177:54:33"},"nodeType":"YulExpressionStatement","src":"7177:54:33"},{"nodeType":"YulAssignment","src":"7240:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7252:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7263:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7248:3:33"},"nodeType":"YulFunctionCall","src":"7248:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7240:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7075:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7089:4:33","type":""}],"src":"6924:348:33"},{"body":{"nodeType":"YulBlock","src":"7451:231:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7468:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7479:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7461:6:33"},"nodeType":"YulFunctionCall","src":"7461:21:33"},"nodeType":"YulExpressionStatement","src":"7461:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7502:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7513:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7498:3:33"},"nodeType":"YulFunctionCall","src":"7498:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"7518:2:33","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7491:6:33"},"nodeType":"YulFunctionCall","src":"7491:30:33"},"nodeType":"YulExpressionStatement","src":"7491:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7541:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7552:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7537:3:33"},"nodeType":"YulFunctionCall","src":"7537:18:33"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"7557:34:33","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7530:6:33"},"nodeType":"YulFunctionCall","src":"7530:62:33"},"nodeType":"YulExpressionStatement","src":"7530:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7612:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7623:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7608:3:33"},"nodeType":"YulFunctionCall","src":"7608:18:33"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"7628:11:33","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7601:6:33"},"nodeType":"YulFunctionCall","src":"7601:39:33"},"nodeType":"YulExpressionStatement","src":"7601:39:33"},{"nodeType":"YulAssignment","src":"7649:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7661:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7672:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7657:3:33"},"nodeType":"YulFunctionCall","src":"7657:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7649:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7428:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7442:4:33","type":""}],"src":"7277:405:33"},{"body":{"nodeType":"YulBlock","src":"7719:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7736:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7743:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"7748:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7739:3:33"},"nodeType":"YulFunctionCall","src":"7739:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7729:6:33"},"nodeType":"YulFunctionCall","src":"7729:31:33"},"nodeType":"YulExpressionStatement","src":"7729:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7776:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7779:4:33","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7769:6:33"},"nodeType":"YulFunctionCall","src":"7769:15:33"},"nodeType":"YulExpressionStatement","src":"7769:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7800:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7803:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7793:6:33"},"nodeType":"YulFunctionCall","src":"7793:15:33"},"nodeType":"YulExpressionStatement","src":"7793:15:33"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"7687:127:33"},{"body":{"nodeType":"YulBlock","src":"7993:228:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8010:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8021:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8003:6:33"},"nodeType":"YulFunctionCall","src":"8003:21:33"},"nodeType":"YulExpressionStatement","src":"8003:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8044:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8055:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8040:3:33"},"nodeType":"YulFunctionCall","src":"8040:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"8060:2:33","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8033:6:33"},"nodeType":"YulFunctionCall","src":"8033:30:33"},"nodeType":"YulExpressionStatement","src":"8033:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8083:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8094:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8079:3:33"},"nodeType":"YulFunctionCall","src":"8079:18:33"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"8099:34:33","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8072:6:33"},"nodeType":"YulFunctionCall","src":"8072:62:33"},"nodeType":"YulExpressionStatement","src":"8072:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8154:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8165:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8150:3:33"},"nodeType":"YulFunctionCall","src":"8150:18:33"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"8170:8:33","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8143:6:33"},"nodeType":"YulFunctionCall","src":"8143:36:33"},"nodeType":"YulExpressionStatement","src":"8143:36:33"},{"nodeType":"YulAssignment","src":"8188:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8200:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8211:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8196:3:33"},"nodeType":"YulFunctionCall","src":"8196:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8188:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7970:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7984:4:33","type":""}],"src":"7819:402:33"},{"body":{"nodeType":"YulBlock","src":"8400:227:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8417:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8428:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8410:6:33"},"nodeType":"YulFunctionCall","src":"8410:21:33"},"nodeType":"YulExpressionStatement","src":"8410:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8451:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8462:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8447:3:33"},"nodeType":"YulFunctionCall","src":"8447:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"8467:2:33","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8440:6:33"},"nodeType":"YulFunctionCall","src":"8440:30:33"},"nodeType":"YulExpressionStatement","src":"8440:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8490:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8501:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8486:3:33"},"nodeType":"YulFunctionCall","src":"8486:18:33"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"8506:34:33","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8479:6:33"},"nodeType":"YulFunctionCall","src":"8479:62:33"},"nodeType":"YulExpressionStatement","src":"8479:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8561:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8572:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8557:3:33"},"nodeType":"YulFunctionCall","src":"8557:18:33"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"8577:7:33","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8550:6:33"},"nodeType":"YulFunctionCall","src":"8550:35:33"},"nodeType":"YulExpressionStatement","src":"8550:35:33"},{"nodeType":"YulAssignment","src":"8594:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8606:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8617:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8602:3:33"},"nodeType":"YulFunctionCall","src":"8602:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8594:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8377:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8391:4:33","type":""}],"src":"8226:401:33"},{"body":{"nodeType":"YulBlock","src":"8806:226:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8823:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8834:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8816:6:33"},"nodeType":"YulFunctionCall","src":"8816:21:33"},"nodeType":"YulExpressionStatement","src":"8816:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8857:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8868:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8853:3:33"},"nodeType":"YulFunctionCall","src":"8853:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"8873:2:33","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8846:6:33"},"nodeType":"YulFunctionCall","src":"8846:30:33"},"nodeType":"YulExpressionStatement","src":"8846:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8896:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8907:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8892:3:33"},"nodeType":"YulFunctionCall","src":"8892:18:33"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"8912:34:33","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8885:6:33"},"nodeType":"YulFunctionCall","src":"8885:62:33"},"nodeType":"YulExpressionStatement","src":"8885:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8967:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8978:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8963:3:33"},"nodeType":"YulFunctionCall","src":"8963:18:33"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"8983:6:33","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8956:6:33"},"nodeType":"YulFunctionCall","src":"8956:34:33"},"nodeType":"YulExpressionStatement","src":"8956:34:33"},{"nodeType":"YulAssignment","src":"8999:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9011:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9022:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9007:3:33"},"nodeType":"YulFunctionCall","src":"9007:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8999:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8783:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8797:4:33","type":""}],"src":"8632:400:33"},{"body":{"nodeType":"YulBlock","src":"9211:182:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9228:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9239:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9221:6:33"},"nodeType":"YulFunctionCall","src":"9221:21:33"},"nodeType":"YulExpressionStatement","src":"9221:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9262:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9273:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9258:3:33"},"nodeType":"YulFunctionCall","src":"9258:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"9278:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9251:6:33"},"nodeType":"YulFunctionCall","src":"9251:30:33"},"nodeType":"YulExpressionStatement","src":"9251:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9301:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9312:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9297:3:33"},"nodeType":"YulFunctionCall","src":"9297:18:33"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"9317:34:33","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9290:6:33"},"nodeType":"YulFunctionCall","src":"9290:62:33"},"nodeType":"YulExpressionStatement","src":"9290:62:33"},{"nodeType":"YulAssignment","src":"9361:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9373:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9384:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9369:3:33"},"nodeType":"YulFunctionCall","src":"9369:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9361:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9188:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9202:4:33","type":""}],"src":"9037:356:33"},{"body":{"nodeType":"YulBlock","src":"9430:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9447:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9454:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9459:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9450:3:33"},"nodeType":"YulFunctionCall","src":"9450:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9440:6:33"},"nodeType":"YulFunctionCall","src":"9440:31:33"},"nodeType":"YulExpressionStatement","src":"9440:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9487:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9490:4:33","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9480:6:33"},"nodeType":"YulFunctionCall","src":"9480:15:33"},"nodeType":"YulExpressionStatement","src":"9480:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9511:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9514:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9504:6:33"},"nodeType":"YulFunctionCall","src":"9504:15:33"},"nodeType":"YulExpressionStatement","src":"9504:15:33"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"9398:127:33"},{"body":{"nodeType":"YulBlock","src":"9582:116:33","statements":[{"nodeType":"YulAssignment","src":"9592:20:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9607:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"9610:1:33"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"9603:3:33"},"nodeType":"YulFunctionCall","src":"9603:9:33"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"9592:7:33"}]},{"body":{"nodeType":"YulBlock","src":"9670:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9672:16:33"},"nodeType":"YulFunctionCall","src":"9672:18:33"},"nodeType":"YulExpressionStatement","src":"9672:18:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9641:1:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9634:6:33"},"nodeType":"YulFunctionCall","src":"9634:9:33"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9648:1:33"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"9655:7:33"},{"name":"x","nodeType":"YulIdentifier","src":"9664:1:33"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"9651:3:33"},"nodeType":"YulFunctionCall","src":"9651:15:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9645:2:33"},"nodeType":"YulFunctionCall","src":"9645:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"9631:2:33"},"nodeType":"YulFunctionCall","src":"9631:37:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9624:6:33"},"nodeType":"YulFunctionCall","src":"9624:45:33"},"nodeType":"YulIf","src":"9621:71:33"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9561:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"9564:1:33","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"9570:7:33","type":""}],"src":"9530:168:33"},{"body":{"nodeType":"YulBlock","src":"9749:171:33","statements":[{"body":{"nodeType":"YulBlock","src":"9780:111:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9801:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9808:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9813:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9804:3:33"},"nodeType":"YulFunctionCall","src":"9804:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9794:6:33"},"nodeType":"YulFunctionCall","src":"9794:31:33"},"nodeType":"YulExpressionStatement","src":"9794:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9845:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9848:4:33","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9838:6:33"},"nodeType":"YulFunctionCall","src":"9838:15:33"},"nodeType":"YulExpressionStatement","src":"9838:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9873:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9876:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9866:6:33"},"nodeType":"YulFunctionCall","src":"9866:15:33"},"nodeType":"YulExpressionStatement","src":"9866:15:33"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9769:1:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9762:6:33"},"nodeType":"YulFunctionCall","src":"9762:9:33"},"nodeType":"YulIf","src":"9759:132:33"},{"nodeType":"YulAssignment","src":"9900:14:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9909:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"9912:1:33"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"9905:3:33"},"nodeType":"YulFunctionCall","src":"9905:9:33"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"9900:1:33"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9734:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"9737:1:33","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"9743:1:33","type":""}],"src":"9703:217:33"},{"body":{"nodeType":"YulBlock","src":"10099:175:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10116:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10127:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10109:6:33"},"nodeType":"YulFunctionCall","src":"10109:21:33"},"nodeType":"YulExpressionStatement","src":"10109:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10150:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10161:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10146:3:33"},"nodeType":"YulFunctionCall","src":"10146:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"10166:2:33","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10139:6:33"},"nodeType":"YulFunctionCall","src":"10139:30:33"},"nodeType":"YulExpressionStatement","src":"10139:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10189:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10200:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10185:3:33"},"nodeType":"YulFunctionCall","src":"10185:18:33"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"10205:27:33","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10178:6:33"},"nodeType":"YulFunctionCall","src":"10178:55:33"},"nodeType":"YulExpressionStatement","src":"10178:55:33"},{"nodeType":"YulAssignment","src":"10242:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10254:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10265:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10250:3:33"},"nodeType":"YulFunctionCall","src":"10250:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10242:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10076:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10090:4:33","type":""}],"src":"9925:349:33"},{"body":{"nodeType":"YulBlock","src":"10453:240:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10470:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10481:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10463:6:33"},"nodeType":"YulFunctionCall","src":"10463:21:33"},"nodeType":"YulExpressionStatement","src":"10463:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10504:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10515:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10500:3:33"},"nodeType":"YulFunctionCall","src":"10500:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"10520:2:33","type":"","value":"50"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10493:6:33"},"nodeType":"YulFunctionCall","src":"10493:30:33"},"nodeType":"YulExpressionStatement","src":"10493:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10543:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10554:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10539:3:33"},"nodeType":"YulFunctionCall","src":"10539:18:33"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"10559:34:33","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10532:6:33"},"nodeType":"YulFunctionCall","src":"10532:62:33"},"nodeType":"YulExpressionStatement","src":"10532:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10614:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10625:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10610:3:33"},"nodeType":"YulFunctionCall","src":"10610:18:33"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"10630:20:33","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10603:6:33"},"nodeType":"YulFunctionCall","src":"10603:48:33"},"nodeType":"YulExpressionStatement","src":"10603:48:33"},{"nodeType":"YulAssignment","src":"10660:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10672:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10683:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10668:3:33"},"nodeType":"YulFunctionCall","src":"10668:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10660:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10430:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10444:4:33","type":""}],"src":"10279:414:33"},{"body":{"nodeType":"YulBlock","src":"10747:79:33","statements":[{"nodeType":"YulAssignment","src":"10757:17:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10769:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"10772:1:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10765:3:33"},"nodeType":"YulFunctionCall","src":"10765:9:33"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"10757:4:33"}]},{"body":{"nodeType":"YulBlock","src":"10798:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10800:16:33"},"nodeType":"YulFunctionCall","src":"10800:18:33"},"nodeType":"YulExpressionStatement","src":"10800:18:33"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"10789:4:33"},{"name":"x","nodeType":"YulIdentifier","src":"10795:1:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10786:2:33"},"nodeType":"YulFunctionCall","src":"10786:11:33"},"nodeType":"YulIf","src":"10783:37:33"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"10729:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"10732:1:33","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"10738:4:33","type":""}],"src":"10698:128:33"},{"body":{"nodeType":"YulBlock","src":"10879:77:33","statements":[{"nodeType":"YulAssignment","src":"10889:16:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10900:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"10903:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10896:3:33"},"nodeType":"YulFunctionCall","src":"10896:9:33"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"10889:3:33"}]},{"body":{"nodeType":"YulBlock","src":"10928:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10930:16:33"},"nodeType":"YulFunctionCall","src":"10930:18:33"},"nodeType":"YulExpressionStatement","src":"10930:18:33"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10920:1:33"},{"name":"sum","nodeType":"YulIdentifier","src":"10923:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10917:2:33"},"nodeType":"YulFunctionCall","src":"10917:10:33"},"nodeType":"YulIf","src":"10914:36:33"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"10862:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"10865:1:33","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"10871:3:33","type":""}],"src":"10831:125:33"},{"body":{"nodeType":"YulBlock","src":"11164:286:33","statements":[{"nodeType":"YulVariableDeclaration","src":"11174:29:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11192:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"11197:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11188:3:33"},"nodeType":"YulFunctionCall","src":"11188:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"11201:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11184:3:33"},"nodeType":"YulFunctionCall","src":"11184:19:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"11178:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11219:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11234:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"11242:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11230:3:33"},"nodeType":"YulFunctionCall","src":"11230:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11212:6:33"},"nodeType":"YulFunctionCall","src":"11212:34:33"},"nodeType":"YulExpressionStatement","src":"11212:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11266:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11277:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11262:3:33"},"nodeType":"YulFunctionCall","src":"11262:18:33"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11286:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"11294:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11282:3:33"},"nodeType":"YulFunctionCall","src":"11282:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11255:6:33"},"nodeType":"YulFunctionCall","src":"11255:43:33"},"nodeType":"YulExpressionStatement","src":"11255:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11318:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11329:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11314:3:33"},"nodeType":"YulFunctionCall","src":"11314:18:33"},{"name":"value2","nodeType":"YulIdentifier","src":"11334:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11307:6:33"},"nodeType":"YulFunctionCall","src":"11307:34:33"},"nodeType":"YulExpressionStatement","src":"11307:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11361:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11372:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11357:3:33"},"nodeType":"YulFunctionCall","src":"11357:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"11377:3:33","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11350:6:33"},"nodeType":"YulFunctionCall","src":"11350:31:33"},"nodeType":"YulExpressionStatement","src":"11350:31:33"},{"nodeType":"YulAssignment","src":"11390:54:33","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"11416:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11428:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11439:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11424:3:33"},"nodeType":"YulFunctionCall","src":"11424:19:33"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"11398:17:33"},"nodeType":"YulFunctionCall","src":"11398:46:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11390:4:33"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11109:9:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11120:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11128:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11136:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11144:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11155:4:33","type":""}],"src":"10961:489:33"},{"body":{"nodeType":"YulBlock","src":"11535:169:33","statements":[{"body":{"nodeType":"YulBlock","src":"11581:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11590:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11593:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11583:6:33"},"nodeType":"YulFunctionCall","src":"11583:12:33"},"nodeType":"YulExpressionStatement","src":"11583:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11556:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"11565:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11552:3:33"},"nodeType":"YulFunctionCall","src":"11552:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"11577:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11548:3:33"},"nodeType":"YulFunctionCall","src":"11548:32:33"},"nodeType":"YulIf","src":"11545:52:33"},{"nodeType":"YulVariableDeclaration","src":"11606:29:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11625:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11619:5:33"},"nodeType":"YulFunctionCall","src":"11619:16:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"11610:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11668:5:33"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"11644:23:33"},"nodeType":"YulFunctionCall","src":"11644:30:33"},"nodeType":"YulExpressionStatement","src":"11644:30:33"},{"nodeType":"YulAssignment","src":"11683:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"11693:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11683:6:33"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11501:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11512:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11524:6:33","type":""}],"src":"11455:249:33"},{"body":{"nodeType":"YulBlock","src":"11883:182:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11900:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11911:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11893:6:33"},"nodeType":"YulFunctionCall","src":"11893:21:33"},"nodeType":"YulExpressionStatement","src":"11893:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11934:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11945:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11930:3:33"},"nodeType":"YulFunctionCall","src":"11930:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"11950:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11923:6:33"},"nodeType":"YulFunctionCall","src":"11923:30:33"},"nodeType":"YulExpressionStatement","src":"11923:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11973:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11984:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11969:3:33"},"nodeType":"YulFunctionCall","src":"11969:18:33"},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"11989:34:33","type":"","value":"ERC721: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11962:6:33"},"nodeType":"YulFunctionCall","src":"11962:62:33"},"nodeType":"YulExpressionStatement","src":"11962:62:33"},{"nodeType":"YulAssignment","src":"12033:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12045:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12056:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12041:3:33"},"nodeType":"YulFunctionCall","src":"12041:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12033:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11860:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11874:4:33","type":""}],"src":"11709:356:33"},{"body":{"nodeType":"YulBlock","src":"12244:178:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12261:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12272:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12254:6:33"},"nodeType":"YulFunctionCall","src":"12254:21:33"},"nodeType":"YulExpressionStatement","src":"12254:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12295:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12306:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12291:3:33"},"nodeType":"YulFunctionCall","src":"12291:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"12311:2:33","type":"","value":"28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12284:6:33"},"nodeType":"YulFunctionCall","src":"12284:30:33"},"nodeType":"YulExpressionStatement","src":"12284:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12334:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12345:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12330:3:33"},"nodeType":"YulFunctionCall","src":"12330:18:33"},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","kind":"string","nodeType":"YulLiteral","src":"12350:30:33","type":"","value":"ERC721: token already minted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12323:6:33"},"nodeType":"YulFunctionCall","src":"12323:58:33"},"nodeType":"YulExpressionStatement","src":"12323:58:33"},{"nodeType":"YulAssignment","src":"12390:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12402:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12413:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12398:3:33"},"nodeType":"YulFunctionCall","src":"12398:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12390:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12221:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12235:4:33","type":""}],"src":"12070:352:33"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 61)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not to\")\n        mstore(add(headStart, 96), \"ken owner or approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC721: caller is not token owne\")\n        mstore(add(headStart, 96), \"r or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_1996ccb6adb7d105883c503be6c0fca8b239a35cc290cf1105e26098b6525e2f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"There is no majority approval to\")\n        mstore(add(headStart, 96), \" withdraw\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ERC721: invalid token ID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: address zero is not a va\")\n        mstore(add(headStart, 96), \"lid owner\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"ERC721: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"ERC721: token already minted\")\n        tail := add(headStart, 96)\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"60806040526004361061017b5760003560e01c8063715018a6116100cc578063c87b56dd1161007a578063c87b56dd1461041c578063d7b4750c1461043d578063d8e159f81461045d578063db06941e14610472578063e2c41dbc14610487578063e985e9c51461048f578063f2fde38b146104af57600080fd5b8063715018a6146103675780637dc4c2ba1461037c5780638da5cb5b1461039157806395d89b41146103af5780639c885eb3146103c4578063a22cb465146103dc578063b88d4fde146103fc57600080fd5b806323b872dd1161012957806323b872dd146102b157806324600fc3146102d157806342842e0e146102e65780634e71d92d146103065780636352211e1461031257806365ac43411461033257806370a082311461034757600080fd5b806301ffc9a7146101875780630343fb25146101bc57806306fdde0314610200578063081812fc14610222578063095ea7b31461025a5780631095941e1461027c5780631096cb791461029c57600080fd5b3661018257005b600080fd5b34801561019357600080fd5b506101a76101a236600461130a565b6104cf565b60405190151581526020015b60405180910390f35b3480156101c857600080fd5b506101f26101d7366004611343565b6001600160a01b03166000908152600d602052604090205490565b6040519081526020016101b3565b34801561020c57600080fd5b50610215610521565b6040516101b391906113a4565b34801561022e57600080fd5b5061024261023d3660046113b7565b6105b3565b6040516001600160a01b0390911681526020016101b3565b34801561026657600080fd5b5061027a6102753660046113d0565b6105da565b005b34801561028857600080fd5b5061027a6102973660046113b7565b6106f4565b3480156102a857600080fd5b50600b546101f2565b3480156102bd57600080fd5b5061027a6102cc3660046113fa565b61074c565b3480156102dd57600080fd5b5061027a61077d565b3480156102f257600080fd5b5061027a6103013660046113fa565b610865565b34801561027a57600080fd5b34801561031e57600080fd5b5061024261032d3660046113b7565b610882565b34801561033e57600080fd5b506009546101f2565b34801561035357600080fd5b506101f2610362366004611343565b6108b6565b34801561037357600080fd5b5061027a61093c565b34801561038857600080fd5b506101a761094e565b34801561039d57600080fd5b506006546001600160a01b0316610242565b3480156103bb57600080fd5b506102156109bb565b3480156103d057600080fd5b50600c5460ff166101a7565b3480156103e857600080fd5b5061027a6103f7366004611436565b6109ca565b34801561040857600080fd5b5061027a610417366004611488565b6109d5565b34801561042857600080fd5b506102156104373660046113b7565b50606090565b34801561044957600080fd5b506102426104583660046113b7565b610a0d565b34801561046957600080fd5b50600a546101f2565b34801561047e57600080fd5b506101f2610a3d565b61027a610a5b565b34801561049b57600080fd5b506101a76104aa366004611564565b610afc565b3480156104bb57600080fd5b5061027a6104ca366004611343565b610b2a565b60006001600160e01b031982166380ac58cd60e01b148061050057506001600160e01b03198216635b5e139f60e01b145b8061051b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461053090611597565b80601f016020809104026020016040519081016040528092919081815260200182805461055c90611597565b80156105a95780601f1061057e576101008083540402835291602001916105a9565b820191906000526020600020905b81548152906001019060200180831161058c57829003601f168201915b5050505050905090565b60006105be82610ba0565b506000908152600460205260409020546001600160a01b031690565b60006105e582610882565b9050806001600160a01b0316836001600160a01b0316036106575760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061067357506106738133610afc565b6106e55760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161064e565b6106ef8383610bc5565b505050565b600c5460ff166107175760405163568fd53960e11b815260040160405180910390fd5b6000818152600f602090815260408083203384529091529020805460ff19166001179055610749600880546001019055565b50565b6107563382610c33565b6107725760405162461bcd60e51b815260040161064e906115d1565b6106ef838383610c92565b610785610e03565b600c5460ff16156107f65761079861094e565b6107f65760405162461bcd60e51b815260206004820152602960248201527f5468657265206973206e6f206d616a6f7269747920617070726f76616c20746f60448201526820776974686472617760b81b606482015260840161064e565b6040514790600090339083908381818185875af1925050503d806000811461083a576040519150601f19603f3d011682016040523d82523d6000602084013e61083f565b606091505b505090508061086157604051639af25e5d60e01b815260040160405180910390fd5b5050565b6106ef838383604051806020016040528060008152506109d5565b565b60008061088e83610e5d565b90506001600160a01b03811661051b5760405162461bcd60e51b815260040161064e9061161e565b60006001600160a01b0382166109205760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161064e565b506001600160a01b031660009081526003602052604090205490565b610944610e03565b6108806000610e78565b600c5460009060ff166109745760405163568fd53960e11b815260040160405180910390fd5b600061097f60085490565b600e549091506000906109a09060649061099a90603c610eca565b90610edd565b90508082106109b25760019250505090565b60009250505090565b60606001805461053090611597565b610861338383610ee9565b6109df3383610c33565b6109fb5760405162461bcd60e51b815260040161064e906115d1565b610a0784848484610fb3565b50505050565b6000600e8281548110610a2257610a22611650565b6000918252602090912001546001600160a01b031692915050565b6000610a56600b54600954610edd90919063ffffffff16565b905090565b6000610a65610a3d565b90506000610a7260075490565b9050813411610a945760405163cf463cf960e01b815260040160405180910390fd5b336000818152600d60205260408120349055600e805460018101825591527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180546001600160a01b03191682179055610aee9082610fe6565b610861600780546001019055565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610b32610e03565b6001600160a01b038116610b975760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161064e565b61074981610e78565b610ba981611000565b6107495760405162461bcd60e51b815260040161064e9061161e565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610bfa82610882565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610c3f83610882565b9050806001600160a01b0316846001600160a01b03161480610c665750610c668185610afc565b80610c8a5750836001600160a01b0316610c7f846105b3565b6001600160a01b0316145b949350505050565b826001600160a01b0316610ca582610882565b6001600160a01b031614610ccb5760405162461bcd60e51b815260040161064e90611666565b6001600160a01b038216610d2d5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161064e565b610d3a838383600161101d565b826001600160a01b0316610d4d82610882565b6001600160a01b031614610d735760405162461bcd60e51b815260040161064e90611666565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6006546001600160a01b031633146108805760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161064e565b6000908152600260205260409020546001600160a01b031690565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610ed682846116c1565b9392505050565b6000610ed682846116d8565b816001600160a01b0316836001600160a01b031603610f465760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640161064e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610fbe848484610c92565b610fca848484846110a5565b610a075760405162461bcd60e51b815260040161064e906116fa565b6108618282604051806020016040528060008152506111a6565b60008061100c83610e5d565b6001600160a01b0316141592915050565b6001811115610a07576001600160a01b03841615611063576001600160a01b0384166000908152600360205260408120805483929061105d90849061174c565b90915550505b6001600160a01b03831615610a07576001600160a01b0383166000908152600360205260408120805483929061109a90849061175f565b909155505050505050565b60006001600160a01b0384163b1561119b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906110e9903390899088908890600401611772565b6020604051808303816000875af1925050508015611124575060408051601f3d908101601f19168201909252611121918101906117af565b60015b611181573d808015611152576040519150601f19603f3d011682016040523d82523d6000602084013e611157565b606091505b5080516000036111795760405162461bcd60e51b815260040161064e906116fa565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610c8a565b506001949350505050565b6111b083836111d9565b6111bd60008484846110a5565b6106ef5760405162461bcd60e51b815260040161064e906116fa565b6001600160a01b03821661122f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161064e565b61123881611000565b156112555760405162461bcd60e51b815260040161064e906117cc565b61126360008383600161101d565b61126c81611000565b156112895760405162461bcd60e51b815260040161064e906117cc565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b03198116811461074957600080fd5b60006020828403121561131c57600080fd5b8135610ed6816112f4565b80356001600160a01b038116811461133e57600080fd5b919050565b60006020828403121561135557600080fd5b610ed682611327565b6000815180845260005b8181101561138457602081850181015186830182015201611368565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610ed6602083018461135e565b6000602082840312156113c957600080fd5b5035919050565b600080604083850312156113e357600080fd5b6113ec83611327565b946020939093013593505050565b60008060006060848603121561140f57600080fd5b61141884611327565b925061142660208501611327565b9150604084013590509250925092565b6000806040838503121561144957600080fd5b61145283611327565b91506020830135801515811461146757600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561149e57600080fd5b6114a785611327565b93506114b560208601611327565b925060408501359150606085013567ffffffffffffffff808211156114d957600080fd5b818701915087601f8301126114ed57600080fd5b8135818111156114ff576114ff611472565b604051601f8201601f19908116603f0116810190838211818310171561152757611527611472565b816040528281528a602084870101111561154057600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561157757600080fd5b61158083611327565b915061158e60208401611327565b90509250929050565b600181811c908216806115ab57607f821691505b6020821081036115cb57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761051b5761051b6116ab565b6000826116f557634e487b7160e01b600052601260045260246000fd5b500490565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b8181038181111561051b5761051b6116ab565b8082018082111561051b5761051b6116ab565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906117a59083018461135e565b9695505050505050565b6000602082840312156117c157600080fd5b8151610ed6816112f4565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060408201526060019056fea2646970667358221220599eda65bdcd62a61f847b03f64c19e6f820915df7e86063244c4da937bbcc2f64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x17B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xCC JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x41C JUMPI DUP1 PUSH4 0xD7B4750C EQ PUSH2 0x43D JUMPI DUP1 PUSH4 0xD8E159F8 EQ PUSH2 0x45D JUMPI DUP1 PUSH4 0xDB06941E EQ PUSH2 0x472 JUMPI DUP1 PUSH4 0xE2C41DBC EQ PUSH2 0x487 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x48F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x367 JUMPI DUP1 PUSH4 0x7DC4C2BA EQ PUSH2 0x37C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3AF JUMPI DUP1 PUSH4 0x9C885EB3 EQ PUSH2 0x3C4 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3DC JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x129 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2B1 JUMPI DUP1 PUSH4 0x24600FC3 EQ PUSH2 0x2D1 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x4E71D92D EQ PUSH2 0x306 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x312 JUMPI DUP1 PUSH4 0x65AC4341 EQ PUSH2 0x332 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x347 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0x343FB25 EQ PUSH2 0x1BC JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x200 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0x1095941E EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0x1096CB79 EQ PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x182 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x193 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A7 PUSH2 0x1A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x130A JUMP JUMPDEST PUSH2 0x4CF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1343 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x215 PUSH2 0x521 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B3 SWAP2 SWAP1 PUSH2 0x13A4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x242 PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0x13B7 JUMP JUMPDEST PUSH2 0x5B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x275 CALLDATASIZE PUSH1 0x4 PUSH2 0x13D0 JUMP JUMPDEST PUSH2 0x5DA JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x288 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B7 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB SLOAD PUSH2 0x1F2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x2CC CALLDATASIZE PUSH1 0x4 PUSH2 0x13FA JUMP JUMPDEST PUSH2 0x74C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x77D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x301 CALLDATASIZE PUSH1 0x4 PUSH2 0x13FA JUMP JUMPDEST PUSH2 0x865 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x242 PUSH2 0x32D CALLDATASIZE PUSH1 0x4 PUSH2 0x13B7 JUMP JUMPDEST PUSH2 0x882 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x9 SLOAD PUSH2 0x1F2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x1343 JUMP JUMPDEST PUSH2 0x8B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x93C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x388 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A7 PUSH2 0x94E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x242 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x215 PUSH2 0x9BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xC SLOAD PUSH1 0xFF AND PUSH2 0x1A7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x3F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1436 JUMP JUMPDEST PUSH2 0x9CA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x408 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x417 CALLDATASIZE PUSH1 0x4 PUSH2 0x1488 JUMP JUMPDEST PUSH2 0x9D5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x428 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x215 PUSH2 0x437 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B7 JUMP JUMPDEST POP PUSH1 0x60 SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x242 PUSH2 0x458 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B7 JUMP JUMPDEST PUSH2 0xA0D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x469 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xA SLOAD PUSH2 0x1F2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0xA3D JUMP JUMPDEST PUSH2 0x27A PUSH2 0xA5B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A7 PUSH2 0x4AA CALLDATASIZE PUSH1 0x4 PUSH2 0x1564 JUMP JUMPDEST PUSH2 0xAFC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x4CA CALLDATASIZE PUSH1 0x4 PUSH2 0x1343 JUMP JUMPDEST PUSH2 0xB2A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x500 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x51B JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x530 SWAP1 PUSH2 0x1597 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x55C SWAP1 PUSH2 0x1597 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5A9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x57E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5A9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x58C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BE DUP3 PUSH2 0xBA0 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E5 DUP3 PUSH2 0x882 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x657 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x673 JUMPI POP PUSH2 0x673 DUP2 CALLER PUSH2 0xAFC JUMP JUMPDEST PUSH2 0x6E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x64E JUMP JUMPDEST PUSH2 0x6EF DUP4 DUP4 PUSH2 0xBC5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0xFF AND PUSH2 0x717 JUMPI PUSH1 0x40 MLOAD PUSH4 0x568FD539 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x749 PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x756 CALLER DUP3 PUSH2 0xC33 JUMP JUMPDEST PUSH2 0x772 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x15D1 JUMP JUMPDEST PUSH2 0x6EF DUP4 DUP4 DUP4 PUSH2 0xC92 JUMP JUMPDEST PUSH2 0x785 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x7F6 JUMPI PUSH2 0x798 PUSH2 0x94E JUMP JUMPDEST PUSH2 0x7F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468657265206973206E6F206D616A6F7269747920617070726F76616C20746F PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x207769746864726177 PUSH1 0xB8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x64E JUMP JUMPDEST PUSH1 0x40 MLOAD SELFBALANCE SWAP1 PUSH1 0x0 SWAP1 CALLER SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x83A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x83F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x861 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9AF25E5D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x6EF DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x9D5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x88E DUP4 PUSH2 0xE5D JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x51B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x161E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x920 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x64E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x944 PUSH2 0xE03 JUMP JUMPDEST PUSH2 0x880 PUSH1 0x0 PUSH2 0xE78 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND PUSH2 0x974 JUMPI PUSH1 0x40 MLOAD PUSH4 0x568FD539 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x97F PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xE SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x9A0 SWAP1 PUSH1 0x64 SWAP1 PUSH2 0x99A SWAP1 PUSH1 0x3C PUSH2 0xECA JUMP JUMPDEST SWAP1 PUSH2 0xEDD JUMP JUMPDEST SWAP1 POP DUP1 DUP3 LT PUSH2 0x9B2 JUMPI PUSH1 0x1 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x530 SWAP1 PUSH2 0x1597 JUMP JUMPDEST PUSH2 0x861 CALLER DUP4 DUP4 PUSH2 0xEE9 JUMP JUMPDEST PUSH2 0x9DF CALLER DUP4 PUSH2 0xC33 JUMP JUMPDEST PUSH2 0x9FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x15D1 JUMP JUMPDEST PUSH2 0xA07 DUP5 DUP5 DUP5 DUP5 PUSH2 0xFB3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xA22 JUMPI PUSH2 0xA22 PUSH2 0x1650 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA56 PUSH1 0xB SLOAD PUSH1 0x9 SLOAD PUSH2 0xEDD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA65 PUSH2 0xA3D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA72 PUSH1 0x7 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP DUP2 CALLVALUE GT PUSH2 0xA94 JUMPI PUSH1 0x40 MLOAD PUSH4 0xCF463CF9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 CALLVALUE SWAP1 SSTORE PUSH1 0xE DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP2 MSTORE PUSH32 0xBB7B4A454DC3493923482F07822329ED19E8244EFF582CC204F8554C3620C3FD ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP3 OR SWAP1 SSTORE PUSH2 0xAEE SWAP1 DUP3 PUSH2 0xFE6 JUMP JUMPDEST PUSH2 0x861 PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0xB32 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB97 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x64E JUMP JUMPDEST PUSH2 0x749 DUP2 PUSH2 0xE78 JUMP JUMPDEST PUSH2 0xBA9 DUP2 PUSH2 0x1000 JUMP JUMPDEST PUSH2 0x749 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x161E JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0xBFA DUP3 PUSH2 0x882 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC3F DUP4 PUSH2 0x882 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xC66 JUMPI POP PUSH2 0xC66 DUP2 DUP6 PUSH2 0xAFC JUMP JUMPDEST DUP1 PUSH2 0xC8A JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xC7F DUP5 PUSH2 0x5B3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xCA5 DUP3 PUSH2 0x882 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xCCB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x1666 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x64E JUMP JUMPDEST PUSH2 0xD3A DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x101D JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD4D DUP3 PUSH2 0x882 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xD73 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x1666 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x880 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x64E JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xED6 DUP3 DUP5 PUSH2 0x16C1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xED6 DUP3 DUP5 PUSH2 0x16D8 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xF46 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x22A9219B99189D1030B8383937BB32903A379031B0B63632B9 PUSH1 0x39 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x64E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xFBE DUP5 DUP5 DUP5 PUSH2 0xC92 JUMP JUMPDEST PUSH2 0xFCA DUP5 DUP5 DUP5 DUP5 PUSH2 0x10A5 JUMP JUMPDEST PUSH2 0xA07 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x16FA JUMP JUMPDEST PUSH2 0x861 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x11A6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x100C DUP4 PUSH2 0xE5D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xA07 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1063 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x105D SWAP1 DUP5 SWAP1 PUSH2 0x174C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0xA07 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x109A SWAP1 DUP5 SWAP1 PUSH2 0x175F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x119B JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x10E9 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1772 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1124 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1121 SWAP2 DUP2 ADD SWAP1 PUSH2 0x17AF JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1181 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1152 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1157 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1179 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x16FA JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0xC8A JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x11B0 DUP4 DUP4 PUSH2 0x11D9 JUMP JUMPDEST PUSH2 0x11BD PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x10A5 JUMP JUMPDEST PUSH2 0x6EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x16FA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x122F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x64E JUMP JUMPDEST PUSH2 0x1238 DUP2 PUSH2 0x1000 JUMP JUMPDEST ISZERO PUSH2 0x1255 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x17CC JUMP JUMPDEST PUSH2 0x1263 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x101D JUMP JUMPDEST PUSH2 0x126C DUP2 PUSH2 0x1000 JUMP JUMPDEST ISZERO PUSH2 0x1289 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x17CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x749 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x131C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xED6 DUP2 PUSH2 0x12F4 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x133E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1355 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xED6 DUP3 PUSH2 0x1327 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1384 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x1368 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xED6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x135E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13EC DUP4 PUSH2 0x1327 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x140F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1418 DUP5 PUSH2 0x1327 JUMP JUMPDEST SWAP3 POP PUSH2 0x1426 PUSH1 0x20 DUP6 ADD PUSH2 0x1327 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1452 DUP4 PUSH2 0x1327 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1467 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x149E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14A7 DUP6 PUSH2 0x1327 JUMP JUMPDEST SWAP4 POP PUSH2 0x14B5 PUSH1 0x20 DUP7 ADD PUSH2 0x1327 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x14D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x14ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x14FF JUMPI PUSH2 0x14FF PUSH2 0x1472 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1527 JUMPI PUSH2 0x1527 PUSH2 0x1472 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1540 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1577 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1580 DUP4 PUSH2 0x1327 JUMP JUMPDEST SWAP2 POP PUSH2 0x158E PUSH1 0x20 DUP5 ADD PUSH2 0x1327 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x15AB JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x15CB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x51B JUMPI PUSH2 0x51B PUSH2 0x16AB JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x16F5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x51B JUMPI PUSH2 0x51B PUSH2 0x16AB JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x51B JUMPI PUSH2 0x51B PUSH2 0x16AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x17A5 SWAP1 DUP4 ADD DUP5 PUSH2 0x135E JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xED6 DUP2 PUSH2 0x12F4 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSIZE SWAP15 0xDA PUSH6 0xBDCD62A61F84 PUSH28 0x3F64C19E6F820915DF7E86063244C4DA937BBCC2F64736F6C634300 ADDMOD GT STOP CALLER ","sourceMap":"403:3495:31:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300:19;;;;;;;;;;-1:-1:-1;1570:300:19;;;;;:::i;:::-;;:::i;:::-;;;565:14:33;;558:22;540:41;;528:2;513:18;1570:300:19;;;;;;;;3652:133:31;;;;;;;;;;-1:-1:-1;3652:133:31;;;;;:::i;:::-;-1:-1:-1;;;;;3747:31:31;3722:7;3747:31;;;:23;:31;;;;;;;3652:133;;;;1107:25:33;;;1095:2;1080:18;3652:133:31;961:177:33;2471:98:19;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3935:167::-;;;;;;;;;;-1:-1:-1;3935:167:19;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;2145:32:33;;;2127:51;;2115:2;2100:18;3935:167:19;1981:203:33;3468:406:19;;;;;;;;;;-1:-1:-1;3468:406:19;;;;;:::i;:::-;;:::i;:::-;;2156:172:31;;;;;;;;;;-1:-1:-1;2156:172:31;;;;;:::i;:::-;;:::i;3446:95::-;;;;;;;;;;-1:-1:-1;3519:15:31;;3446:95;;4612:326:19;;;;;;;;;;-1:-1:-1;4612:326:19;;;;;:::i;:::-;;:::i;2734:380:31:-;;;;;;;;;;;;;:::i;5004:179:19:-;;;;;;;;;;-1:-1:-1;5004:179:19;;;;;:::i;:::-;;:::i;2067:83:31:-;;;;;;;;;2190:219:19;;;;;;;;;;-1:-1:-1;2190:219:19;;;;;:::i;:::-;;:::i;3247:91:31:-;;;;;;;;;;-1:-1:-1;3318:13:31;;3247:91;;1929:204:19;;;;;;;;;;-1:-1:-1;1929:204:19;;;;;:::i;:::-;;:::i;1831:101:18:-;;;;;;;;;;;;;:::i;2415:311:31:-;;;;;;;;;;;;;:::i;1201:85:18:-;;;;;;;;;;-1:-1:-1;1273:6:18;;-1:-1:-1;;;;;1273:6:18;1201:85;;2633:102:19;;;;;;;;;;;;;:::i;3547:99:31:-;;;;;;;;;;-1:-1:-1;3621:18:31;;;;3547:99;;4169:153:19;;;;;;;;;;-1:-1:-1;4169:153:19;;;;;:::i;:::-;;:::i;5249:314::-;;;;;;;;;;-1:-1:-1;5249:314:19;;;;;:::i;:::-;;:::i;1913:148:31:-;;;;;;;;;;-1:-1:-1;1913:148:31;;;;;:::i;:::-;-1:-1:-1;1986:13:31;;1913:148;3791:102;;;;;;;;;;-1:-1:-1;3791:102:31;;;;;:::i;:::-;;:::i;3345:95::-;;;;;;;;;;-1:-1:-1;3418:15:31;;3345:95;;3120:121;;;;;;;;;;;;;:::i;1450:457::-;;;:::i;4388:162:19:-;;;;;;;;;;-1:-1:-1;4388:162:19;;;;;:::i;:::-;;:::i;2081:198:18:-;;;;;;;;;;-1:-1:-1;2081:198:18;;;;;:::i;:::-;;:::i;1570:300:19:-;1672:4;-1:-1:-1;;;;;;1707:40:19;;-1:-1:-1;;;1707:40:19;;:104;;-1:-1:-1;;;;;;;1763:48:19;;-1:-1:-1;;;1763:48:19;1707:104;:156;;;-1:-1:-1;;;;;;;;;;937:40:27;;;1827:36:19;1688:175;1570:300;-1:-1:-1;;1570:300:19:o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;-1:-1:-1;4071:24:19;;;;:15;:24;;;;;;-1:-1:-1;;;;;4071:24:19;;3935:167::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;-1:-1:-1;;;;;3605:11:19;:2;-1:-1:-1;;;;;3605:11:19;;3597:57;;;;-1:-1:-1;;;3597:57:19;;5260:2:33;3597:57:19;;;5242:21:33;5299:2;5279:18;;;5272:30;5338:34;5318:18;;;5311:62;-1:-1:-1;;;5389:18:33;;;5382:31;5430:19;;3597:57:19;;;;;;;;;719:10:24;-1:-1:-1;;;;;3686:21:19;;;;:62;;-1:-1:-1;3711:37:19;3728:5;719:10:24;4388:162:19;:::i;3711:37::-;3665:170;;;;-1:-1:-1;;;3665:170:19;;5662:2:33;3665:170:19;;;5644:21:33;5701:2;5681:18;;;5674:30;5740:34;5720:18;;;5713:62;5811:31;5791:18;;;5784:59;5860:19;;3665:170:19;5460:425:33;3665:170:19;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;2156:172:31:-;980:18;;;;976:89;;1020:34;;-1:-1:-1;;;1020:34:31;;;;;;;;;;;976:89;2237:31:::1;::::0;;;:22:::1;:31;::::0;;;;;;;2269:10:::1;2237:43:::0;;;;;;;:50;;-1:-1:-1;;2237:50:31::1;2283:4;2237:50;::::0;;2297:24:::1;:12;1032:19:25::0;;1050:1;1032:19;;;945:123;2297:24:31::1;2156:172:::0;:::o;4612:326:19:-;4801:41;719:10:24;4834:7:19;4801:18;:41::i;:::-;4793:99;;;;-1:-1:-1;;;4793:99:19;;;;;;;:::i;:::-;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;2734:380:31:-;1094:13:18;:11;:13::i;:::-;2788:18:31::1;::::0;::::1;;2785:118;;;2829:17;:15;:17::i;:::-;2821:71;;;::::0;-1:-1:-1;;;2821:71:31;;6506:2:33;2821:71:31::1;::::0;::::1;6488:21:33::0;6545:2;6525:18;;;6518:30;6584:34;6564:18;;;6557:62;-1:-1:-1;;;6635:18:33;;;6628:39;6684:19;;2821:71:31::1;6304:405:33::0;2821:71:31::1;2979:42;::::0;2929:21:::1;::::0;2912:14:::1;::::0;2987:10:::1;::::0;2929:21;;2912:14;2979:42;2912:14;2979:42;2929:21;2987:10;2979:42:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2960:61;;;3035:7;3031:77;;3064:33;;-1:-1:-1::0;;;3064:33:31::1;;;;;;;;;;;3031:77;2775:339;;2734:380::o:0;5004:179:19:-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;2067:83:31:-;:::o;2190:219:19:-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;-1:-1:-1;;;;;;2332:19:19;;2324:56;;;;-1:-1:-1;;;2324:56:19;;;;;;;:::i;1929:204::-;2001:7;-1:-1:-1;;;;;2028:19:19;;2020:73;;;;-1:-1:-1;;;2020:73:19;;7479:2:33;2020:73:19;;;7461:21:33;7518:2;7498:18;;;7491:30;7557:34;7537:18;;;7530:62;-1:-1:-1;;;7608:18:33;;;7601:39;7657:19;;2020:73:19;7277:405:33;2020:73:19;-1:-1:-1;;;;;;2110:16:19;;;;;:9;:16;;;;;;;1929:204::o;1831:101:18:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;2415:311:31:-:0;980:18;;2474:4;;980:18;;976:89;;1020:34;;-1:-1:-1;;;1020:34:31;;;;;;;;;;;976:89;2489:27:::1;2519:22;:12;918:14:25::0;;827:112;2519:22:31::1;2577:9;:16:::0;2489:52;;-1:-1:-1;2551:23:31::1;::::0;2577:33:::1;::::0;2606:3:::1;::::0;2577:24:::1;::::0;2598:2:::1;2577:20;:24::i;:::-;:28:::0;::::1;:33::i;:::-;2551:59;;2646:15;2623:19;:38;2620:78;;2683:4;2676:11;;;;2415:311:::0;:::o;2620:78::-:1;2714:5;2707:12;;;;2415:311:::0;:::o;2633:102:19:-;2689:13;2721:7;2714:14;;;;;:::i;4169:153::-;4263:52;719:10:24;4296:8:19;4306;4263:18;:52::i;5249:314::-;5417:41;719:10:24;5450:7:19;5417:18;:41::i;:::-;5409:99;;;;-1:-1:-1;;;5409:99:19;;;;;;;:::i;:::-;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;3791:102:31:-;3845:7;3870:9;3880:5;3870:16;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;3870:16:31;;3791:102;-1:-1:-1;;3791:102:31:o;3120:121::-;3175:7;3200:34;3218:15;;3200:13;;:17;;:34;;;;:::i;:::-;3193:41;;3120:121;:::o;1450:457::-;1507:24;1534:25;:23;:25::i;:::-;1507:52;;1569:22;1594:19;:9;918:14:25;;827:112;1594:19:31;1569:44;;1640:16;1627:9;:29;1624:96;;1678:31;;-1:-1:-1;;;1678:31:31;;;;;;;;;;;1624:96;1753:10;1729:35;;;;:23;:35;;;;;1767:9;1729:47;;1786:9;:26;;;;;;;;;;;;;-1:-1:-1;;;;;;1786:26:31;;;;;1822:37;;1844:14;1822:9;:37::i;:::-;1869:21;:9;1032:19:25;;1050:1;1032:19;;;945:123;4388:162:19;-1:-1:-1;;;;;4508:25:19;;;4485:4;4508:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4388:162::o;2081:198:18:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:18;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:18;;8021:2:33;2161:73:18::1;::::0;::::1;8003:21:33::0;8060:2;8040:18;;;8033:30;8099:34;8079:18;;;8072:62;-1:-1:-1;;;8150:18:33;;;8143:36;8196:19;;2161:73:18::1;7819:402:33::0;2161:73:18::1;2244:28;2263:8;2244:18;:28::i;13466:133:19:-:0;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;-1:-1:-1;;;13539:53:19;;;;;;;:::i;12768:171::-;12842:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;12842:29:19;-1:-1:-1;;;;;12842:29:19;;;;;;;;:24;;12895:23;12842:24;12895:14;:23::i;:::-;-1:-1:-1;;;;;12886:46:19;;;;;;;;;;;12768:171;;:::o;7540:261::-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;-1:-1:-1;;;;;7706:16:19;:7;-1:-1:-1;;;;;7706:16:19;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:87;;;;7786:7;-1:-1:-1;;;;;7762:31:19;:20;7774:7;7762:11;:20::i;:::-;-1:-1:-1;;;;;7762:31:19;;7706:87;7698:96;7540:261;-1:-1:-1;;;;7540:261:19:o;11423:1233::-;11577:4;-1:-1:-1;;;;;11550:31:19;:23;11565:7;11550:14;:23::i;:::-;-1:-1:-1;;;;;11550:31:19;;11542:81;;;;-1:-1:-1;;;11542:81:19;;;;;;;:::i;:::-;-1:-1:-1;;;;;11641:16:19;;11633:65;;;;-1:-1:-1;;;11633:65:19;;8834:2:33;11633:65:19;;;8816:21:33;8873:2;8853:18;;;8846:30;8912:34;8892:18;;;8885:62;-1:-1:-1;;;8963:18:33;;;8956:34;9007:19;;11633:65:19;8632:400:33;11633:65:19;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;-1:-1:-1;;;;;11851:31:19;:23;11866:7;11851:14;:23::i;:::-;-1:-1:-1;;;;;11851:31:19;;11843:81;;;;-1:-1:-1;;;11843:81:19;;;;;;;:::i;:::-;11993:24;;;;:15;:24;;;;;;;;11986:31;;-1:-1:-1;;;;;;11986:31:19;;;;;;-1:-1:-1;;;;;12461:15:19;;;;;;:9;:15;;;;;:20;;-1:-1:-1;;12461:20:19;;;12495:13;;;;;;;;;:18;;11986:31;12495:18;;;12533:16;;;:7;:16;;;;;;:21;;;;;;;;;;12570:27;;12009:7;;12570:27;;;3538:336;3468:406;;:::o;1359:130:18:-;1273:6;;-1:-1:-1;;;;;1273:6:18;719:10:24;1422:23:18;1414:68;;;;-1:-1:-1;;;1414:68:18;;9239:2:33;1414:68:18;;;9221:21:33;;;9258:18;;;9251:30;9317:34;9297:18;;;9290:62;9369:18;;1414:68:18;9037:356:33;6838:115:19;6904:7;6930:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6930:16:19;;6838:115::o;2433:187:18:-;2525:6;;;-1:-1:-1;;;;;2541:17:18;;;-1:-1:-1;;;;;;2541:17:18;;;;;;;2573:40;;2525:6;;;2541:17;2525:6;;2573:40;;2506:16;;2573:40;2496:124;2433:187;:::o;3465:96:30:-;3523:7;3549:5;3553:1;3549;:5;:::i;:::-;3542:12;3465:96;-1:-1:-1;;;3465:96:30:o;3850:::-;3908:7;3934:5;3938:1;3934;:5;:::i;13075:307:19:-;13225:8;-1:-1:-1;;;;;13216:17:19;:5;-1:-1:-1;;;;;13216:17:19;;13208:55;;;;-1:-1:-1;;;13208:55:19;;10127:2:33;13208:55:19;;;10109:21:33;10166:2;10146:18;;;10139:30;-1:-1:-1;;;10185:18:33;;;10178:55;10250:18;;13208:55:19;9925:349:33;13208:55:19;-1:-1:-1;;;;;13273:25:19;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;13273:46:19;;;;;;;;;;13334:41;;540::33;;;13334::19;;513:18:33;13334:41:19;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;-1:-1:-1;;;6612:110:19;;;;;;;:::i;8131:108::-;8206:26;8216:2;8220:7;8206:26;;;;;;;;;;;;:9;:26::i;7256:126::-;7321:4;;7344:17;7353:7;7344:8;:17::i;:::-;-1:-1:-1;;;;;7344:31:19;;;;7256:126;-1:-1:-1;;7256:126:19:o;15698:396::-;15882:1;15870:9;:13;15866:222;;;-1:-1:-1;;;;;15903:18:19;;;15899:85;;-1:-1:-1;;;;;15941:15:19;;;;;;:9;:15;;;;;:28;;15960:9;;15941:15;:28;;15960:9;;15941:28;:::i;:::-;;;;-1:-1:-1;;15899:85:19;-1:-1:-1;;;;;16001:16:19;;;15997:81;;-1:-1:-1;;;;;16037:13:19;;;;;;:9;:13;;;;;:26;;16054:9;;16037:13;:26;;16054:9;;16037:26;:::i;:::-;;;;-1:-1:-1;;15698:396:19;;;;:::o;14151:831::-;14300:4;-1:-1:-1;;;;;14320:13:19;;1465:19:23;:23;14316:660:19;;14355:71;;-1:-1:-1;;;14355:71:19;;-1:-1:-1;;;;;14355:36:19;;;;;:71;;719:10:24;;14406:4:19;;14412:7;;14421:4;;14355:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14355:71:19;;;;;;;;-1:-1:-1;;14355:71:19;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14593:6;:13;14610:1;14593:18;14589:321;;14635:60;;-1:-1:-1;;;14635:60:19;;;;;;;:::i;14589:321::-;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;-1:-1:-1;;;;;;14476:51:19;-1:-1:-1;;;14476:51:19;;-1:-1:-1;14469:58:19;;14316:660;-1:-1:-1;14961:4:19;14151:831;;;;;;:::o;8460:309::-;8584:18;8590:2;8594:7;8584:5;:18::i;:::-;8633:53;8664:1;8668:2;8672:7;8681:4;8633:22;:53::i;:::-;8612:150;;;;-1:-1:-1;;;8612:150:19;;;;;;;:::i;9091:920::-;-1:-1:-1;;;;;9170:16:19;;9162:61;;;;-1:-1:-1;;;9162:61:19;;11911:2:33;9162:61:19;;;11893:21:33;;;11930:18;;;11923:30;11989:34;11969:18;;;11962:62;12041:18;;9162:61:19;11709:356:33;9162:61:19;9242:16;9250:7;9242;:16::i;:::-;9241:17;9233:58;;;;-1:-1:-1;;;9233:58:19;;;;;;;:::i;:::-;9302:48;9331:1;9335:2;9339:7;9348:1;9302:20;:48::i;:::-;9446:16;9454:7;9446;:16::i;:::-;9445:17;9437:58;;;;-1:-1:-1;;;9437:58:19;;;;;;;:::i;:::-;-1:-1:-1;;;;;9837:13:19;;;;;;:9;:13;;;;;;;;:18;;9854:1;9837:18;;;9876:16;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;9876:21:19;;;;;9913:33;9884:7;;9837:13;;9913:33;;9837:13;;9913:33;2775:339:31::1;;2734:380::o:0;14:131:33:-;-1:-1:-1;;;;;;88:32:33;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:173::-;660:20;;-1:-1:-1;;;;;709:31:33;;699:42;;689:70;;755:1;752;745:12;689:70;592:173;;;:::o;770:186::-;829:6;882:2;870:9;861:7;857:23;853:32;850:52;;;898:1;895;888:12;850:52;921:29;940:9;921:29;:::i;1143:423::-;1185:3;1223:5;1217:12;1250:6;1245:3;1238:19;1275:1;1285:162;1299:6;1296:1;1293:13;1285:162;;;1361:4;1417:13;;;1413:22;;1407:29;1389:11;;;1385:20;;1378:59;1314:12;1285:162;;;1289:3;1492:1;1485:4;1476:6;1471:3;1467:16;1463:27;1456:38;1555:4;1548:2;1544:7;1539:2;1531:6;1527:15;1523:29;1518:3;1514:39;1510:50;1503:57;;;1143:423;;;;:::o;1571:220::-;1720:2;1709:9;1702:21;1683:4;1740:45;1781:2;1770:9;1766:18;1758:6;1740:45;:::i;1796:180::-;1855:6;1908:2;1896:9;1887:7;1883:23;1879:32;1876:52;;;1924:1;1921;1914:12;1876:52;-1:-1:-1;1947:23:33;;1796:180;-1:-1:-1;1796:180:33:o;2189:254::-;2257:6;2265;2318:2;2306:9;2297:7;2293:23;2289:32;2286:52;;;2334:1;2331;2324:12;2286:52;2357:29;2376:9;2357:29;:::i;:::-;2347:39;2433:2;2418:18;;;;2405:32;;-1:-1:-1;;;2189:254:33:o;2448:328::-;2525:6;2533;2541;2594:2;2582:9;2573:7;2569:23;2565:32;2562:52;;;2610:1;2607;2600:12;2562:52;2633:29;2652:9;2633:29;:::i;:::-;2623:39;;2681:38;2715:2;2704:9;2700:18;2681:38;:::i;:::-;2671:48;;2766:2;2755:9;2751:18;2738:32;2728:42;;2448:328;;;;;:::o;2781:347::-;2846:6;2854;2907:2;2895:9;2886:7;2882:23;2878:32;2875:52;;;2923:1;2920;2913:12;2875:52;2946:29;2965:9;2946:29;:::i;:::-;2936:39;;3025:2;3014:9;3010:18;2997:32;3072:5;3065:13;3058:21;3051:5;3048:32;3038:60;;3094:1;3091;3084:12;3038:60;3117:5;3107:15;;;2781:347;;;;;:::o;3133:127::-;3194:10;3189:3;3185:20;3182:1;3175:31;3225:4;3222:1;3215:15;3249:4;3246:1;3239:15;3265:1138;3360:6;3368;3376;3384;3437:3;3425:9;3416:7;3412:23;3408:33;3405:53;;;3454:1;3451;3444:12;3405:53;3477:29;3496:9;3477:29;:::i;:::-;3467:39;;3525:38;3559:2;3548:9;3544:18;3525:38;:::i;:::-;3515:48;;3610:2;3599:9;3595:18;3582:32;3572:42;;3665:2;3654:9;3650:18;3637:32;3688:18;3729:2;3721:6;3718:14;3715:34;;;3745:1;3742;3735:12;3715:34;3783:6;3772:9;3768:22;3758:32;;3828:7;3821:4;3817:2;3813:13;3809:27;3799:55;;3850:1;3847;3840:12;3799:55;3886:2;3873:16;3908:2;3904;3901:10;3898:36;;;3914:18;;:::i;:::-;3989:2;3983:9;3957:2;4043:13;;-1:-1:-1;;4039:22:33;;;4063:2;4035:31;4031:40;4019:53;;;4087:18;;;4107:22;;;4084:46;4081:72;;;4133:18;;:::i;:::-;4173:10;4169:2;4162:22;4208:2;4200:6;4193:18;4248:7;4243:2;4238;4234;4230:11;4226:20;4223:33;4220:53;;;4269:1;4266;4259:12;4220:53;4325:2;4320;4316;4312:11;4307:2;4299:6;4295:15;4282:46;4370:1;4365:2;4360;4352:6;4348:15;4344:24;4337:35;4391:6;4381:16;;;;;;;3265:1138;;;;;;;:::o;4408:260::-;4476:6;4484;4537:2;4525:9;4516:7;4512:23;4508:32;4505:52;;;4553:1;4550;4543:12;4505:52;4576:29;4595:9;4576:29;:::i;:::-;4566:39;;4624:38;4658:2;4647:9;4643:18;4624:38;:::i;:::-;4614:48;;4408:260;;;;;:::o;4673:380::-;4752:1;4748:12;;;;4795;;;4816:61;;4870:4;4862:6;4858:17;4848:27;;4816:61;4923:2;4915:6;4912:14;4892:18;4889:38;4886:161;;4969:10;4964:3;4960:20;4957:1;4950:31;5004:4;5001:1;4994:15;5032:4;5029:1;5022:15;4886:161;;4673:380;;;:::o;5890:409::-;6092:2;6074:21;;;6131:2;6111:18;;;6104:30;6170:34;6165:2;6150:18;;6143:62;-1:-1:-1;;;6236:2:33;6221:18;;6214:43;6289:3;6274:19;;5890:409::o;6924:348::-;7126:2;7108:21;;;7165:2;7145:18;;;7138:30;-1:-1:-1;;;7199:2:33;7184:18;;7177:54;7263:2;7248:18;;6924:348::o;7687:127::-;7748:10;7743:3;7739:20;7736:1;7729:31;7779:4;7776:1;7769:15;7803:4;7800:1;7793:15;8226:401;8428:2;8410:21;;;8467:2;8447:18;;;8440:30;8506:34;8501:2;8486:18;;8479:62;-1:-1:-1;;;8572:2:33;8557:18;;8550:35;8617:3;8602:19;;8226:401::o;9398:127::-;9459:10;9454:3;9450:20;9447:1;9440:31;9490:4;9487:1;9480:15;9514:4;9511:1;9504:15;9530:168;9603:9;;;9634;;9651:15;;;9645:22;;9631:37;9621:71;;9672:18;;:::i;9703:217::-;9743:1;9769;9759:132;;9813:10;9808:3;9804:20;9801:1;9794:31;9848:4;9845:1;9838:15;9876:4;9873:1;9866:15;9759:132;-1:-1:-1;9905:9:33;;9703:217::o;10279:414::-;10481:2;10463:21;;;10520:2;10500:18;;;10493:30;10559:34;10554:2;10539:18;;10532:62;-1:-1:-1;;;10625:2:33;10610:18;;10603:48;10683:3;10668:19;;10279:414::o;10698:128::-;10765:9;;;10786:11;;;10783:37;;;10800:18;;:::i;10831:125::-;10896:9;;;10917:10;;;10914:36;;;10930:18;;:::i;10961:489::-;-1:-1:-1;;;;;11230:15:33;;;11212:34;;11282:15;;11277:2;11262:18;;11255:43;11329:2;11314:18;;11307:34;;;11377:3;11372:2;11357:18;;11350:31;;;11155:4;;11398:46;;11424:19;;11416:6;11398:46;:::i;:::-;11390:54;10961:489;-1:-1:-1;;;;;;10961:489:33:o;11455:249::-;11524:6;11577:2;11565:9;11556:7;11552:23;11548:32;11545:52;;;11593:1;11590;11583:12;11545:52;11625:9;11619:16;11644:30;11668:5;11644:30;:::i;12070:352::-;12272:2;12254:21;;;12311:2;12291:18;;;12284:30;12350;12345:2;12330:18;;12323:58;12413:2;12398:18;;12070:352::o"},"gasEstimates":{"creation":{"codeDepositCost":"1240200","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2744","claim()":"212","depositFunds()":"infinite","getAddressToAmountFunded(address)":"2583","getApproved(uint256)":"4911","getFunder(uint256)":"4663","getIsGroupWithdrawal()":"2404","getMinimumFundingAmount()":"infinite","getTotalAmount()":"2425","getVestingPeriod()":"2448","getWithdrawalFee()":"2358","isApprovedForAll(address,address)":"infinite","name()":"infinite","owner()":"2398","ownerOf(uint256)":"2729","renounceOwnership()":"infinite","requestForWithdrawal(uint256)":"51068","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26816","supportsInterface(bytes4)":"534","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"28490","withdrawFunds()":"infinite","withdrawalCheck()":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","claim()":"4e71d92d","depositFunds()":"e2c41dbc","getAddressToAmountFunded(address)":"0343fb25","getApproved(uint256)":"081812fc","getFunder(uint256)":"d7b4750c","getIsGroupWithdrawal()":"9c885eb3","getMinimumFundingAmount()":"db06941e","getTotalAmount()":"65ac4341","getVestingPeriod()":"1096cb79","getWithdrawalFee()":"d8e159f8","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","renounceOwnership()":"715018a6","requestForWithdrawal(uint256)":"1095941e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b","withdrawFunds()":"24600fc3","withdrawalCheck()":"7dc4c2ba"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFunding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isGroupWithdrawal\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundingContract__NotEnoughETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundingContract__NotGroupFunding\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundingContract__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIsGroupWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumFundingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"requestForWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundingContract.sol\":\"FundingContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/FundingContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n\\nerror FundingContract__TransferFailed();\\nerror FundingContract__NotEnoughETH();\\nerror FundingContract__NotGroupFunding();\\n\\ncontract FundingContract is ERC721, Ownable {\\n\\n    using SafeMath for uint256;\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n    Counters.Counter private _withdrawers;\\n\\n    uint256 private s_totalAmount;\\n    uint256 private s_withdrawalFee;\\n    uint256 private s_vestingPeriod;\\n    bool private _isGroupWithdrawal;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] s_funders;\\n\\n    mapping(uint256 => mapping(address => bool)) private s_requestForWithdrawal; \\n\\n    \\n\\n    modifier onlyGroupFunding() {\\n        if(!_isGroupWithdrawal){\\n            revert FundingContract__NotGroupFunding();\\n        }\\n       _;\\n    }\\n\\n    constructor(\\n        uint256 totalFunding,\\n        uint256 withdrawalFee,\\n        uint256 vestingPeriod,\\n        bool isGroupWithdrawal\\n    ) ERC721('FundingContractToken', 'FCT'){\\n\\n        s_totalAmount = totalFunding;\\n        s_withdrawalFee = withdrawalFee;\\n        s_vestingPeriod = vestingPeriod;\\n        _isGroupWithdrawal = isGroupWithdrawal;\\n    }\\n\\n\\n\\n    function depositFunds() public payable{\\n        \\n        uint256 minFundingAmount = getMinimumFundingAmount();\\n        uint256 currentTokenId = _tokenIds.current();\\n\\n        if(msg.value <= minFundingAmount){\\n            revert FundingContract__NotEnoughETH();\\n        }\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n        s_funders.push(msg.sender);\\n        _safeMint(msg.sender, currentTokenId);\\n        _tokenIds.increment();\\n        \\n\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory){\\n        /**\\n         *  TODO \\n         * \\n         */\\n    }\\n\\n    function claim() public {\\n        /**\\n         * TODO\\n         * \\n         */\\n    }\\n\\n    function requestForWithdrawal(uint256 tokenId) public onlyGroupFunding {\\n        s_requestForWithdrawal[tokenId][msg.sender] = true;\\n        _withdrawers.increment();\\n    }\\n\\n    // Receive any funds sent to the contract\\n    receive() external payable {}\\n\\n    function withdrawalCheck() public onlyGroupFunding returns(bool){\\n        uint256 numberOfWithdrawers = _withdrawers.current();\\n        uint256 withdrawalLimit = s_funders.length.mul(60).div(100);\\n        if(numberOfWithdrawers >= withdrawalLimit){\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n\\n\\n    function withdrawFunds() public onlyOwner{\\n        if(_isGroupWithdrawal){\\n            require(withdrawalCheck(), 'There is no majority approval to withdraw');\\n        }\\n        uint256 amount = address(this).balance;\\n        (bool success, ) = payable(msg.sender).call{value:amount}(\\\"\\\");\\n        if(!success){\\n            revert FundingContract__TransferFailed();\\n        }\\n    }\\n\\n    function getMinimumFundingAmount() public view returns(uint256){\\n        return s_totalAmount.div(s_vestingPeriod);\\n    }\\n\\n    function getTotalAmount() public view returns(uint256){\\n        return s_totalAmount;\\n    }\\n\\n\\n    function getWithdrawalFee() public view returns(uint256){\\n        return s_withdrawalFee;\\n    }\\n\\n    function getVestingPeriod() public view returns(uint256){\\n        return s_vestingPeriod;\\n    }\\n\\n    function getIsGroupWithdrawal() public view returns(bool){\\n        return _isGroupWithdrawal;\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns(uint256){\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getFunder(uint256 index) public view returns(address){\\n        return s_funders[index];\\n    }\\n\\n\\n\\n}\",\"keccak256\":\"0xede618187e17057a09a894725311c2e849f881a415bc1e1377c16d53a7ce0b1d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3579,"contract":"contracts/FundingContract.sol:FundingContract","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":3581,"contract":"contracts/FundingContract.sol:FundingContract","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":3585,"contract":"contracts/FundingContract.sol:FundingContract","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":3589,"contract":"contracts/FundingContract.sol:FundingContract","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":3593,"contract":"contracts/FundingContract.sol:FundingContract","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":3599,"contract":"contracts/FundingContract.sol:FundingContract","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":3448,"contract":"contracts/FundingContract.sol:FundingContract","label":"_owner","offset":0,"slot":"6","type":"t_address"},{"astId":6499,"contract":"contracts/FundingContract.sol:FundingContract","label":"_tokenIds","offset":0,"slot":"7","type":"t_struct(Counter)5017_storage"},{"astId":6502,"contract":"contracts/FundingContract.sol:FundingContract","label":"_withdrawers","offset":0,"slot":"8","type":"t_struct(Counter)5017_storage"},{"astId":6504,"contract":"contracts/FundingContract.sol:FundingContract","label":"s_totalAmount","offset":0,"slot":"9","type":"t_uint256"},{"astId":6506,"contract":"contracts/FundingContract.sol:FundingContract","label":"s_withdrawalFee","offset":0,"slot":"10","type":"t_uint256"},{"astId":6508,"contract":"contracts/FundingContract.sol:FundingContract","label":"s_vestingPeriod","offset":0,"slot":"11","type":"t_uint256"},{"astId":6510,"contract":"contracts/FundingContract.sol:FundingContract","label":"_isGroupWithdrawal","offset":0,"slot":"12","type":"t_bool"},{"astId":6514,"contract":"contracts/FundingContract.sol:FundingContract","label":"s_addressToAmountFunded","offset":0,"slot":"13","type":"t_mapping(t_address,t_uint256)"},{"astId":6517,"contract":"contracts/FundingContract.sol:FundingContract","label":"s_funders","offset":0,"slot":"14","type":"t_array(t_address)dyn_storage"},{"astId":6523,"contract":"contracts/FundingContract.sol:FundingContract","label":"s_requestForWithdrawal","offset":0,"slot":"15","type":"t_mapping(t_uint256,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)5017_storage":{"encoding":"inplace","label":"struct Counters.Counter","members":[{"astId":5016,"contract":"contracts/FundingContract.sol:FundingContract","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/PGFFactory.sol":{"PGFFactory":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"newCreationFee","type":"uint256"}],"name":"CreationFeeChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"},{"indexed":true,"internalType":"uint256","name":"totalFunding","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"vestingPeriod","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"withdrawalFee","type":"uint256"}],"name":"FundingCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newPayoutAddress","type":"address"}],"name":"PayoutAddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"payoutAddress","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdrawed","type":"event"},{"inputs":[],"name":"CREATIONFEE_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAYOUTADDRESS_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_totalFunding","type":"uint256"},{"internalType":"uint256","name":"_withdrawalFee","type":"uint256"},{"internalType":"uint256","name":"_vestingPeriod","type":"uint256"},{"internalType":"bool","name":"_isGroupWithdrawal","type":"bool"}],"name":"createFunding","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_fundingId","type":"uint256"}],"name":"getAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_creationFee","type":"uint256"},{"internalType":"address","name":"_payoutAddress","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"s_contractBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"s_creationFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"s_fundingId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"s_payoutAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_creationFee","type":"uint256"}],"name":"setCreationFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_payoutAddress","type":"address"}],"name":"setPayoutAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"upgradeTo(address)":{"details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60a06040523060805234801561001457600080fd5b5060805161378561004c600039600081816106b3015281816106f601528181610888015281816108cb015261094c01526137856000f3fe608060405260043610620001675760003560e01c80639010d07c11620000c5578063b93f9b0a1162000078578063b93f9b0a1462000407578063c5e97dd71462000442578063ca15c873146200045b578063d547741f1462000480578063da35a26f14620004a5578063ddc490ef14620004ca57600080fd5b80639010d07c146200033257806391d1485414620003575780639faeebd0146200037c578063a217fddf1462000395578063a465aa8814620003ac578063b7d8622514620003e257600080fd5b80633659cfe6116200011e5780633659cfe614620002965780633ccfd60b14620002bb5780634f1ef28614620002d357806352d1902d14620002ea5780635926a6b414620003025780637c9c3c28146200031b57600080fd5b806301ffc9a7146200016c5780631d4718e614620001a6578063248a9ca314620001e25780632f2ff15d146200022557806333ea51a8146200024c57806336568abe1462000271575b600080fd5b3480156200017957600080fd5b50620001916200018b3660046200176c565b62000500565b60405190151581526020015b60405180910390f35b348015620001b357600080fd5b5061016054620001c9906001600160a01b031681565b6040516001600160a01b0390911681526020016200019d565b348015620001ef57600080fd5b50620002166200020136600462001798565b60009081526065602052604090206001015490565b6040519081526020016200019d565b3480156200023257600080fd5b506200024a62000244366004620017cf565b6200052e565b005b3480156200025957600080fd5b506200024a6200026b366004620017fe565b6200055c565b3480156200027e57600080fd5b506200024a62000290366004620017cf565b62000627565b348015620002a357600080fd5b506200024a620002b5366004620017fe565b620006a9565b348015620002c857600080fd5b506200024a6200077d565b6200024a620002e436600462001832565b6200087e565b348015620002f757600080fd5b50620002166200093f565b3480156200030f57600080fd5b50620002166101615481565b6200024a6200032c36600462001900565b620009f0565b3480156200033f57600080fd5b50620001c96200035136600462001948565b62000b5a565b3480156200036457600080fd5b506200019162000376366004620017cf565b62000b7b565b3480156200038957600080fd5b506200021661015f5481565b348015620003a257600080fd5b5062000216600081565b348015620003b957600080fd5b50620002167fe52b516296e3e9bcbfa19b643b4121ced2583c73a88061a902874f43b47e19bc81565b348015620003ef57600080fd5b506200024a6200040136600462001798565b62000ba6565b3480156200041457600080fd5b50620001c96200042636600462001798565b600090815261016260205260409020546001600160a01b031690565b3480156200044f57600080fd5b50620002166101635481565b3480156200046857600080fd5b50620002166200047a36600462001798565b62000c07565b3480156200048d57600080fd5b506200024a6200049f366004620017cf565b62000c20565b348015620004b257600080fd5b506200024a620004c4366004620017cf565b62000c49565b348015620004d757600080fd5b50620002167fc2d029cf524959bb85323c198b4987efbf030ca3846804983133f9ad924acd0981565b60006001600160e01b03198216635a05180f60e01b1480620005285750620005288262000d90565b92915050565b6000828152606560205260409020600101546200054b8162000dc7565b62000557838362000dd3565b505050565b7fe52b516296e3e9bcbfa19b643b4121ced2583c73a88061a902874f43b47e19bc620005888162000dc7565b6001600160a01b038216620005db5760405162461bcd60e51b8152602060048201526014602482015273416464726573732063616e74206265207a65726f60601b60448201526064015b60405180910390fd5b61016080546001600160a01b0319166001600160a01b0384169081179091556040517f90789b797e56b4b4a2e6d1b0314f3d6e97d13098db43d6cb694dc1961a764dea90600090a25050565b6001600160a01b0381163314620006995760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401620005d2565b620006a5828262000df9565b5050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003620006f45760405162461bcd60e51b8152600401620005d2906200196b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166200072862000e1f565b6001600160a01b031614620007515760405162461bcd60e51b8152600401620005d290620019b7565b6200075c8162000e3c565b604080516000808252602082019092526200077a9183919062000e49565b50565b6200078762000fc1565b61016054610163546040516001600160a01b0390921691600090839083908381818185875af1925050503d8060008114620007df576040519150601f19603f3d011682016040523d82523d6000602084013e620007e4565b606091505b5050905080620008325760405162461bcd60e51b815260206004820152601860248201527715da5d1a191c985dc81b9bdd081cdd58d8d95cdcd99d5b1b60421b6044820152606401620005d2565b600061016381905560405183916001600160a01b038616917f6cca423c6ffc06e62a0acc433965e074b11c28479b0449250ce3ff65ac9e39fe9190a35050506200087c600160c955565b565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003620008c95760405162461bcd60e51b8152600401620005d2906200196b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316620008fd62000e1f565b6001600160a01b031614620009265760405162461bcd60e51b8152600401620005d290620019b7565b620009318262000e3c565b620006a58282600162000e49565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620009dc5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b6064820152608401620005d2565b506000805160206200370983398151915290565b61015f5434101562000a635760405162461bcd60e51b815260206004820152603560248201527f45746865722073656e742073686f756c6420626520657175616c206f72206d6f6044820152747265207468616e206372656174696f6e206665657360581b6064820152608401620005d2565b60008484848460405162000a77906200175e565b9384526020840192909252604083015215156060820152608001604051809103906000f08015801562000aae573d6000803e3d6000fd5b50610161805460009081526101626020526040812080546001600160a01b0319166001600160a01b038516179055815492935062000aec8362001a19565b919050555034610163600082825462000b06919062001a35565b925050819055508285826001600160a01b03167f6ca0ec3fed271d8510ec145b359d6599483fb259ffddf66cd5987074e2a1993f8760405162000b4b91815260200190565b60405180910390a45050505050565b600082815260976020526040812062000b7490836200101c565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b7fc2d029cf524959bb85323c198b4987efbf030ca3846804983133f9ad924acd0962000bd28162000dc7565b61015f82905560405182907fb472bc245cc56131a253d64c0fd5cf333aaacde67bf4571c077aa32150256e2190600090a25050565b600081815260976020526040812062000528906200102a565b60008281526065602052604090206001015462000c3d8162000dc7565b62000557838362000df9565b600054610100900460ff161580801562000c6a5750600054600160ff909116105b8062000c865750303b15801562000c86575060005460ff166001145b62000ceb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620005d2565b6000805460ff19166001179055801562000d0f576000805461ff0019166101001790555b61015f83905561016080546001600160a01b0319166001600160a01b038416179055600061016181905562000d45903362000dd3565b801562000557576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b60006001600160e01b03198216637965db0b60e01b14806200052857506301ffc9a760e01b6001600160e01b031983161462000528565b6200077a813362001035565b62000ddf828262001099565b600082815260976020526040902062000557908262001123565b62000e0582826200113a565b6000828152609760205260409020620005579082620011a4565b60008051602062003709833981519152546001600160a01b031690565b6000620006a58162000dc7565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161562000e7f576200055783620011bb565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801562000edc575060408051601f3d908101601f1916820190925262000ed99181019062001a4b565b60015b62000f415760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401620005d2565b60008051602062003709833981519152811462000fb35760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401620005d2565b50620005578383836200125a565b600260c95403620010155760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401620005d2565b600260c955565b600062000b7483836200128b565b600062000528825490565b62001041828262000b7b565b620006a5576200105181620012b8565b6200105e836020620012cb565b6040516020016200107192919062001a8b565b60408051601f198184030181529082905262461bcd60e51b8252620005d29160040162001afe565b620010a5828262000b7b565b620006a55760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620010df3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000b74836001600160a01b03841662001485565b62001146828262000b7b565b15620006a55760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600062000b74836001600160a01b038416620014d7565b6001600160a01b0381163b6200122a5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401620005d2565b6000805160206200370983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6200126583620015db565b600082511180620012735750805b1562000557576200128583836200161d565b50505050565b6000826000018281548110620012a557620012a562001b33565b9060005260206000200154905092915050565b6060620005286001600160a01b03831660145b60606000620012dc83600262001b49565b620012e990600262001a35565b67ffffffffffffffff8111156200130457620013046200181c565b6040519080825280601f01601f1916602001820160405280156200132f576020820181803683370190505b509050600360fc1b816000815181106200134d576200134d62001b33565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106200137f576200137f62001b33565b60200101906001600160f81b031916908160001a9053506000620013a584600262001b49565b620013b290600162001a35565b90505b600181111562001434576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620013ea57620013ea62001b33565b1a60f81b82828151811062001403576200140362001b33565b60200101906001600160f81b031916908160001a90535060049490941c936200142c8162001b63565b9050620013b5565b50831562000b745760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620005d2565b6000818152600183016020526040812054620014ce5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000528565b50600062000528565b60008181526001830160205260408120548015620015d0576000620014fe60018362001b7d565b8554909150600090620015149060019062001b7d565b90508181146200158057600086600001828154811062001538576200153862001b33565b90600052602060002001549050808760000184815481106200155e576200155e62001b33565b6000918252602080832090910192909255918252600188019052604090208390555b855486908062001594576200159462001b93565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505062000528565b600091505062000528565b620015e681620011bb565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b620016875760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401620005d2565b600080846001600160a01b031684604051620016a4919062001ba9565b600060405180830381855af49150503d8060008114620016e1576040519150601f19603f3d011682016040523d82523d6000602084013e620016e6565b606091505b509150915062001711828260405180606001604052806027815260200162003729602791396200171a565b95945050505050565b606083156200172b57508162000b74565b62000b748383815115620017425781518083602001fd5b8060405162461bcd60e51b8152600401620005d2919062001afe565b611b418062001bc883390190565b6000602082840312156200177f57600080fd5b81356001600160e01b03198116811462000b7457600080fd5b600060208284031215620017ab57600080fd5b5035919050565b80356001600160a01b0381168114620017ca57600080fd5b919050565b60008060408385031215620017e357600080fd5b82359150620017f560208401620017b2565b90509250929050565b6000602082840312156200181157600080fd5b62000b7482620017b2565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200184657600080fd5b6200185183620017b2565b9150602083013567ffffffffffffffff808211156200186f57600080fd5b818501915085601f8301126200188457600080fd5b8135818111156200189957620018996200181c565b604051601f8201601f19908116603f01168101908382118183101715620018c457620018c46200181c565b81604052828152886020848701011115620018de57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080600080608085870312156200191757600080fd5b843593506020850135925060408501359150606085013580151581146200193d57600080fd5b939692955090935050565b600080604083850312156200195c57600080fd5b50508035926020909101359150565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60006001820162001a2e5762001a2e62001a03565b5060010190565b8082018082111562000528576200052862001a03565b60006020828403121562001a5e57600080fd5b5051919050565b60005b8381101562001a8257818101518382015260200162001a68565b50506000910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526000835162001abf81601785016020880162001a65565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162001af281602884016020880162001a65565b01602801949350505050565b602081526000825180602084015262001b1f81604085016020870162001a65565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b808202811582820484141762000528576200052862001a03565b60008162001b755762001b7562001a03565b506000190190565b8181038181111562000528576200052862001a03565b634e487b7160e01b600052603160045260246000fd5b6000825162001bbd81846020870162001a65565b919091019291505056fe60806040523480156200001157600080fd5b5060405162001b4138038062001b4183398101604081905262000034916200013f565b6040518060400160405280601481526020017f46756e64696e67436f6e7472616374546f6b656e000000000000000000000000815250604051806040016040528060038152602001621190d560ea1b81525081600090816200009791906200022c565b506001620000a682826200022c565b505050620000c3620000bd620000e960201b60201c565b620000ed565b600993909355600a91909155600b55600c805460ff1916911515919091179055620002f8565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080600080608085870312156200015657600080fd5b845193506020850151925060408501519150606085015180151581146200017c57600080fd5b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620001b257607f821691505b602082108103620001d357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200022757600081815260208120601f850160051c81016020861015620002025750805b601f850160051c820191505b8181101562000223578281556001016200020e565b5050505b505050565b81516001600160401b0381111562000248576200024862000187565b62000260816200025984546200019d565b84620001d9565b602080601f8311600181146200029857600084156200027f5750858301515b600019600386901b1c1916600185901b17855562000223565b600085815260208120601f198616915b82811015620002c957888601518255948401946001909101908401620002a8565b5085821015620002e85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61183980620003086000396000f3fe60806040526004361061017b5760003560e01c8063715018a6116100cc578063c87b56dd1161007a578063c87b56dd1461041c578063d7b4750c1461043d578063d8e159f81461045d578063db06941e14610472578063e2c41dbc14610487578063e985e9c51461048f578063f2fde38b146104af57600080fd5b8063715018a6146103675780637dc4c2ba1461037c5780638da5cb5b1461039157806395d89b41146103af5780639c885eb3146103c4578063a22cb465146103dc578063b88d4fde146103fc57600080fd5b806323b872dd1161012957806323b872dd146102b157806324600fc3146102d157806342842e0e146102e65780634e71d92d146103065780636352211e1461031257806365ac43411461033257806370a082311461034757600080fd5b806301ffc9a7146101875780630343fb25146101bc57806306fdde0314610200578063081812fc14610222578063095ea7b31461025a5780631095941e1461027c5780631096cb791461029c57600080fd5b3661018257005b600080fd5b34801561019357600080fd5b506101a76101a236600461130a565b6104cf565b60405190151581526020015b60405180910390f35b3480156101c857600080fd5b506101f26101d7366004611343565b6001600160a01b03166000908152600d602052604090205490565b6040519081526020016101b3565b34801561020c57600080fd5b50610215610521565b6040516101b391906113a4565b34801561022e57600080fd5b5061024261023d3660046113b7565b6105b3565b6040516001600160a01b0390911681526020016101b3565b34801561026657600080fd5b5061027a6102753660046113d0565b6105da565b005b34801561028857600080fd5b5061027a6102973660046113b7565b6106f4565b3480156102a857600080fd5b50600b546101f2565b3480156102bd57600080fd5b5061027a6102cc3660046113fa565b61074c565b3480156102dd57600080fd5b5061027a61077d565b3480156102f257600080fd5b5061027a6103013660046113fa565b610865565b34801561027a57600080fd5b34801561031e57600080fd5b5061024261032d3660046113b7565b610882565b34801561033e57600080fd5b506009546101f2565b34801561035357600080fd5b506101f2610362366004611343565b6108b6565b34801561037357600080fd5b5061027a61093c565b34801561038857600080fd5b506101a761094e565b34801561039d57600080fd5b506006546001600160a01b0316610242565b3480156103bb57600080fd5b506102156109bb565b3480156103d057600080fd5b50600c5460ff166101a7565b3480156103e857600080fd5b5061027a6103f7366004611436565b6109ca565b34801561040857600080fd5b5061027a610417366004611488565b6109d5565b34801561042857600080fd5b506102156104373660046113b7565b50606090565b34801561044957600080fd5b506102426104583660046113b7565b610a0d565b34801561046957600080fd5b50600a546101f2565b34801561047e57600080fd5b506101f2610a3d565b61027a610a5b565b34801561049b57600080fd5b506101a76104aa366004611564565b610afc565b3480156104bb57600080fd5b5061027a6104ca366004611343565b610b2a565b60006001600160e01b031982166380ac58cd60e01b148061050057506001600160e01b03198216635b5e139f60e01b145b8061051b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461053090611597565b80601f016020809104026020016040519081016040528092919081815260200182805461055c90611597565b80156105a95780601f1061057e576101008083540402835291602001916105a9565b820191906000526020600020905b81548152906001019060200180831161058c57829003601f168201915b5050505050905090565b60006105be82610ba0565b506000908152600460205260409020546001600160a01b031690565b60006105e582610882565b9050806001600160a01b0316836001600160a01b0316036106575760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061067357506106738133610afc565b6106e55760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161064e565b6106ef8383610bc5565b505050565b600c5460ff166107175760405163568fd53960e11b815260040160405180910390fd5b6000818152600f602090815260408083203384529091529020805460ff19166001179055610749600880546001019055565b50565b6107563382610c33565b6107725760405162461bcd60e51b815260040161064e906115d1565b6106ef838383610c92565b610785610e03565b600c5460ff16156107f65761079861094e565b6107f65760405162461bcd60e51b815260206004820152602960248201527f5468657265206973206e6f206d616a6f7269747920617070726f76616c20746f60448201526820776974686472617760b81b606482015260840161064e565b6040514790600090339083908381818185875af1925050503d806000811461083a576040519150601f19603f3d011682016040523d82523d6000602084013e61083f565b606091505b505090508061086157604051639af25e5d60e01b815260040160405180910390fd5b5050565b6106ef838383604051806020016040528060008152506109d5565b565b60008061088e83610e5d565b90506001600160a01b03811661051b5760405162461bcd60e51b815260040161064e9061161e565b60006001600160a01b0382166109205760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161064e565b506001600160a01b031660009081526003602052604090205490565b610944610e03565b6108806000610e78565b600c5460009060ff166109745760405163568fd53960e11b815260040160405180910390fd5b600061097f60085490565b600e549091506000906109a09060649061099a90603c610eca565b90610edd565b90508082106109b25760019250505090565b60009250505090565b60606001805461053090611597565b610861338383610ee9565b6109df3383610c33565b6109fb5760405162461bcd60e51b815260040161064e906115d1565b610a0784848484610fb3565b50505050565b6000600e8281548110610a2257610a22611650565b6000918252602090912001546001600160a01b031692915050565b6000610a56600b54600954610edd90919063ffffffff16565b905090565b6000610a65610a3d565b90506000610a7260075490565b9050813411610a945760405163cf463cf960e01b815260040160405180910390fd5b336000818152600d60205260408120349055600e805460018101825591527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180546001600160a01b03191682179055610aee9082610fe6565b610861600780546001019055565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610b32610e03565b6001600160a01b038116610b975760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161064e565b61074981610e78565b610ba981611000565b6107495760405162461bcd60e51b815260040161064e9061161e565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610bfa82610882565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610c3f83610882565b9050806001600160a01b0316846001600160a01b03161480610c665750610c668185610afc565b80610c8a5750836001600160a01b0316610c7f846105b3565b6001600160a01b0316145b949350505050565b826001600160a01b0316610ca582610882565b6001600160a01b031614610ccb5760405162461bcd60e51b815260040161064e90611666565b6001600160a01b038216610d2d5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161064e565b610d3a838383600161101d565b826001600160a01b0316610d4d82610882565b6001600160a01b031614610d735760405162461bcd60e51b815260040161064e90611666565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6006546001600160a01b031633146108805760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161064e565b6000908152600260205260409020546001600160a01b031690565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610ed682846116c1565b9392505050565b6000610ed682846116d8565b816001600160a01b0316836001600160a01b031603610f465760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640161064e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610fbe848484610c92565b610fca848484846110a5565b610a075760405162461bcd60e51b815260040161064e906116fa565b6108618282604051806020016040528060008152506111a6565b60008061100c83610e5d565b6001600160a01b0316141592915050565b6001811115610a07576001600160a01b03841615611063576001600160a01b0384166000908152600360205260408120805483929061105d90849061174c565b90915550505b6001600160a01b03831615610a07576001600160a01b0383166000908152600360205260408120805483929061109a90849061175f565b909155505050505050565b60006001600160a01b0384163b1561119b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906110e9903390899088908890600401611772565b6020604051808303816000875af1925050508015611124575060408051601f3d908101601f19168201909252611121918101906117af565b60015b611181573d808015611152576040519150601f19603f3d011682016040523d82523d6000602084013e611157565b606091505b5080516000036111795760405162461bcd60e51b815260040161064e906116fa565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610c8a565b506001949350505050565b6111b083836111d9565b6111bd60008484846110a5565b6106ef5760405162461bcd60e51b815260040161064e906116fa565b6001600160a01b03821661122f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161064e565b61123881611000565b156112555760405162461bcd60e51b815260040161064e906117cc565b61126360008383600161101d565b61126c81611000565b156112895760405162461bcd60e51b815260040161064e906117cc565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b03198116811461074957600080fd5b60006020828403121561131c57600080fd5b8135610ed6816112f4565b80356001600160a01b038116811461133e57600080fd5b919050565b60006020828403121561135557600080fd5b610ed682611327565b6000815180845260005b8181101561138457602081850181015186830182015201611368565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610ed6602083018461135e565b6000602082840312156113c957600080fd5b5035919050565b600080604083850312156113e357600080fd5b6113ec83611327565b946020939093013593505050565b60008060006060848603121561140f57600080fd5b61141884611327565b925061142660208501611327565b9150604084013590509250925092565b6000806040838503121561144957600080fd5b61145283611327565b91506020830135801515811461146757600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561149e57600080fd5b6114a785611327565b93506114b560208601611327565b925060408501359150606085013567ffffffffffffffff808211156114d957600080fd5b818701915087601f8301126114ed57600080fd5b8135818111156114ff576114ff611472565b604051601f8201601f19908116603f0116810190838211818310171561152757611527611472565b816040528281528a602084870101111561154057600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561157757600080fd5b61158083611327565b915061158e60208401611327565b90509250929050565b600181811c908216806115ab57607f821691505b6020821081036115cb57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761051b5761051b6116ab565b6000826116f557634e487b7160e01b600052601260045260246000fd5b500490565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b8181038181111561051b5761051b6116ab565b8082018082111561051b5761051b6116ab565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906117a59083018461135e565b9695505050505050565b6000602082840312156117c157600080fd5b8151610ed6816112f4565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060408201526060019056fea2646970667358221220599eda65bdcd62a61f847b03f64c19e6f820915df7e86063244c4da937bbcc2f64736f6c63430008110033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220c609ec04c54ac4029a127e2fa61ad05ff15b3e9a4616ac36a4266cd534adeee664736f6c63430008110033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x80 MLOAD PUSH2 0x3785 PUSH2 0x4C PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x6B3 ADD MSTORE DUP2 DUP2 PUSH2 0x6F6 ADD MSTORE DUP2 DUP2 PUSH2 0x888 ADD MSTORE DUP2 DUP2 PUSH2 0x8CB ADD MSTORE PUSH2 0x94C ADD MSTORE PUSH2 0x3785 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH3 0x167 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9010D07C GT PUSH3 0xC5 JUMPI DUP1 PUSH4 0xB93F9B0A GT PUSH3 0x78 JUMPI DUP1 PUSH4 0xB93F9B0A EQ PUSH3 0x407 JUMPI DUP1 PUSH4 0xC5E97DD7 EQ PUSH3 0x442 JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH3 0x45B JUMPI DUP1 PUSH4 0xD547741F EQ PUSH3 0x480 JUMPI DUP1 PUSH4 0xDA35A26F EQ PUSH3 0x4A5 JUMPI DUP1 PUSH4 0xDDC490EF EQ PUSH3 0x4CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9010D07C EQ PUSH3 0x332 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH3 0x357 JUMPI DUP1 PUSH4 0x9FAEEBD0 EQ PUSH3 0x37C JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH3 0x395 JUMPI DUP1 PUSH4 0xA465AA88 EQ PUSH3 0x3AC JUMPI DUP1 PUSH4 0xB7D86225 EQ PUSH3 0x3E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3659CFE6 GT PUSH3 0x11E JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH3 0x296 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH3 0x2BB JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH3 0x2D3 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH3 0x2EA JUMPI DUP1 PUSH4 0x5926A6B4 EQ PUSH3 0x302 JUMPI DUP1 PUSH4 0x7C9C3C28 EQ PUSH3 0x31B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH3 0x16C JUMPI DUP1 PUSH4 0x1D4718E6 EQ PUSH3 0x1A6 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH3 0x1E2 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH3 0x225 JUMPI DUP1 PUSH4 0x33EA51A8 EQ PUSH3 0x24C JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH3 0x271 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x191 PUSH3 0x18B CALLDATASIZE PUSH1 0x4 PUSH3 0x176C JUMP JUMPDEST PUSH3 0x500 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x1B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 SLOAD PUSH3 0x1C9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x19D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x216 PUSH3 0x201 CALLDATASIZE PUSH1 0x4 PUSH3 0x1798 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x19D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x232 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x24A PUSH3 0x244 CALLDATASIZE PUSH1 0x4 PUSH3 0x17CF JUMP JUMPDEST PUSH3 0x52E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x259 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x24A PUSH3 0x26B CALLDATASIZE PUSH1 0x4 PUSH3 0x17FE JUMP JUMPDEST PUSH3 0x55C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x24A PUSH3 0x290 CALLDATASIZE PUSH1 0x4 PUSH3 0x17CF JUMP JUMPDEST PUSH3 0x627 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x24A PUSH3 0x2B5 CALLDATASIZE PUSH1 0x4 PUSH3 0x17FE JUMP JUMPDEST PUSH3 0x6A9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x2C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x24A PUSH3 0x77D JUMP JUMPDEST PUSH3 0x24A PUSH3 0x2E4 CALLDATASIZE PUSH1 0x4 PUSH3 0x1832 JUMP JUMPDEST PUSH3 0x87E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x2F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x216 PUSH3 0x93F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x30F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x216 PUSH2 0x161 SLOAD DUP2 JUMP JUMPDEST PUSH3 0x24A PUSH3 0x32C CALLDATASIZE PUSH1 0x4 PUSH3 0x1900 JUMP JUMPDEST PUSH3 0x9F0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x33F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1C9 PUSH3 0x351 CALLDATASIZE PUSH1 0x4 PUSH3 0x1948 JUMP JUMPDEST PUSH3 0xB5A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x364 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x191 PUSH3 0x376 CALLDATASIZE PUSH1 0x4 PUSH3 0x17CF JUMP JUMPDEST PUSH3 0xB7B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x389 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x216 PUSH2 0x15F SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x3A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x216 PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x3B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x216 PUSH32 0xE52B516296E3E9BCBFA19B643B4121CED2583C73A88061A902874F43B47E19BC DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x3EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x24A PUSH3 0x401 CALLDATASIZE PUSH1 0x4 PUSH3 0x1798 JUMP JUMPDEST PUSH3 0xBA6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1C9 PUSH3 0x426 CALLDATASIZE PUSH1 0x4 PUSH3 0x1798 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x162 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x216 PUSH2 0x163 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x468 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x216 PUSH3 0x47A CALLDATASIZE PUSH1 0x4 PUSH3 0x1798 JUMP JUMPDEST PUSH3 0xC07 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x24A PUSH3 0x49F CALLDATASIZE PUSH1 0x4 PUSH3 0x17CF JUMP JUMPDEST PUSH3 0xC20 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x4B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x24A PUSH3 0x4C4 CALLDATASIZE PUSH1 0x4 PUSH3 0x17CF JUMP JUMPDEST PUSH3 0xC49 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x4D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x216 PUSH32 0xC2D029CF524959BB85323C198B4987EFBF030CA3846804983133F9AD924ACD09 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5A05180F PUSH1 0xE0 SHL EQ DUP1 PUSH3 0x528 JUMPI POP PUSH3 0x528 DUP3 PUSH3 0xD90 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH3 0x54B DUP2 PUSH3 0xDC7 JUMP JUMPDEST PUSH3 0x557 DUP4 DUP4 PUSH3 0xDD3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0xE52B516296E3E9BCBFA19B643B4121CED2583C73A88061A902874F43B47E19BC PUSH3 0x588 DUP2 PUSH3 0xDC7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x5DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x416464726573732063616E74206265207A65726F PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x160 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x90789B797E56B4B4A2E6D1B0314F3D6E97D13098DB43D6CB694DC1961A764DEA SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH3 0x699 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x5D2 JUMP JUMPDEST PUSH3 0x6A5 DUP3 DUP3 PUSH3 0xDF9 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH3 0x6F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x5D2 SWAP1 PUSH3 0x196B JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x728 PUSH3 0xE1F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x751 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x5D2 SWAP1 PUSH3 0x19B7 JUMP JUMPDEST PUSH3 0x75C DUP2 PUSH3 0xE3C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH3 0x77A SWAP2 DUP4 SWAP2 SWAP1 PUSH3 0xE49 JUMP JUMPDEST POP JUMP JUMPDEST PUSH3 0x787 PUSH3 0xFC1 JUMP JUMPDEST PUSH2 0x160 SLOAD PUSH2 0x163 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH1 0x0 SWAP1 DUP4 SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0x7DF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x7E4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH3 0x832 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x15DA5D1A191C985DC81B9BDD081CDD58D8D95CDCD99D5B1B PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x5D2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x163 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH32 0x6CCA423C6FFC06E62A0ACC433965E074B11C28479B0449250CE3FF65AC9E39FE SWAP2 SWAP1 LOG3 POP POP POP PUSH3 0x87C PUSH1 0x1 PUSH1 0xC9 SSTORE JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH3 0x8C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x5D2 SWAP1 PUSH3 0x196B JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x8FD PUSH3 0xE1F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x926 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x5D2 SWAP1 PUSH3 0x19B7 JUMP JUMPDEST PUSH3 0x931 DUP3 PUSH3 0xE3C JUMP JUMPDEST PUSH3 0x6A5 DUP3 DUP3 PUSH1 0x1 PUSH3 0xE49 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH3 0x9DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH24 0x1B1959081D1A1C9BDD59DA0819195B1959D85D1958D85B1B PUSH1 0x42 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x5D2 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x3709 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x15F SLOAD CALLVALUE LT ISZERO PUSH3 0xA63 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45746865722073656E742073686F756C6420626520657175616C206F72206D6F PUSH1 0x44 DUP3 ADD MSTORE PUSH21 0x7265207468616E206372656174696F6E2066656573 PUSH1 0x58 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x5D2 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH3 0xA77 SWAP1 PUSH3 0x175E JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0xAAE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x161 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x162 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND OR SWAP1 SSTORE DUP2 SLOAD SWAP3 SWAP4 POP PUSH3 0xAEC DUP4 PUSH3 0x1A19 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP CALLVALUE PUSH2 0x163 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH3 0xB06 SWAP2 SWAP1 PUSH3 0x1A35 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 DUP6 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x6CA0EC3FED271D8510EC145B359D6599483FB259FFDDF66CD5987074E2A1993F DUP8 PUSH1 0x40 MLOAD PUSH3 0xB4B SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH3 0xB74 SWAP1 DUP4 PUSH3 0x101C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH32 0xC2D029CF524959BB85323C198B4987EFBF030CA3846804983133F9AD924ACD09 PUSH3 0xBD2 DUP2 PUSH3 0xDC7 JUMP JUMPDEST PUSH2 0x15F DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP3 SWAP1 PUSH32 0xB472BC245CC56131A253D64C0FD5CF333AAACDE67BF4571C077AA32150256E21 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH3 0x528 SWAP1 PUSH3 0x102A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH3 0xC3D DUP2 PUSH3 0xDC7 JUMP JUMPDEST PUSH3 0x557 DUP4 DUP4 PUSH3 0xDF9 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH3 0xC6A JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH3 0xC86 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xC86 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH3 0xCEB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x5D2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH3 0xD0F JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x15F DUP4 SWAP1 SSTORE PUSH2 0x160 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH1 0x0 PUSH2 0x161 DUP2 SWAP1 SSTORE PUSH3 0xD45 SWAP1 CALLER PUSH3 0xDD3 JUMP JUMPDEST DUP1 ISZERO PUSH3 0x557 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH3 0x528 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH3 0x528 JUMP JUMPDEST PUSH3 0x77A DUP2 CALLER PUSH3 0x1035 JUMP JUMPDEST PUSH3 0xDDF DUP3 DUP3 PUSH3 0x1099 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH3 0x557 SWAP1 DUP3 PUSH3 0x1123 JUMP JUMPDEST PUSH3 0xE05 DUP3 DUP3 PUSH3 0x113A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH3 0x557 SWAP1 DUP3 PUSH3 0x11A4 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x3709 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x6A5 DUP2 PUSH3 0xDC7 JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH3 0xE7F JUMPI PUSH3 0x557 DUP4 PUSH3 0x11BB JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH3 0xEDC JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH3 0xED9 SWAP2 DUP2 ADD SWAP1 PUSH3 0x1A4B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH3 0xF41 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x5D2 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x3709 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH3 0xFB3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x5D2 JUMP JUMPDEST POP PUSH3 0x557 DUP4 DUP4 DUP4 PUSH3 0x125A JUMP JUMPDEST PUSH1 0x2 PUSH1 0xC9 SLOAD SUB PUSH3 0x1015 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x5D2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0xC9 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH3 0xB74 DUP4 DUP4 PUSH3 0x128B JUMP JUMPDEST PUSH1 0x0 PUSH3 0x528 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH3 0x1041 DUP3 DUP3 PUSH3 0xB7B JUMP JUMPDEST PUSH3 0x6A5 JUMPI PUSH3 0x1051 DUP2 PUSH3 0x12B8 JUMP JUMPDEST PUSH3 0x105E DUP4 PUSH1 0x20 PUSH3 0x12CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x1071 SWAP3 SWAP2 SWAP1 PUSH3 0x1A8B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH3 0x5D2 SWAP2 PUSH1 0x4 ADD PUSH3 0x1AFE JUMP JUMPDEST PUSH3 0x10A5 DUP3 DUP3 PUSH3 0xB7B JUMP JUMPDEST PUSH3 0x6A5 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0x10DF CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xB74 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH3 0x1485 JUMP JUMPDEST PUSH3 0x1146 DUP3 DUP3 PUSH3 0xB7B JUMP JUMPDEST ISZERO PUSH3 0x6A5 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xB74 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH3 0x14D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH3 0x122A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x5D2 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x3709 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH3 0x1265 DUP4 PUSH3 0x15DB JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH3 0x1273 JUMPI POP DUP1 JUMPDEST ISZERO PUSH3 0x557 JUMPI PUSH3 0x1285 DUP4 DUP4 PUSH3 0x161D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH3 0x12A5 JUMPI PUSH3 0x12A5 PUSH3 0x1B33 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH3 0x528 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH3 0x12DC DUP4 PUSH1 0x2 PUSH3 0x1B49 JUMP JUMPDEST PUSH3 0x12E9 SWAP1 PUSH1 0x2 PUSH3 0x1A35 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1304 JUMPI PUSH3 0x1304 PUSH3 0x181C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0x132F JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x134D JUMPI PUSH3 0x134D PUSH3 0x1B33 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x137F JUMPI PUSH3 0x137F PUSH3 0x1B33 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH3 0x13A5 DUP5 PUSH1 0x2 PUSH3 0x1B49 JUMP JUMPDEST PUSH3 0x13B2 SWAP1 PUSH1 0x1 PUSH3 0x1A35 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH3 0x1434 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH3 0x13EA JUMPI PUSH3 0x13EA PUSH3 0x1B33 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x1403 JUMPI PUSH3 0x1403 PUSH3 0x1B33 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH3 0x142C DUP2 PUSH3 0x1B63 JUMP JUMPDEST SWAP1 POP PUSH3 0x13B5 JUMP JUMPDEST POP DUP4 ISZERO PUSH3 0xB74 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x5D2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH3 0x14CE JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH3 0x528 JUMP JUMPDEST POP PUSH1 0x0 PUSH3 0x528 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH3 0x15D0 JUMPI PUSH1 0x0 PUSH3 0x14FE PUSH1 0x1 DUP4 PUSH3 0x1B7D JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH3 0x1514 SWAP1 PUSH1 0x1 SWAP1 PUSH3 0x1B7D JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH3 0x1580 JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH3 0x1538 JUMPI PUSH3 0x1538 PUSH3 0x1B33 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH3 0x155E JUMPI PUSH3 0x155E PUSH3 0x1B33 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH3 0x1594 JUMPI PUSH3 0x1594 PUSH3 0x1B93 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH3 0x528 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH3 0x528 JUMP JUMPDEST PUSH3 0x15E6 DUP2 PUSH3 0x11BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE PUSH3 0x1687 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x5D2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH3 0x16A4 SWAP2 SWAP1 PUSH3 0x1BA9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0x16E1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x16E6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH3 0x1711 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x3729 PUSH1 0x27 SWAP2 CODECOPY PUSH3 0x171A JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH3 0x172B JUMPI POP DUP2 PUSH3 0xB74 JUMP JUMPDEST PUSH3 0xB74 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH3 0x1742 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x5D2 SWAP2 SWAP1 PUSH3 0x1AFE JUMP JUMPDEST PUSH2 0x1B41 DUP1 PUSH3 0x1BC8 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x177F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH3 0xB74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x17AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x17CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x17E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH3 0x17F5 PUSH1 0x20 DUP5 ADD PUSH3 0x17B2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1811 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0xB74 DUP3 PUSH3 0x17B2 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1846 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1851 DUP4 PUSH3 0x17B2 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x186F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x1884 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH3 0x1899 JUMPI PUSH3 0x1899 PUSH3 0x181C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x18C4 JUMPI PUSH3 0x18C4 PUSH3 0x181C JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH3 0x18DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x1917 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x193D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x195C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH3 0x1A2E JUMPI PUSH3 0x1A2E PUSH3 0x1A03 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH3 0x528 JUMPI PUSH3 0x528 PUSH3 0x1A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1A5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x1A82 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x1A68 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH3 0x1ABF DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH3 0x1A65 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH3 0x1AF2 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH3 0x1A65 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x1B1F DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x1A65 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH3 0x528 JUMPI PUSH3 0x528 PUSH3 0x1A03 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH3 0x1B75 JUMPI PUSH3 0x1B75 PUSH3 0x1A03 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x528 JUMPI PUSH3 0x528 PUSH3 0x1A03 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH3 0x1BBD DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH3 0x1A65 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1B41 CODESIZE SUB DUP1 PUSH3 0x1B41 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x13F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x14 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x46756E64696E67436F6E7472616374546F6B656E000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x1190D5 PUSH1 0xEA SHL DUP2 MSTORE POP DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0x97 SWAP2 SWAP1 PUSH3 0x22C JUMP JUMPDEST POP PUSH1 0x1 PUSH3 0xA6 DUP3 DUP3 PUSH3 0x22C JUMP JUMPDEST POP POP POP PUSH3 0xC3 PUSH3 0xBD PUSH3 0xE9 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xED JUMP JUMPDEST PUSH1 0x9 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0xA SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xB SSTORE PUSH1 0xC DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH3 0x2F8 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x156 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP6 ADD MLOAD SWAP2 POP PUSH1 0x60 DUP6 ADD MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x17C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x1B2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x1D3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x227 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x202 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x223 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x20E JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x248 JUMPI PUSH3 0x248 PUSH3 0x187 JUMP JUMPDEST PUSH3 0x260 DUP2 PUSH3 0x259 DUP5 SLOAD PUSH3 0x19D JUMP JUMPDEST DUP5 PUSH3 0x1D9 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x298 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x27F JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x223 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x2C9 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x2A8 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x2E8 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x1839 DUP1 PUSH3 0x308 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x17B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xCC JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x41C JUMPI DUP1 PUSH4 0xD7B4750C EQ PUSH2 0x43D JUMPI DUP1 PUSH4 0xD8E159F8 EQ PUSH2 0x45D JUMPI DUP1 PUSH4 0xDB06941E EQ PUSH2 0x472 JUMPI DUP1 PUSH4 0xE2C41DBC EQ PUSH2 0x487 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x48F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x367 JUMPI DUP1 PUSH4 0x7DC4C2BA EQ PUSH2 0x37C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3AF JUMPI DUP1 PUSH4 0x9C885EB3 EQ PUSH2 0x3C4 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3DC JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x129 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2B1 JUMPI DUP1 PUSH4 0x24600FC3 EQ PUSH2 0x2D1 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x4E71D92D EQ PUSH2 0x306 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x312 JUMPI DUP1 PUSH4 0x65AC4341 EQ PUSH2 0x332 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x347 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0x343FB25 EQ PUSH2 0x1BC JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x200 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0x1095941E EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0x1096CB79 EQ PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x182 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x193 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A7 PUSH2 0x1A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x130A JUMP JUMPDEST PUSH2 0x4CF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1343 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x215 PUSH2 0x521 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B3 SWAP2 SWAP1 PUSH2 0x13A4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x242 PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0x13B7 JUMP JUMPDEST PUSH2 0x5B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x275 CALLDATASIZE PUSH1 0x4 PUSH2 0x13D0 JUMP JUMPDEST PUSH2 0x5DA JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x288 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B7 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB SLOAD PUSH2 0x1F2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x2CC CALLDATASIZE PUSH1 0x4 PUSH2 0x13FA JUMP JUMPDEST PUSH2 0x74C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x77D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x301 CALLDATASIZE PUSH1 0x4 PUSH2 0x13FA JUMP JUMPDEST PUSH2 0x865 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x242 PUSH2 0x32D CALLDATASIZE PUSH1 0x4 PUSH2 0x13B7 JUMP JUMPDEST PUSH2 0x882 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x9 SLOAD PUSH2 0x1F2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x1343 JUMP JUMPDEST PUSH2 0x8B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x93C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x388 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A7 PUSH2 0x94E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x242 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x215 PUSH2 0x9BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xC SLOAD PUSH1 0xFF AND PUSH2 0x1A7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x3F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1436 JUMP JUMPDEST PUSH2 0x9CA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x408 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x417 CALLDATASIZE PUSH1 0x4 PUSH2 0x1488 JUMP JUMPDEST PUSH2 0x9D5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x428 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x215 PUSH2 0x437 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B7 JUMP JUMPDEST POP PUSH1 0x60 SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x242 PUSH2 0x458 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B7 JUMP JUMPDEST PUSH2 0xA0D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x469 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xA SLOAD PUSH2 0x1F2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0xA3D JUMP JUMPDEST PUSH2 0x27A PUSH2 0xA5B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A7 PUSH2 0x4AA CALLDATASIZE PUSH1 0x4 PUSH2 0x1564 JUMP JUMPDEST PUSH2 0xAFC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x4CA CALLDATASIZE PUSH1 0x4 PUSH2 0x1343 JUMP JUMPDEST PUSH2 0xB2A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x500 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x51B JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x530 SWAP1 PUSH2 0x1597 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x55C SWAP1 PUSH2 0x1597 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5A9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x57E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5A9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x58C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BE DUP3 PUSH2 0xBA0 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E5 DUP3 PUSH2 0x882 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x657 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x673 JUMPI POP PUSH2 0x673 DUP2 CALLER PUSH2 0xAFC JUMP JUMPDEST PUSH2 0x6E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x64E JUMP JUMPDEST PUSH2 0x6EF DUP4 DUP4 PUSH2 0xBC5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0xFF AND PUSH2 0x717 JUMPI PUSH1 0x40 MLOAD PUSH4 0x568FD539 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x749 PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x756 CALLER DUP3 PUSH2 0xC33 JUMP JUMPDEST PUSH2 0x772 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x15D1 JUMP JUMPDEST PUSH2 0x6EF DUP4 DUP4 DUP4 PUSH2 0xC92 JUMP JUMPDEST PUSH2 0x785 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x7F6 JUMPI PUSH2 0x798 PUSH2 0x94E JUMP JUMPDEST PUSH2 0x7F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468657265206973206E6F206D616A6F7269747920617070726F76616C20746F PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x207769746864726177 PUSH1 0xB8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x64E JUMP JUMPDEST PUSH1 0x40 MLOAD SELFBALANCE SWAP1 PUSH1 0x0 SWAP1 CALLER SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x83A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x83F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x861 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9AF25E5D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x6EF DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x9D5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x88E DUP4 PUSH2 0xE5D JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x51B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x161E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x920 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x64E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x944 PUSH2 0xE03 JUMP JUMPDEST PUSH2 0x880 PUSH1 0x0 PUSH2 0xE78 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND PUSH2 0x974 JUMPI PUSH1 0x40 MLOAD PUSH4 0x568FD539 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x97F PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xE SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x9A0 SWAP1 PUSH1 0x64 SWAP1 PUSH2 0x99A SWAP1 PUSH1 0x3C PUSH2 0xECA JUMP JUMPDEST SWAP1 PUSH2 0xEDD JUMP JUMPDEST SWAP1 POP DUP1 DUP3 LT PUSH2 0x9B2 JUMPI PUSH1 0x1 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x530 SWAP1 PUSH2 0x1597 JUMP JUMPDEST PUSH2 0x861 CALLER DUP4 DUP4 PUSH2 0xEE9 JUMP JUMPDEST PUSH2 0x9DF CALLER DUP4 PUSH2 0xC33 JUMP JUMPDEST PUSH2 0x9FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x15D1 JUMP JUMPDEST PUSH2 0xA07 DUP5 DUP5 DUP5 DUP5 PUSH2 0xFB3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xA22 JUMPI PUSH2 0xA22 PUSH2 0x1650 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA56 PUSH1 0xB SLOAD PUSH1 0x9 SLOAD PUSH2 0xEDD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA65 PUSH2 0xA3D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA72 PUSH1 0x7 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP DUP2 CALLVALUE GT PUSH2 0xA94 JUMPI PUSH1 0x40 MLOAD PUSH4 0xCF463CF9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 CALLVALUE SWAP1 SSTORE PUSH1 0xE DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP2 MSTORE PUSH32 0xBB7B4A454DC3493923482F07822329ED19E8244EFF582CC204F8554C3620C3FD ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP3 OR SWAP1 SSTORE PUSH2 0xAEE SWAP1 DUP3 PUSH2 0xFE6 JUMP JUMPDEST PUSH2 0x861 PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0xB32 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB97 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x64E JUMP JUMPDEST PUSH2 0x749 DUP2 PUSH2 0xE78 JUMP JUMPDEST PUSH2 0xBA9 DUP2 PUSH2 0x1000 JUMP JUMPDEST PUSH2 0x749 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x161E JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0xBFA DUP3 PUSH2 0x882 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC3F DUP4 PUSH2 0x882 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xC66 JUMPI POP PUSH2 0xC66 DUP2 DUP6 PUSH2 0xAFC JUMP JUMPDEST DUP1 PUSH2 0xC8A JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xC7F DUP5 PUSH2 0x5B3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xCA5 DUP3 PUSH2 0x882 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xCCB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x1666 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x64E JUMP JUMPDEST PUSH2 0xD3A DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x101D JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD4D DUP3 PUSH2 0x882 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xD73 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x1666 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x880 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x64E JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xED6 DUP3 DUP5 PUSH2 0x16C1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xED6 DUP3 DUP5 PUSH2 0x16D8 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xF46 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x22A9219B99189D1030B8383937BB32903A379031B0B63632B9 PUSH1 0x39 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x64E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xFBE DUP5 DUP5 DUP5 PUSH2 0xC92 JUMP JUMPDEST PUSH2 0xFCA DUP5 DUP5 DUP5 DUP5 PUSH2 0x10A5 JUMP JUMPDEST PUSH2 0xA07 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x16FA JUMP JUMPDEST PUSH2 0x861 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x11A6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x100C DUP4 PUSH2 0xE5D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xA07 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1063 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x105D SWAP1 DUP5 SWAP1 PUSH2 0x174C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0xA07 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x109A SWAP1 DUP5 SWAP1 PUSH2 0x175F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x119B JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x10E9 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1772 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1124 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1121 SWAP2 DUP2 ADD SWAP1 PUSH2 0x17AF JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1181 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1152 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1157 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1179 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x16FA JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0xC8A JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x11B0 DUP4 DUP4 PUSH2 0x11D9 JUMP JUMPDEST PUSH2 0x11BD PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x10A5 JUMP JUMPDEST PUSH2 0x6EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x16FA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x122F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x64E JUMP JUMPDEST PUSH2 0x1238 DUP2 PUSH2 0x1000 JUMP JUMPDEST ISZERO PUSH2 0x1255 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x17CC JUMP JUMPDEST PUSH2 0x1263 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x101D JUMP JUMPDEST PUSH2 0x126C DUP2 PUSH2 0x1000 JUMP JUMPDEST ISZERO PUSH2 0x1289 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x17CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x749 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x131C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xED6 DUP2 PUSH2 0x12F4 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x133E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1355 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xED6 DUP3 PUSH2 0x1327 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1384 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x1368 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xED6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x135E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13EC DUP4 PUSH2 0x1327 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x140F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1418 DUP5 PUSH2 0x1327 JUMP JUMPDEST SWAP3 POP PUSH2 0x1426 PUSH1 0x20 DUP6 ADD PUSH2 0x1327 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1452 DUP4 PUSH2 0x1327 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1467 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x149E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14A7 DUP6 PUSH2 0x1327 JUMP JUMPDEST SWAP4 POP PUSH2 0x14B5 PUSH1 0x20 DUP7 ADD PUSH2 0x1327 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x14D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x14ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x14FF JUMPI PUSH2 0x14FF PUSH2 0x1472 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1527 JUMPI PUSH2 0x1527 PUSH2 0x1472 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1540 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1577 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1580 DUP4 PUSH2 0x1327 JUMP JUMPDEST SWAP2 POP PUSH2 0x158E PUSH1 0x20 DUP5 ADD PUSH2 0x1327 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x15AB JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x15CB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x51B JUMPI PUSH2 0x51B PUSH2 0x16AB JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x16F5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x51B JUMPI PUSH2 0x51B PUSH2 0x16AB JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x51B JUMPI PUSH2 0x51B PUSH2 0x16AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x17A5 SWAP1 DUP4 ADD DUP5 PUSH2 0x135E JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xED6 DUP2 PUSH2 0x12F4 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSIZE SWAP15 0xDA PUSH6 0xBDCD62A61F84 PUSH28 0x3F64C19E6F820915DF7E86063244C4DA937BBCC2F64736F6C634300 ADDMOD GT STOP CALLER CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A2646970667358221220C6 MULMOD 0xEC DIV 0xC5 0x4A 0xC4 MUL SWAP11 SLT PUSH31 0x2FA61AD05FF15B3E9A4616AC36A4266CD534ADEEE664736F6C634300081100 CALLER ","sourceMap":"345:3040:32:-:0;;;1332:4:8;1289:48;;345:3040:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@CREATIONFEE_ROLE_6834":{"entryPoint":null,"id":6834,"parameterSlots":0,"returnSlots":0},"@DEFAULT_ADMIN_ROLE_187":{"entryPoint":null,"id":187,"parameterSlots":0,"returnSlots":0},"@PAYOUTADDRESS_ROLE_6829":{"entryPoint":null,"id":6829,"parameterSlots":0,"returnSlots":0},"@_add_2880":{"entryPoint":5253,"id":2880,"parameterSlots":2,"returnSlots":1},"@_at_3014":{"entryPoint":4747,"id":3014,"parameterSlots":2,"returnSlots":1},"@_authorizeUpgrade_6908":{"entryPoint":3644,"id":6908,"parameterSlots":1,"returnSlots":0},"@_checkRole_252":{"entryPoint":3527,"id":252,"parameterSlots":1,"returnSlots":0},"@_checkRole_291":{"entryPoint":4149,"id":291,"parameterSlots":2,"returnSlots":0},"@_contains_2983":{"entryPoint":null,"id":2983,"parameterSlots":2,"returnSlots":1},"@_functionDelegateCall_951":{"entryPoint":5661,"id":951,"parameterSlots":2,"returnSlots":1},"@_getImplementation_635":{"entryPoint":3615,"id":635,"parameterSlots":0,"returnSlots":1},"@_grantRole_114":{"entryPoint":3539,"id":114,"parameterSlots":2,"returnSlots":0},"@_grantRole_443":{"entryPoint":4249,"id":443,"parameterSlots":2,"returnSlots":0},"@_length_2997":{"entryPoint":null,"id":2997,"parameterSlots":1,"returnSlots":1},"@_msgSender_1656":{"entryPoint":null,"id":1656,"parameterSlots":0,"returnSlots":1},"@_nonReentrantAfter_1339":{"entryPoint":null,"id":1339,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_1331":{"entryPoint":4033,"id":1331,"parameterSlots":0,"returnSlots":0},"@_remove_2964":{"entryPoint":5335,"id":2964,"parameterSlots":2,"returnSlots":1},"@_revert_1628":{"entryPoint":null,"id":1628,"parameterSlots":2,"returnSlots":0},"@_revokeRole_138":{"entryPoint":3577,"id":138,"parameterSlots":2,"returnSlots":0},"@_revokeRole_474":{"entryPoint":4410,"id":474,"parameterSlots":2,"returnSlots":0},"@_setImplementation_659":{"entryPoint":4539,"id":659,"parameterSlots":1,"returnSlots":0},"@_upgradeToAndCallUUPS_755":{"entryPoint":3657,"id":755,"parameterSlots":3,"returnSlots":0},"@_upgradeToAndCall_702":{"entryPoint":4698,"id":702,"parameterSlots":3,"returnSlots":0},"@_upgradeTo_674":{"entryPoint":5595,"id":674,"parameterSlots":1,"returnSlots":0},"@add_3180":{"entryPoint":4387,"id":3180,"parameterSlots":2,"returnSlots":1},"@at_3276":{"entryPoint":4124,"id":3276,"parameterSlots":2,"returnSlots":1},"@createFunding_6961":{"entryPoint":2544,"id":6961,"parameterSlots":4,"returnSlots":0},"@getAddressSlot_1697":{"entryPoint":null,"id":1697,"parameterSlots":1,"returnSlots":1},"@getAddress_7057":{"entryPoint":null,"id":7057,"parameterSlots":1,"returnSlots":1},"@getBooleanSlot_1708":{"entryPoint":null,"id":1708,"parameterSlots":1,"returnSlots":1},"@getRoleAdmin_306":{"entryPoint":null,"id":306,"parameterSlots":1,"returnSlots":1},"@getRoleMemberCount_90":{"entryPoint":3079,"id":90,"parameterSlots":1,"returnSlots":1},"@getRoleMember_74":{"entryPoint":2906,"id":74,"parameterSlots":2,"returnSlots":1},"@grantRole_326":{"entryPoint":1326,"id":326,"parameterSlots":2,"returnSlots":0},"@hasRole_239":{"entryPoint":2939,"id":239,"parameterSlots":2,"returnSlots":1},"@initialize_6898":{"entryPoint":3145,"id":6898,"parameterSlots":2,"returnSlots":0},"@isContract_1363":{"entryPoint":null,"id":1363,"parameterSlots":1,"returnSlots":1},"@length_3249":{"entryPoint":4138,"id":3249,"parameterSlots":1,"returnSlots":1},"@proxiableUUID_1217":{"entryPoint":2367,"id":1217,"parameterSlots":0,"returnSlots":1},"@remove_3207":{"entryPoint":4516,"id":3207,"parameterSlots":2,"returnSlots":1},"@renounceRole_369":{"entryPoint":1575,"id":369,"parameterSlots":2,"returnSlots":0},"@revokeRole_346":{"entryPoint":3104,"id":346,"parameterSlots":2,"returnSlots":0},"@s_contractBalance_6824":{"entryPoint":null,"id":6824,"parameterSlots":0,"returnSlots":0},"@s_creationFee_6814":{"entryPoint":null,"id":6814,"parameterSlots":0,"returnSlots":0},"@s_fundingId_6818":{"entryPoint":null,"id":6818,"parameterSlots":0,"returnSlots":0},"@s_payoutAddress_6816":{"entryPoint":null,"id":6816,"parameterSlots":0,"returnSlots":0},"@setCreationFee_7018":{"entryPoint":2982,"id":7018,"parameterSlots":1,"returnSlots":0},"@setPayoutAddress_7045":{"entryPoint":1372,"id":7045,"parameterSlots":1,"returnSlots":0},"@supportsInterface_1944":{"entryPoint":null,"id":1944,"parameterSlots":1,"returnSlots":1},"@supportsInterface_220":{"entryPoint":3472,"id":220,"parameterSlots":1,"returnSlots":1},"@supportsInterface_55":{"entryPoint":1280,"id":55,"parameterSlots":1,"returnSlots":1},"@toHexString_1885":{"entryPoint":4811,"id":1885,"parameterSlots":2,"returnSlots":1},"@toHexString_1905":{"entryPoint":4792,"id":1905,"parameterSlots":1,"returnSlots":1},"@upgradeToAndCall_1260":{"entryPoint":2174,"id":1260,"parameterSlots":2,"returnSlots":0},"@upgradeTo_1239":{"entryPoint":1705,"id":1239,"parameterSlots":1,"returnSlots":0},"@verifyCallResult_1608":{"entryPoint":5914,"id":1608,"parameterSlots":3,"returnSlots":1},"@withdraw_7001":{"entryPoint":1917,"id":7001,"parameterSlots":0,"returnSlots":0},"abi_decode_address":{"entryPoint":6066,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":6142,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_bytes_memory_ptr":{"entryPoint":6194,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":6040,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":6731,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":6095,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_uint256":{"entryPoint":6472,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":5996,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256t_uint256t_bool":{"entryPoint":6400,"id":null,"parameterSlots":2,"returnSlots":4},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7081,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":6795,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6910,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_21415e4349d1d27609f971b65ed4c87aef0e304d0705032b247c442bd4ec2072__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24c0e956a159feb2ac84b582d392e2325a54e0a1d750c41d2e74e5393c8e2b77__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6507,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_507506d6dbc7d562955ba471fe833da5430ee86b7ddae778fc83312f942b6980__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6583,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":6709,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":6985,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":7037,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":6757,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":7011,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":6681,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":6659,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x31":{"entryPoint":7059,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":6963,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6172,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:13646:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:217:33","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:33"},"nodeType":"YulFunctionCall","src":"131:12:33"},"nodeType":"YulExpressionStatement","src":"131:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:33"},"nodeType":"YulFunctionCall","src":"100:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:33"},"nodeType":"YulFunctionCall","src":"96:32:33"},"nodeType":"YulIf","src":"93:52:33"},{"nodeType":"YulVariableDeclaration","src":"154:36:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:33"},"nodeType":"YulFunctionCall","src":"167:23:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"254:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"263:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"266:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"256:6:33"},"nodeType":"YulFunctionCall","src":"256:12:33"},"nodeType":"YulExpressionStatement","src":"256:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"234:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"239:10:33","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"230:3:33"},"nodeType":"YulFunctionCall","src":"230:20:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:33"},"nodeType":"YulFunctionCall","src":"219:32:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:33"},"nodeType":"YulFunctionCall","src":"209:43:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:33"},"nodeType":"YulFunctionCall","src":"202:51:33"},"nodeType":"YulIf","src":"199:71:33"},{"nodeType":"YulAssignment","src":"279:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"289:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"279:6:33"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:33","type":""}],"src":"14:286:33"},{"body":{"nodeType":"YulBlock","src":"400:92:33","statements":[{"nodeType":"YulAssignment","src":"410:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"422:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"433:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"418:3:33"},"nodeType":"YulFunctionCall","src":"418:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"410:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"452:9:33"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"470:6:33"},"nodeType":"YulFunctionCall","src":"470:14:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"463:6:33"},"nodeType":"YulFunctionCall","src":"463:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"445:6:33"},"nodeType":"YulFunctionCall","src":"445:41:33"},"nodeType":"YulExpressionStatement","src":"445:41:33"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"369:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"380:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"391:4:33","type":""}],"src":"305:187:33"},{"body":{"nodeType":"YulBlock","src":"598:102:33","statements":[{"nodeType":"YulAssignment","src":"608:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"620:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"631:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"616:3:33"},"nodeType":"YulFunctionCall","src":"616:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"608:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"650:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"665:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"681:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"686:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"677:3:33"},"nodeType":"YulFunctionCall","src":"677:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"690:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"673:3:33"},"nodeType":"YulFunctionCall","src":"673:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"661:3:33"},"nodeType":"YulFunctionCall","src":"661:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"643:6:33"},"nodeType":"YulFunctionCall","src":"643:51:33"},"nodeType":"YulExpressionStatement","src":"643:51:33"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"567:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"578:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"589:4:33","type":""}],"src":"497:203:33"},{"body":{"nodeType":"YulBlock","src":"775:110:33","statements":[{"body":{"nodeType":"YulBlock","src":"821:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"830:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"833:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"823:6:33"},"nodeType":"YulFunctionCall","src":"823:12:33"},"nodeType":"YulExpressionStatement","src":"823:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"796:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"805:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"792:3:33"},"nodeType":"YulFunctionCall","src":"792:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"817:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"788:3:33"},"nodeType":"YulFunctionCall","src":"788:32:33"},"nodeType":"YulIf","src":"785:52:33"},{"nodeType":"YulAssignment","src":"846:33:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"869:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"856:12:33"},"nodeType":"YulFunctionCall","src":"856:23:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"846:6:33"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"741:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"752:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"764:6:33","type":""}],"src":"705:180:33"},{"body":{"nodeType":"YulBlock","src":"991:76:33","statements":[{"nodeType":"YulAssignment","src":"1001:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1013:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1024:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1009:3:33"},"nodeType":"YulFunctionCall","src":"1009:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1001:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1043:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"1054:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1036:6:33"},"nodeType":"YulFunctionCall","src":"1036:25:33"},"nodeType":"YulExpressionStatement","src":"1036:25:33"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"960:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"971:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"982:4:33","type":""}],"src":"890:177:33"},{"body":{"nodeType":"YulBlock","src":"1121:124:33","statements":[{"nodeType":"YulAssignment","src":"1131:29:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1153:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1140:12:33"},"nodeType":"YulFunctionCall","src":"1140:20:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1131:5:33"}]},{"body":{"nodeType":"YulBlock","src":"1223:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1232:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1235:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1225:6:33"},"nodeType":"YulFunctionCall","src":"1225:12:33"},"nodeType":"YulExpressionStatement","src":"1225:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1182:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1193:5:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1208:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1213:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1204:3:33"},"nodeType":"YulFunctionCall","src":"1204:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"1217:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1200:3:33"},"nodeType":"YulFunctionCall","src":"1200:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1189:3:33"},"nodeType":"YulFunctionCall","src":"1189:31:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1179:2:33"},"nodeType":"YulFunctionCall","src":"1179:42:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1172:6:33"},"nodeType":"YulFunctionCall","src":"1172:50:33"},"nodeType":"YulIf","src":"1169:70:33"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1100:6:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1111:5:33","type":""}],"src":"1072:173:33"},{"body":{"nodeType":"YulBlock","src":"1337:167:33","statements":[{"body":{"nodeType":"YulBlock","src":"1383:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1392:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1395:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1385:6:33"},"nodeType":"YulFunctionCall","src":"1385:12:33"},"nodeType":"YulExpressionStatement","src":"1385:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1358:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"1367:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1354:3:33"},"nodeType":"YulFunctionCall","src":"1354:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"1379:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1350:3:33"},"nodeType":"YulFunctionCall","src":"1350:32:33"},"nodeType":"YulIf","src":"1347:52:33"},{"nodeType":"YulAssignment","src":"1408:33:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1431:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1418:12:33"},"nodeType":"YulFunctionCall","src":"1418:23:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1408:6:33"}]},{"nodeType":"YulAssignment","src":"1450:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1483:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1494:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1479:3:33"},"nodeType":"YulFunctionCall","src":"1479:18:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1460:18:33"},"nodeType":"YulFunctionCall","src":"1460:38:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1450:6:33"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1295:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1306:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1318:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1326:6:33","type":""}],"src":"1250:254:33"},{"body":{"nodeType":"YulBlock","src":"1579:116:33","statements":[{"body":{"nodeType":"YulBlock","src":"1625:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1634:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1637:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1627:6:33"},"nodeType":"YulFunctionCall","src":"1627:12:33"},"nodeType":"YulExpressionStatement","src":"1627:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1600:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"1609:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1596:3:33"},"nodeType":"YulFunctionCall","src":"1596:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"1621:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1592:3:33"},"nodeType":"YulFunctionCall","src":"1592:32:33"},"nodeType":"YulIf","src":"1589:52:33"},{"nodeType":"YulAssignment","src":"1650:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1679:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1660:18:33"},"nodeType":"YulFunctionCall","src":"1660:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1650:6:33"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1545:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1556:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1568:6:33","type":""}],"src":"1509:186:33"},{"body":{"nodeType":"YulBlock","src":"1732:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1749:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1756:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1761:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1752:3:33"},"nodeType":"YulFunctionCall","src":"1752:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1742:6:33"},"nodeType":"YulFunctionCall","src":"1742:31:33"},"nodeType":"YulExpressionStatement","src":"1742:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1789:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1792:4:33","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1782:6:33"},"nodeType":"YulFunctionCall","src":"1782:15:33"},"nodeType":"YulExpressionStatement","src":"1782:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1813:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1816:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1806:6:33"},"nodeType":"YulFunctionCall","src":"1806:15:33"},"nodeType":"YulExpressionStatement","src":"1806:15:33"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1700:127:33"},{"body":{"nodeType":"YulBlock","src":"1928:899:33","statements":[{"body":{"nodeType":"YulBlock","src":"1974:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1983:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1986:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1976:6:33"},"nodeType":"YulFunctionCall","src":"1976:12:33"},"nodeType":"YulExpressionStatement","src":"1976:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1949:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"1958:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1945:3:33"},"nodeType":"YulFunctionCall","src":"1945:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"1970:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1941:3:33"},"nodeType":"YulFunctionCall","src":"1941:32:33"},"nodeType":"YulIf","src":"1938:52:33"},{"nodeType":"YulAssignment","src":"1999:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2028:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2009:18:33"},"nodeType":"YulFunctionCall","src":"2009:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1999:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"2047:46:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2078:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2089:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2074:3:33"},"nodeType":"YulFunctionCall","src":"2074:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2061:12:33"},"nodeType":"YulFunctionCall","src":"2061:32:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2051:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2102:28:33","value":{"kind":"number","nodeType":"YulLiteral","src":"2112:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2106:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2157:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2166:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2169:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2159:6:33"},"nodeType":"YulFunctionCall","src":"2159:12:33"},"nodeType":"YulExpressionStatement","src":"2159:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2145:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"2153:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2142:2:33"},"nodeType":"YulFunctionCall","src":"2142:14:33"},"nodeType":"YulIf","src":"2139:34:33"},{"nodeType":"YulVariableDeclaration","src":"2182:32:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2196:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"2207:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2192:3:33"},"nodeType":"YulFunctionCall","src":"2192:22:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2186:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2262:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2271:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2274:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2264:6:33"},"nodeType":"YulFunctionCall","src":"2264:12:33"},"nodeType":"YulExpressionStatement","src":"2264:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2241:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"2245:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2237:3:33"},"nodeType":"YulFunctionCall","src":"2237:13:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2252:7:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2233:3:33"},"nodeType":"YulFunctionCall","src":"2233:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2226:6:33"},"nodeType":"YulFunctionCall","src":"2226:35:33"},"nodeType":"YulIf","src":"2223:55:33"},{"nodeType":"YulVariableDeclaration","src":"2287:26:33","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2310:2:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2297:12:33"},"nodeType":"YulFunctionCall","src":"2297:16:33"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"2291:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2336:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2338:16:33"},"nodeType":"YulFunctionCall","src":"2338:18:33"},"nodeType":"YulExpressionStatement","src":"2338:18:33"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2328:2:33"},{"name":"_1","nodeType":"YulIdentifier","src":"2332:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2325:2:33"},"nodeType":"YulFunctionCall","src":"2325:10:33"},"nodeType":"YulIf","src":"2322:36:33"},{"nodeType":"YulVariableDeclaration","src":"2367:17:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2381:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2377:3:33"},"nodeType":"YulFunctionCall","src":"2377:7:33"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"2371:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2393:23:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2413:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2407:5:33"},"nodeType":"YulFunctionCall","src":"2407:9:33"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2397:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2425:71:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2447:6:33"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2471:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"2475:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2467:3:33"},"nodeType":"YulFunctionCall","src":"2467:13:33"},{"name":"_4","nodeType":"YulIdentifier","src":"2482:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2463:3:33"},"nodeType":"YulFunctionCall","src":"2463:22:33"},{"kind":"number","nodeType":"YulLiteral","src":"2487:2:33","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2459:3:33"},"nodeType":"YulFunctionCall","src":"2459:31:33"},{"name":"_4","nodeType":"YulIdentifier","src":"2492:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2455:3:33"},"nodeType":"YulFunctionCall","src":"2455:40:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2443:3:33"},"nodeType":"YulFunctionCall","src":"2443:53:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2429:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2555:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2557:16:33"},"nodeType":"YulFunctionCall","src":"2557:18:33"},"nodeType":"YulExpressionStatement","src":"2557:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2514:10:33"},{"name":"_1","nodeType":"YulIdentifier","src":"2526:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2511:2:33"},"nodeType":"YulFunctionCall","src":"2511:18:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2534:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2546:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2531:2:33"},"nodeType":"YulFunctionCall","src":"2531:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2508:2:33"},"nodeType":"YulFunctionCall","src":"2508:46:33"},"nodeType":"YulIf","src":"2505:72:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2593:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2597:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2586:6:33"},"nodeType":"YulFunctionCall","src":"2586:22:33"},"nodeType":"YulExpressionStatement","src":"2586:22:33"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2624:6:33"},{"name":"_3","nodeType":"YulIdentifier","src":"2632:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2617:6:33"},"nodeType":"YulFunctionCall","src":"2617:18:33"},"nodeType":"YulExpressionStatement","src":"2617:18:33"},{"body":{"nodeType":"YulBlock","src":"2681:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2690:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2693:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2683:6:33"},"nodeType":"YulFunctionCall","src":"2683:12:33"},"nodeType":"YulExpressionStatement","src":"2683:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2658:2:33"},{"name":"_3","nodeType":"YulIdentifier","src":"2662:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2654:3:33"},"nodeType":"YulFunctionCall","src":"2654:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"2667:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2650:3:33"},"nodeType":"YulFunctionCall","src":"2650:20:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2672:7:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2647:2:33"},"nodeType":"YulFunctionCall","src":"2647:33:33"},"nodeType":"YulIf","src":"2644:53:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2723:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2731:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2719:3:33"},"nodeType":"YulFunctionCall","src":"2719:15:33"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2740:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"2744:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2736:3:33"},"nodeType":"YulFunctionCall","src":"2736:11:33"},{"name":"_3","nodeType":"YulIdentifier","src":"2749:2:33"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"2706:12:33"},"nodeType":"YulFunctionCall","src":"2706:46:33"},"nodeType":"YulExpressionStatement","src":"2706:46:33"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2776:6:33"},{"name":"_3","nodeType":"YulIdentifier","src":"2784:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2772:3:33"},"nodeType":"YulFunctionCall","src":"2772:15:33"},{"kind":"number","nodeType":"YulLiteral","src":"2789:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2768:3:33"},"nodeType":"YulFunctionCall","src":"2768:24:33"},{"kind":"number","nodeType":"YulLiteral","src":"2794:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2761:6:33"},"nodeType":"YulFunctionCall","src":"2761:35:33"},"nodeType":"YulExpressionStatement","src":"2761:35:33"},{"nodeType":"YulAssignment","src":"2805:16:33","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"2815:6:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2805:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1886:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1897:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1909:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1917:6:33","type":""}],"src":"1832:995:33"},{"body":{"nodeType":"YulBlock","src":"2933:76:33","statements":[{"nodeType":"YulAssignment","src":"2943:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2955:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2966:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2951:3:33"},"nodeType":"YulFunctionCall","src":"2951:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2943:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2985:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"2996:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2978:6:33"},"nodeType":"YulFunctionCall","src":"2978:25:33"},"nodeType":"YulExpressionStatement","src":"2978:25:33"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2902:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2913:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2924:4:33","type":""}],"src":"2832:177:33"},{"body":{"nodeType":"YulBlock","src":"3132:360:33","statements":[{"body":{"nodeType":"YulBlock","src":"3179:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3188:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3191:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3181:6:33"},"nodeType":"YulFunctionCall","src":"3181:12:33"},"nodeType":"YulExpressionStatement","src":"3181:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3153:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"3162:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3149:3:33"},"nodeType":"YulFunctionCall","src":"3149:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"3174:3:33","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3145:3:33"},"nodeType":"YulFunctionCall","src":"3145:33:33"},"nodeType":"YulIf","src":"3142:53:33"},{"nodeType":"YulAssignment","src":"3204:33:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3227:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3214:12:33"},"nodeType":"YulFunctionCall","src":"3214:23:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3204:6:33"}]},{"nodeType":"YulAssignment","src":"3246:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3273:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3284:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3269:3:33"},"nodeType":"YulFunctionCall","src":"3269:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3256:12:33"},"nodeType":"YulFunctionCall","src":"3256:32:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3246:6:33"}]},{"nodeType":"YulAssignment","src":"3297:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3324:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3335:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3320:3:33"},"nodeType":"YulFunctionCall","src":"3320:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3307:12:33"},"nodeType":"YulFunctionCall","src":"3307:32:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3297:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"3348:45:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3378:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3389:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3374:3:33"},"nodeType":"YulFunctionCall","src":"3374:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3361:12:33"},"nodeType":"YulFunctionCall","src":"3361:32:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3352:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3446:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3455:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3458:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3448:6:33"},"nodeType":"YulFunctionCall","src":"3448:12:33"},"nodeType":"YulExpressionStatement","src":"3448:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3415:5:33"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3436:5:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3429:6:33"},"nodeType":"YulFunctionCall","src":"3429:13:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3422:6:33"},"nodeType":"YulFunctionCall","src":"3422:21:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3412:2:33"},"nodeType":"YulFunctionCall","src":"3412:32:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3405:6:33"},"nodeType":"YulFunctionCall","src":"3405:40:33"},"nodeType":"YulIf","src":"3402:60:33"},{"nodeType":"YulAssignment","src":"3471:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"3481:5:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3471:6:33"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3074:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3085:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3097:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3105:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3113:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3121:6:33","type":""}],"src":"3014:478:33"},{"body":{"nodeType":"YulBlock","src":"3584:161:33","statements":[{"body":{"nodeType":"YulBlock","src":"3630:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3639:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3642:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3632:6:33"},"nodeType":"YulFunctionCall","src":"3632:12:33"},"nodeType":"YulExpressionStatement","src":"3632:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3605:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"3614:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3601:3:33"},"nodeType":"YulFunctionCall","src":"3601:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"3626:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3597:3:33"},"nodeType":"YulFunctionCall","src":"3597:32:33"},"nodeType":"YulIf","src":"3594:52:33"},{"nodeType":"YulAssignment","src":"3655:33:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3678:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3665:12:33"},"nodeType":"YulFunctionCall","src":"3665:23:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3655:6:33"}]},{"nodeType":"YulAssignment","src":"3697:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3724:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3735:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3720:3:33"},"nodeType":"YulFunctionCall","src":"3720:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3707:12:33"},"nodeType":"YulFunctionCall","src":"3707:32:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3697:6:33"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3542:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3553:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3565:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3573:6:33","type":""}],"src":"3497:248:33"},{"body":{"nodeType":"YulBlock","src":"3820:110:33","statements":[{"body":{"nodeType":"YulBlock","src":"3866:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3875:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3878:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3868:6:33"},"nodeType":"YulFunctionCall","src":"3868:12:33"},"nodeType":"YulExpressionStatement","src":"3868:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3841:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"3850:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3837:3:33"},"nodeType":"YulFunctionCall","src":"3837:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"3862:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3833:3:33"},"nodeType":"YulFunctionCall","src":"3833:32:33"},"nodeType":"YulIf","src":"3830:52:33"},{"nodeType":"YulAssignment","src":"3891:33:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3914:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3901:12:33"},"nodeType":"YulFunctionCall","src":"3901:23:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3891:6:33"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3786:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3797:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3809:6:33","type":""}],"src":"3750:180:33"},{"body":{"nodeType":"YulBlock","src":"4022:167:33","statements":[{"body":{"nodeType":"YulBlock","src":"4068:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4077:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4080:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4070:6:33"},"nodeType":"YulFunctionCall","src":"4070:12:33"},"nodeType":"YulExpressionStatement","src":"4070:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4043:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"4052:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4039:3:33"},"nodeType":"YulFunctionCall","src":"4039:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"4064:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4035:3:33"},"nodeType":"YulFunctionCall","src":"4035:32:33"},"nodeType":"YulIf","src":"4032:52:33"},{"nodeType":"YulAssignment","src":"4093:33:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4116:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4103:12:33"},"nodeType":"YulFunctionCall","src":"4103:23:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4093:6:33"}]},{"nodeType":"YulAssignment","src":"4135:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4168:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4179:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4164:3:33"},"nodeType":"YulFunctionCall","src":"4164:18:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4145:18:33"},"nodeType":"YulFunctionCall","src":"4145:38:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4135:6:33"}]}]},"name":"abi_decode_tuple_t_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3980:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3991:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4003:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4011:6:33","type":""}],"src":"3935:254:33"},{"body":{"nodeType":"YulBlock","src":"4368:170:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4385:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4396:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4378:6:33"},"nodeType":"YulFunctionCall","src":"4378:21:33"},"nodeType":"YulExpressionStatement","src":"4378:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4419:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4430:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4415:3:33"},"nodeType":"YulFunctionCall","src":"4415:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"4435:2:33","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4408:6:33"},"nodeType":"YulFunctionCall","src":"4408:30:33"},"nodeType":"YulExpressionStatement","src":"4408:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4458:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4469:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4454:3:33"},"nodeType":"YulFunctionCall","src":"4454:18:33"},{"hexValue":"416464726573732063616e74206265207a65726f","kind":"string","nodeType":"YulLiteral","src":"4474:22:33","type":"","value":"Address cant be zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4447:6:33"},"nodeType":"YulFunctionCall","src":"4447:50:33"},"nodeType":"YulExpressionStatement","src":"4447:50:33"},{"nodeType":"YulAssignment","src":"4506:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4518:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4529:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4514:3:33"},"nodeType":"YulFunctionCall","src":"4514:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4506:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_507506d6dbc7d562955ba471fe833da5430ee86b7ddae778fc83312f942b6980__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4345:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4359:4:33","type":""}],"src":"4194:344:33"},{"body":{"nodeType":"YulBlock","src":"4717:237:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4734:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4745:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4727:6:33"},"nodeType":"YulFunctionCall","src":"4727:21:33"},"nodeType":"YulExpressionStatement","src":"4727:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4768:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4779:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4764:3:33"},"nodeType":"YulFunctionCall","src":"4764:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"4784:2:33","type":"","value":"47"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4757:6:33"},"nodeType":"YulFunctionCall","src":"4757:30:33"},"nodeType":"YulExpressionStatement","src":"4757:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4807:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4818:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4803:3:33"},"nodeType":"YulFunctionCall","src":"4803:18:33"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"4823:34:33","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4796:6:33"},"nodeType":"YulFunctionCall","src":"4796:62:33"},"nodeType":"YulExpressionStatement","src":"4796:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4878:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4889:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4874:3:33"},"nodeType":"YulFunctionCall","src":"4874:18:33"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"4894:17:33","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4867:6:33"},"nodeType":"YulFunctionCall","src":"4867:45:33"},"nodeType":"YulExpressionStatement","src":"4867:45:33"},{"nodeType":"YulAssignment","src":"4921:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4933:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4944:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4929:3:33"},"nodeType":"YulFunctionCall","src":"4929:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4921:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4694:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4708:4:33","type":""}],"src":"4543:411:33"},{"body":{"nodeType":"YulBlock","src":"5133:234:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5150:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5161:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5143:6:33"},"nodeType":"YulFunctionCall","src":"5143:21:33"},"nodeType":"YulExpressionStatement","src":"5143:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5184:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5195:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5180:3:33"},"nodeType":"YulFunctionCall","src":"5180:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"5200:2:33","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5173:6:33"},"nodeType":"YulFunctionCall","src":"5173:30:33"},"nodeType":"YulExpressionStatement","src":"5173:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5223:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5234:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5219:3:33"},"nodeType":"YulFunctionCall","src":"5219:18:33"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nodeType":"YulLiteral","src":"5239:34:33","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5212:6:33"},"nodeType":"YulFunctionCall","src":"5212:62:33"},"nodeType":"YulExpressionStatement","src":"5212:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5294:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5305:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5290:3:33"},"nodeType":"YulFunctionCall","src":"5290:18:33"},{"hexValue":"64656c656761746563616c6c","kind":"string","nodeType":"YulLiteral","src":"5310:14:33","type":"","value":"delegatecall"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5283:6:33"},"nodeType":"YulFunctionCall","src":"5283:42:33"},"nodeType":"YulExpressionStatement","src":"5283:42:33"},{"nodeType":"YulAssignment","src":"5334:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5346:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5357:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5342:3:33"},"nodeType":"YulFunctionCall","src":"5342:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5334:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5110:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5124:4:33","type":""}],"src":"4959:408:33"},{"body":{"nodeType":"YulBlock","src":"5546:234:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5563:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5574:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5556:6:33"},"nodeType":"YulFunctionCall","src":"5556:21:33"},"nodeType":"YulExpressionStatement","src":"5556:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5597:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5608:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5593:3:33"},"nodeType":"YulFunctionCall","src":"5593:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"5613:2:33","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5586:6:33"},"nodeType":"YulFunctionCall","src":"5586:30:33"},"nodeType":"YulExpressionStatement","src":"5586:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5636:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5647:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5632:3:33"},"nodeType":"YulFunctionCall","src":"5632:18:33"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nodeType":"YulLiteral","src":"5652:34:33","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5625:6:33"},"nodeType":"YulFunctionCall","src":"5625:62:33"},"nodeType":"YulExpressionStatement","src":"5625:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5707:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5718:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5703:3:33"},"nodeType":"YulFunctionCall","src":"5703:18:33"},{"hexValue":"6163746976652070726f7879","kind":"string","nodeType":"YulLiteral","src":"5723:14:33","type":"","value":"active proxy"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5696:6:33"},"nodeType":"YulFunctionCall","src":"5696:42:33"},"nodeType":"YulExpressionStatement","src":"5696:42:33"},{"nodeType":"YulAssignment","src":"5747:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5759:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5770:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5755:3:33"},"nodeType":"YulFunctionCall","src":"5755:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5747:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5523:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5537:4:33","type":""}],"src":"5372:408:33"},{"body":{"nodeType":"YulBlock","src":"5976:14:33","statements":[{"nodeType":"YulAssignment","src":"5978:10:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"5985:3:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5978:3:33"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5960:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5968:3:33","type":""}],"src":"5785:205:33"},{"body":{"nodeType":"YulBlock","src":"6169:174:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6186:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6197:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6179:6:33"},"nodeType":"YulFunctionCall","src":"6179:21:33"},"nodeType":"YulExpressionStatement","src":"6179:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6220:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6231:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6216:3:33"},"nodeType":"YulFunctionCall","src":"6216:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"6236:2:33","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6209:6:33"},"nodeType":"YulFunctionCall","src":"6209:30:33"},"nodeType":"YulExpressionStatement","src":"6209:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6259:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6270:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6255:3:33"},"nodeType":"YulFunctionCall","src":"6255:18:33"},{"hexValue":"5769746864726177206e6f74207375636365737366756c6c","kind":"string","nodeType":"YulLiteral","src":"6275:26:33","type":"","value":"Withdraw not successfull"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6248:6:33"},"nodeType":"YulFunctionCall","src":"6248:54:33"},"nodeType":"YulExpressionStatement","src":"6248:54:33"},{"nodeType":"YulAssignment","src":"6311:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6323:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6334:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6319:3:33"},"nodeType":"YulFunctionCall","src":"6319:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6311:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_24c0e956a159feb2ac84b582d392e2325a54e0a1d750c41d2e74e5393c8e2b77__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6146:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6160:4:33","type":""}],"src":"5995:348:33"},{"body":{"nodeType":"YulBlock","src":"6522:246:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6539:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6550:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6532:6:33"},"nodeType":"YulFunctionCall","src":"6532:21:33"},"nodeType":"YulExpressionStatement","src":"6532:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6573:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6584:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6569:3:33"},"nodeType":"YulFunctionCall","src":"6569:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"6589:2:33","type":"","value":"56"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6562:6:33"},"nodeType":"YulFunctionCall","src":"6562:30:33"},"nodeType":"YulExpressionStatement","src":"6562:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6612:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6623:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6608:3:33"},"nodeType":"YulFunctionCall","src":"6608:18:33"},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c","kind":"string","nodeType":"YulLiteral","src":"6628:34:33","type":"","value":"UUPSUpgradeable: must not be cal"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6601:6:33"},"nodeType":"YulFunctionCall","src":"6601:62:33"},"nodeType":"YulExpressionStatement","src":"6601:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6683:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6694:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6679:3:33"},"nodeType":"YulFunctionCall","src":"6679:18:33"},{"hexValue":"6c6564207468726f7567682064656c656761746563616c6c","kind":"string","nodeType":"YulLiteral","src":"6699:26:33","type":"","value":"led through delegatecall"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6672:6:33"},"nodeType":"YulFunctionCall","src":"6672:54:33"},"nodeType":"YulExpressionStatement","src":"6672:54:33"},{"nodeType":"YulAssignment","src":"6735:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6747:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6758:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6743:3:33"},"nodeType":"YulFunctionCall","src":"6743:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6735:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6499:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6513:4:33","type":""}],"src":"6348:420:33"},{"body":{"nodeType":"YulBlock","src":"6947:243:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6964:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6975:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6957:6:33"},"nodeType":"YulFunctionCall","src":"6957:21:33"},"nodeType":"YulExpressionStatement","src":"6957:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6998:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7009:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6994:3:33"},"nodeType":"YulFunctionCall","src":"6994:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"7014:2:33","type":"","value":"53"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6987:6:33"},"nodeType":"YulFunctionCall","src":"6987:30:33"},"nodeType":"YulExpressionStatement","src":"6987:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7037:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7048:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7033:3:33"},"nodeType":"YulFunctionCall","src":"7033:18:33"},{"hexValue":"45746865722073656e742073686f756c6420626520657175616c206f72206d6f","kind":"string","nodeType":"YulLiteral","src":"7053:34:33","type":"","value":"Ether sent should be equal or mo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7026:6:33"},"nodeType":"YulFunctionCall","src":"7026:62:33"},"nodeType":"YulExpressionStatement","src":"7026:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7108:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7119:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7104:3:33"},"nodeType":"YulFunctionCall","src":"7104:18:33"},{"hexValue":"7265207468616e206372656174696f6e2066656573","kind":"string","nodeType":"YulLiteral","src":"7124:23:33","type":"","value":"re than creation fees"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7097:6:33"},"nodeType":"YulFunctionCall","src":"7097:51:33"},"nodeType":"YulExpressionStatement","src":"7097:51:33"},{"nodeType":"YulAssignment","src":"7157:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7169:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7180:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7165:3:33"},"nodeType":"YulFunctionCall","src":"7165:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7157:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_21415e4349d1d27609f971b65ed4c87aef0e304d0705032b247c442bd4ec2072__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6924:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6938:4:33","type":""}],"src":"6773:417:33"},{"body":{"nodeType":"YulBlock","src":"7374:222:33","statements":[{"nodeType":"YulAssignment","src":"7384:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7396:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7407:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7392:3:33"},"nodeType":"YulFunctionCall","src":"7392:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7384:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7427:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"7438:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7420:6:33"},"nodeType":"YulFunctionCall","src":"7420:25:33"},"nodeType":"YulExpressionStatement","src":"7420:25:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7465:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7476:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7461:3:33"},"nodeType":"YulFunctionCall","src":"7461:18:33"},{"name":"value1","nodeType":"YulIdentifier","src":"7481:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7454:6:33"},"nodeType":"YulFunctionCall","src":"7454:34:33"},"nodeType":"YulExpressionStatement","src":"7454:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7508:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7519:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7504:3:33"},"nodeType":"YulFunctionCall","src":"7504:18:33"},{"name":"value2","nodeType":"YulIdentifier","src":"7524:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7497:6:33"},"nodeType":"YulFunctionCall","src":"7497:34:33"},"nodeType":"YulExpressionStatement","src":"7497:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7551:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7562:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7547:3:33"},"nodeType":"YulFunctionCall","src":"7547:18:33"},{"arguments":[{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"7581:6:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7574:6:33"},"nodeType":"YulFunctionCall","src":"7574:14:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7567:6:33"},"nodeType":"YulFunctionCall","src":"7567:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7540:6:33"},"nodeType":"YulFunctionCall","src":"7540:50:33"},"nodeType":"YulExpressionStatement","src":"7540:50:33"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7319:9:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7330:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7338:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7346:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7354:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7365:4:33","type":""}],"src":"7195:401:33"},{"body":{"nodeType":"YulBlock","src":"7633:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7650:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7657:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"7662:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7653:3:33"},"nodeType":"YulFunctionCall","src":"7653:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7643:6:33"},"nodeType":"YulFunctionCall","src":"7643:31:33"},"nodeType":"YulExpressionStatement","src":"7643:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7690:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7693:4:33","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7683:6:33"},"nodeType":"YulFunctionCall","src":"7683:15:33"},"nodeType":"YulExpressionStatement","src":"7683:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7714:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7717:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7707:6:33"},"nodeType":"YulFunctionCall","src":"7707:15:33"},"nodeType":"YulExpressionStatement","src":"7707:15:33"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"7601:127:33"},{"body":{"nodeType":"YulBlock","src":"7780:88:33","statements":[{"body":{"nodeType":"YulBlock","src":"7811:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"7813:16:33"},"nodeType":"YulFunctionCall","src":"7813:18:33"},"nodeType":"YulExpressionStatement","src":"7813:18:33"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7796:5:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7807:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7803:3:33"},"nodeType":"YulFunctionCall","src":"7803:6:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7793:2:33"},"nodeType":"YulFunctionCall","src":"7793:17:33"},"nodeType":"YulIf","src":"7790:43:33"},{"nodeType":"YulAssignment","src":"7842:20:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7853:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"7860:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7849:3:33"},"nodeType":"YulFunctionCall","src":"7849:13:33"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"7842:3:33"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7762:5:33","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"7772:3:33","type":""}],"src":"7733:135:33"},{"body":{"nodeType":"YulBlock","src":"7921:77:33","statements":[{"nodeType":"YulAssignment","src":"7931:16:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7942:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"7945:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7938:3:33"},"nodeType":"YulFunctionCall","src":"7938:9:33"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"7931:3:33"}]},{"body":{"nodeType":"YulBlock","src":"7970:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"7972:16:33"},"nodeType":"YulFunctionCall","src":"7972:18:33"},"nodeType":"YulExpressionStatement","src":"7972:18:33"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7962:1:33"},{"name":"sum","nodeType":"YulIdentifier","src":"7965:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7959:2:33"},"nodeType":"YulFunctionCall","src":"7959:10:33"},"nodeType":"YulIf","src":"7956:36:33"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"7904:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"7907:1:33","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"7913:3:33","type":""}],"src":"7873:125:33"},{"body":{"nodeType":"YulBlock","src":"8177:236:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8194:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8205:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8187:6:33"},"nodeType":"YulFunctionCall","src":"8187:21:33"},"nodeType":"YulExpressionStatement","src":"8187:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8228:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8239:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8224:3:33"},"nodeType":"YulFunctionCall","src":"8224:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"8244:2:33","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8217:6:33"},"nodeType":"YulFunctionCall","src":"8217:30:33"},"nodeType":"YulExpressionStatement","src":"8217:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8267:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8278:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8263:3:33"},"nodeType":"YulFunctionCall","src":"8263:18:33"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"8283:34:33","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8256:6:33"},"nodeType":"YulFunctionCall","src":"8256:62:33"},"nodeType":"YulExpressionStatement","src":"8256:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8338:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8349:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8334:3:33"},"nodeType":"YulFunctionCall","src":"8334:18:33"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"8354:16:33","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8327:6:33"},"nodeType":"YulFunctionCall","src":"8327:44:33"},"nodeType":"YulExpressionStatement","src":"8327:44:33"},{"nodeType":"YulAssignment","src":"8380:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8392:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8403:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8388:3:33"},"nodeType":"YulFunctionCall","src":"8388:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8380:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8154:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8168:4:33","type":""}],"src":"8003:410:33"},{"body":{"nodeType":"YulBlock","src":"8525:87:33","statements":[{"nodeType":"YulAssignment","src":"8535:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8547:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8558:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8543:3:33"},"nodeType":"YulFunctionCall","src":"8543:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8535:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8577:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8592:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"8600:4:33","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8588:3:33"},"nodeType":"YulFunctionCall","src":"8588:17:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8570:6:33"},"nodeType":"YulFunctionCall","src":"8570:36:33"},"nodeType":"YulExpressionStatement","src":"8570:36:33"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8494:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8505:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8516:4:33","type":""}],"src":"8418:194:33"},{"body":{"nodeType":"YulBlock","src":"8698:103:33","statements":[{"body":{"nodeType":"YulBlock","src":"8744:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8753:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8756:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8746:6:33"},"nodeType":"YulFunctionCall","src":"8746:12:33"},"nodeType":"YulExpressionStatement","src":"8746:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8719:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"8728:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8715:3:33"},"nodeType":"YulFunctionCall","src":"8715:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"8740:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8711:3:33"},"nodeType":"YulFunctionCall","src":"8711:32:33"},"nodeType":"YulIf","src":"8708:52:33"},{"nodeType":"YulAssignment","src":"8769:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8785:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8779:5:33"},"nodeType":"YulFunctionCall","src":"8779:16:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8769:6:33"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8664:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8675:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8687:6:33","type":""}],"src":"8617:184:33"},{"body":{"nodeType":"YulBlock","src":"8980:236:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8997:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9008:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8990:6:33"},"nodeType":"YulFunctionCall","src":"8990:21:33"},"nodeType":"YulExpressionStatement","src":"8990:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9031:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9042:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9027:3:33"},"nodeType":"YulFunctionCall","src":"9027:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"9047:2:33","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9020:6:33"},"nodeType":"YulFunctionCall","src":"9020:30:33"},"nodeType":"YulExpressionStatement","src":"9020:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9070:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9081:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9066:3:33"},"nodeType":"YulFunctionCall","src":"9066:18:33"},{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e74617469","kind":"string","nodeType":"YulLiteral","src":"9086:34:33","type":"","value":"ERC1967Upgrade: new implementati"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9059:6:33"},"nodeType":"YulFunctionCall","src":"9059:62:33"},"nodeType":"YulExpressionStatement","src":"9059:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9141:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9152:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9137:3:33"},"nodeType":"YulFunctionCall","src":"9137:18:33"},{"hexValue":"6f6e206973206e6f742055555053","kind":"string","nodeType":"YulLiteral","src":"9157:16:33","type":"","value":"on is not UUPS"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9130:6:33"},"nodeType":"YulFunctionCall","src":"9130:44:33"},"nodeType":"YulExpressionStatement","src":"9130:44:33"},{"nodeType":"YulAssignment","src":"9183:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9195:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9206:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9191:3:33"},"nodeType":"YulFunctionCall","src":"9191:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9183:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8957:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8971:4:33","type":""}],"src":"8806:410:33"},{"body":{"nodeType":"YulBlock","src":"9395:231:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9412:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9423:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9405:6:33"},"nodeType":"YulFunctionCall","src":"9405:21:33"},"nodeType":"YulExpressionStatement","src":"9405:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9446:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9457:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9442:3:33"},"nodeType":"YulFunctionCall","src":"9442:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"9462:2:33","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9435:6:33"},"nodeType":"YulFunctionCall","src":"9435:30:33"},"nodeType":"YulExpressionStatement","src":"9435:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9485:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9496:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9481:3:33"},"nodeType":"YulFunctionCall","src":"9481:18:33"},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f78","kind":"string","nodeType":"YulLiteral","src":"9501:34:33","type":"","value":"ERC1967Upgrade: unsupported prox"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9474:6:33"},"nodeType":"YulFunctionCall","src":"9474:62:33"},"nodeType":"YulExpressionStatement","src":"9474:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9556:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9567:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9552:3:33"},"nodeType":"YulFunctionCall","src":"9552:18:33"},{"hexValue":"6961626c6555554944","kind":"string","nodeType":"YulLiteral","src":"9572:11:33","type":"","value":"iableUUID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9545:6:33"},"nodeType":"YulFunctionCall","src":"9545:39:33"},"nodeType":"YulExpressionStatement","src":"9545:39:33"},{"nodeType":"YulAssignment","src":"9593:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9605:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9616:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9601:3:33"},"nodeType":"YulFunctionCall","src":"9601:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9593:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9372:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9386:4:33","type":""}],"src":"9221:405:33"},{"body":{"nodeType":"YulBlock","src":"9805:181:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9822:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9833:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9815:6:33"},"nodeType":"YulFunctionCall","src":"9815:21:33"},"nodeType":"YulExpressionStatement","src":"9815:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9856:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9867:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9852:3:33"},"nodeType":"YulFunctionCall","src":"9852:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"9872:2:33","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9845:6:33"},"nodeType":"YulFunctionCall","src":"9845:30:33"},"nodeType":"YulExpressionStatement","src":"9845:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9895:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9906:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9891:3:33"},"nodeType":"YulFunctionCall","src":"9891:18:33"},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","kind":"string","nodeType":"YulLiteral","src":"9911:33:33","type":"","value":"ReentrancyGuard: reentrant call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9884:6:33"},"nodeType":"YulFunctionCall","src":"9884:61:33"},"nodeType":"YulExpressionStatement","src":"9884:61:33"},{"nodeType":"YulAssignment","src":"9954:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9966:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9977:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9962:3:33"},"nodeType":"YulFunctionCall","src":"9962:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9954:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9782:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9796:4:33","type":""}],"src":"9631:355:33"},{"body":{"nodeType":"YulBlock","src":"10057:184:33","statements":[{"nodeType":"YulVariableDeclaration","src":"10067:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"10076:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"10071:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"10136:63:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10161:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"10166:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10157:3:33"},"nodeType":"YulFunctionCall","src":"10157:11:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10180:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"10185:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10176:3:33"},"nodeType":"YulFunctionCall","src":"10176:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10170:5:33"},"nodeType":"YulFunctionCall","src":"10170:18:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10150:6:33"},"nodeType":"YulFunctionCall","src":"10150:39:33"},"nodeType":"YulExpressionStatement","src":"10150:39:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10097:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"10100:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10094:2:33"},"nodeType":"YulFunctionCall","src":"10094:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10108:19:33","statements":[{"nodeType":"YulAssignment","src":"10110:15:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10119:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"10122:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10115:3:33"},"nodeType":"YulFunctionCall","src":"10115:10:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"10110:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"10090:3:33","statements":[]},"src":"10086:113:33"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10219:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"10224:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10215:3:33"},"nodeType":"YulFunctionCall","src":"10215:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"10233:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10208:6:33"},"nodeType":"YulFunctionCall","src":"10208:27:33"},"nodeType":"YulExpressionStatement","src":"10208:27:33"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"10035:3:33","type":""},{"name":"dst","nodeType":"YulTypedName","src":"10040:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"10045:6:33","type":""}],"src":"9991:250:33"},{"body":{"nodeType":"YulBlock","src":"10635:423:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10652:3:33"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"10657:25:33","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10645:6:33"},"nodeType":"YulFunctionCall","src":"10645:38:33"},"nodeType":"YulExpressionStatement","src":"10645:38:33"},{"nodeType":"YulVariableDeclaration","src":"10692:27:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10712:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10706:5:33"},"nodeType":"YulFunctionCall","src":"10706:13:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10696:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10767:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"10775:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10763:3:33"},"nodeType":"YulFunctionCall","src":"10763:17:33"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10786:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"10791:2:33","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10782:3:33"},"nodeType":"YulFunctionCall","src":"10782:12:33"},{"name":"length","nodeType":"YulIdentifier","src":"10796:6:33"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"10728:34:33"},"nodeType":"YulFunctionCall","src":"10728:75:33"},"nodeType":"YulExpressionStatement","src":"10728:75:33"},{"nodeType":"YulVariableDeclaration","src":"10812:26:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10826:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"10831:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10822:3:33"},"nodeType":"YulFunctionCall","src":"10822:16:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"10816:2:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"10858:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"10862:2:33","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10854:3:33"},"nodeType":"YulFunctionCall","src":"10854:11:33"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"10867:19:33","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10847:6:33"},"nodeType":"YulFunctionCall","src":"10847:40:33"},"nodeType":"YulExpressionStatement","src":"10847:40:33"},{"nodeType":"YulVariableDeclaration","src":"10896:29:33","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10918:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10912:5:33"},"nodeType":"YulFunctionCall","src":"10912:13:33"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"10900:8:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10973:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"10981:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10969:3:33"},"nodeType":"YulFunctionCall","src":"10969:17:33"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"10992:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"10996:2:33","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10988:3:33"},"nodeType":"YulFunctionCall","src":"10988:11:33"},{"name":"length_1","nodeType":"YulIdentifier","src":"11001:8:33"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"10934:34:33"},"nodeType":"YulFunctionCall","src":"10934:76:33"},"nodeType":"YulExpressionStatement","src":"10934:76:33"},{"nodeType":"YulAssignment","src":"11019:33:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"11034:2:33"},{"name":"length_1","nodeType":"YulIdentifier","src":"11038:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11030:3:33"},"nodeType":"YulFunctionCall","src":"11030:17:33"},{"kind":"number","nodeType":"YulLiteral","src":"11049:2:33","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11026:3:33"},"nodeType":"YulFunctionCall","src":"11026:26:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11019:3:33"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10603:3:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10608:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10616:6:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10627:3:33","type":""}],"src":"10246:812:33"},{"body":{"nodeType":"YulBlock","src":"11184:275:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11201:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11212:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11194:6:33"},"nodeType":"YulFunctionCall","src":"11194:21:33"},"nodeType":"YulExpressionStatement","src":"11194:21:33"},{"nodeType":"YulVariableDeclaration","src":"11224:27:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11244:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11238:5:33"},"nodeType":"YulFunctionCall","src":"11238:13:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"11228:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11271:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11282:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11267:3:33"},"nodeType":"YulFunctionCall","src":"11267:18:33"},{"name":"length","nodeType":"YulIdentifier","src":"11287:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11260:6:33"},"nodeType":"YulFunctionCall","src":"11260:34:33"},"nodeType":"YulExpressionStatement","src":"11260:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11342:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"11350:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11338:3:33"},"nodeType":"YulFunctionCall","src":"11338:15:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11359:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11370:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11355:3:33"},"nodeType":"YulFunctionCall","src":"11355:18:33"},{"name":"length","nodeType":"YulIdentifier","src":"11375:6:33"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"11303:34:33"},"nodeType":"YulFunctionCall","src":"11303:79:33"},"nodeType":"YulExpressionStatement","src":"11303:79:33"},{"nodeType":"YulAssignment","src":"11391:62:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11407:9:33"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"11426:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"11434:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11422:3:33"},"nodeType":"YulFunctionCall","src":"11422:15:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11443:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11439:3:33"},"nodeType":"YulFunctionCall","src":"11439:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11418:3:33"},"nodeType":"YulFunctionCall","src":"11418:29:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11403:3:33"},"nodeType":"YulFunctionCall","src":"11403:45:33"},{"kind":"number","nodeType":"YulLiteral","src":"11450:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11399:3:33"},"nodeType":"YulFunctionCall","src":"11399:54:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11391:4:33"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11153:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11164:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11175:4:33","type":""}],"src":"11063:396:33"},{"body":{"nodeType":"YulBlock","src":"11638:235:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11655:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11666:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11648:6:33"},"nodeType":"YulFunctionCall","src":"11648:21:33"},"nodeType":"YulExpressionStatement","src":"11648:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11689:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11700:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11685:3:33"},"nodeType":"YulFunctionCall","src":"11685:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"11705:2:33","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11678:6:33"},"nodeType":"YulFunctionCall","src":"11678:30:33"},"nodeType":"YulExpressionStatement","src":"11678:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11728:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11739:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11724:3:33"},"nodeType":"YulFunctionCall","src":"11724:18:33"},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e","kind":"string","nodeType":"YulLiteral","src":"11744:34:33","type":"","value":"ERC1967: new implementation is n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11717:6:33"},"nodeType":"YulFunctionCall","src":"11717:62:33"},"nodeType":"YulExpressionStatement","src":"11717:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11799:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11810:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11795:3:33"},"nodeType":"YulFunctionCall","src":"11795:18:33"},{"hexValue":"6f74206120636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"11815:15:33","type":"","value":"ot a contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11788:6:33"},"nodeType":"YulFunctionCall","src":"11788:43:33"},"nodeType":"YulExpressionStatement","src":"11788:43:33"},{"nodeType":"YulAssignment","src":"11840:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11852:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11863:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11848:3:33"},"nodeType":"YulFunctionCall","src":"11848:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11840:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11615:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11629:4:33","type":""}],"src":"11464:409:33"},{"body":{"nodeType":"YulBlock","src":"11910:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11927:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11934:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"11939:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11930:3:33"},"nodeType":"YulFunctionCall","src":"11930:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11920:6:33"},"nodeType":"YulFunctionCall","src":"11920:31:33"},"nodeType":"YulExpressionStatement","src":"11920:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11967:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11970:4:33","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11960:6:33"},"nodeType":"YulFunctionCall","src":"11960:15:33"},"nodeType":"YulExpressionStatement","src":"11960:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11991:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11994:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11984:6:33"},"nodeType":"YulFunctionCall","src":"11984:15:33"},"nodeType":"YulExpressionStatement","src":"11984:15:33"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"11878:127:33"},{"body":{"nodeType":"YulBlock","src":"12062:116:33","statements":[{"nodeType":"YulAssignment","src":"12072:20:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12087:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"12090:1:33"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"12083:3:33"},"nodeType":"YulFunctionCall","src":"12083:9:33"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"12072:7:33"}]},{"body":{"nodeType":"YulBlock","src":"12150:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12152:16:33"},"nodeType":"YulFunctionCall","src":"12152:18:33"},"nodeType":"YulExpressionStatement","src":"12152:18:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12121:1:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12114:6:33"},"nodeType":"YulFunctionCall","src":"12114:9:33"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"12128:1:33"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"12135:7:33"},{"name":"x","nodeType":"YulIdentifier","src":"12144:1:33"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"12131:3:33"},"nodeType":"YulFunctionCall","src":"12131:15:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12125:2:33"},"nodeType":"YulFunctionCall","src":"12125:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"12111:2:33"},"nodeType":"YulFunctionCall","src":"12111:37:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12104:6:33"},"nodeType":"YulFunctionCall","src":"12104:45:33"},"nodeType":"YulIf","src":"12101:71:33"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"12041:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"12044:1:33","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"12050:7:33","type":""}],"src":"12010:168:33"},{"body":{"nodeType":"YulBlock","src":"12230:89:33","statements":[{"body":{"nodeType":"YulBlock","src":"12257:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12259:16:33"},"nodeType":"YulFunctionCall","src":"12259:18:33"},"nodeType":"YulExpressionStatement","src":"12259:18:33"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12250:5:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12243:6:33"},"nodeType":"YulFunctionCall","src":"12243:13:33"},"nodeType":"YulIf","src":"12240:39:33"},{"nodeType":"YulAssignment","src":"12288:25:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12299:5:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12310:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12306:3:33"},"nodeType":"YulFunctionCall","src":"12306:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12295:3:33"},"nodeType":"YulFunctionCall","src":"12295:18:33"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"12288:3:33"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12212:5:33","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"12222:3:33","type":""}],"src":"12183:136:33"},{"body":{"nodeType":"YulBlock","src":"12498:182:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12515:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12526:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12508:6:33"},"nodeType":"YulFunctionCall","src":"12508:21:33"},"nodeType":"YulExpressionStatement","src":"12508:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12549:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12560:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12545:3:33"},"nodeType":"YulFunctionCall","src":"12545:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"12565:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12538:6:33"},"nodeType":"YulFunctionCall","src":"12538:30:33"},"nodeType":"YulExpressionStatement","src":"12538:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12588:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12599:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12584:3:33"},"nodeType":"YulFunctionCall","src":"12584:18:33"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"12604:34:33","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12577:6:33"},"nodeType":"YulFunctionCall","src":"12577:62:33"},"nodeType":"YulExpressionStatement","src":"12577:62:33"},{"nodeType":"YulAssignment","src":"12648:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12660:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12671:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12656:3:33"},"nodeType":"YulFunctionCall","src":"12656:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12648:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12475:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12489:4:33","type":""}],"src":"12324:356:33"},{"body":{"nodeType":"YulBlock","src":"12734:79:33","statements":[{"nodeType":"YulAssignment","src":"12744:17:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12756:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"12759:1:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12752:3:33"},"nodeType":"YulFunctionCall","src":"12752:9:33"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"12744:4:33"}]},{"body":{"nodeType":"YulBlock","src":"12785:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12787:16:33"},"nodeType":"YulFunctionCall","src":"12787:18:33"},"nodeType":"YulExpressionStatement","src":"12787:18:33"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"12776:4:33"},{"name":"x","nodeType":"YulIdentifier","src":"12782:1:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12773:2:33"},"nodeType":"YulFunctionCall","src":"12773:11:33"},"nodeType":"YulIf","src":"12770:37:33"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"12716:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"12719:1:33","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"12725:4:33","type":""}],"src":"12685:128:33"},{"body":{"nodeType":"YulBlock","src":"12850:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12867:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12874:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"12879:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12870:3:33"},"nodeType":"YulFunctionCall","src":"12870:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12860:6:33"},"nodeType":"YulFunctionCall","src":"12860:31:33"},"nodeType":"YulExpressionStatement","src":"12860:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12907:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12910:4:33","type":"","value":"0x31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12900:6:33"},"nodeType":"YulFunctionCall","src":"12900:15:33"},"nodeType":"YulExpressionStatement","src":"12900:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12931:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12934:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12924:6:33"},"nodeType":"YulFunctionCall","src":"12924:15:33"},"nodeType":"YulExpressionStatement","src":"12924:15:33"}]},"name":"panic_error_0x31","nodeType":"YulFunctionDefinition","src":"12818:127:33"},{"body":{"nodeType":"YulBlock","src":"13124:228:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13141:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"13152:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13134:6:33"},"nodeType":"YulFunctionCall","src":"13134:21:33"},"nodeType":"YulExpressionStatement","src":"13134:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13175:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"13186:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13171:3:33"},"nodeType":"YulFunctionCall","src":"13171:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"13191:2:33","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13164:6:33"},"nodeType":"YulFunctionCall","src":"13164:30:33"},"nodeType":"YulExpressionStatement","src":"13164:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13214:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"13225:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13210:3:33"},"nodeType":"YulFunctionCall","src":"13210:18:33"},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f","kind":"string","nodeType":"YulLiteral","src":"13230:34:33","type":"","value":"Address: delegate call to non-co"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13203:6:33"},"nodeType":"YulFunctionCall","src":"13203:62:33"},"nodeType":"YulExpressionStatement","src":"13203:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13285:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"13296:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13281:3:33"},"nodeType":"YulFunctionCall","src":"13281:18:33"},{"hexValue":"6e7472616374","kind":"string","nodeType":"YulLiteral","src":"13301:8:33","type":"","value":"ntract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13274:6:33"},"nodeType":"YulFunctionCall","src":"13274:36:33"},"nodeType":"YulExpressionStatement","src":"13274:36:33"},{"nodeType":"YulAssignment","src":"13319:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13331:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"13342:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13327:3:33"},"nodeType":"YulFunctionCall","src":"13327:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13319:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13101:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13115:4:33","type":""}],"src":"12950:402:33"},{"body":{"nodeType":"YulBlock","src":"13494:150:33","statements":[{"nodeType":"YulVariableDeclaration","src":"13504:27:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13524:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13518:5:33"},"nodeType":"YulFunctionCall","src":"13518:13:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"13508:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13579:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"13587:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13575:3:33"},"nodeType":"YulFunctionCall","src":"13575:17:33"},{"name":"pos","nodeType":"YulIdentifier","src":"13594:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"13599:6:33"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"13540:34:33"},"nodeType":"YulFunctionCall","src":"13540:66:33"},"nodeType":"YulExpressionStatement","src":"13540:66:33"},{"nodeType":"YulAssignment","src":"13615:23:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13626:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"13631:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13622:3:33"},"nodeType":"YulFunctionCall","src":"13622:16:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13615:3:33"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13470:3:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13475:6:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13486:3:33","type":""}],"src":"13357:287:33"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value1 := memPtr\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_bool(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let value := calldataload(add(headStart, 96))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value3 := value\n    }\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_507506d6dbc7d562955ba471fe833da5430ee86b7ddae778fc83312f942b6980__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Address cant be zero\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"AccessControl: can only renounce\")\n        mstore(add(headStart, 96), \" roles for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"active proxy\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_24c0e956a159feb2ac84b582d392e2325a54e0a1d750c41d2e74e5393c8e2b77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Withdraw not successfull\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"UUPSUpgradeable: must not be cal\")\n        mstore(add(headStart, 96), \"led through delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_21415e4349d1d27609f971b65ed4c87aef0e304d0705032b247c442bd4ec2072__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 53)\n        mstore(add(headStart, 64), \"Ether sent should be equal or mo\")\n        mstore(add(headStart, 96), \"re than creation fees\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), iszero(iszero(value3)))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: new implementati\")\n        mstore(add(headStart, 96), \"on is not UUPS\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: unsupported prox\")\n        mstore(add(headStart, 96), \"iableUUID\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC1967: new implementation is n\")\n        mstore(add(headStart, 96), \"ot a contract\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: delegate call to non-co\")\n        mstore(add(headStart, 96), \"ntract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1167":[{"length":32,"start":1715},{"length":32,"start":1782},{"length":32,"start":2184},{"length":32,"start":2251},{"length":32,"start":2380}]},"linkReferences":{},"object":"608060405260043610620001675760003560e01c80639010d07c11620000c5578063b93f9b0a1162000078578063b93f9b0a1462000407578063c5e97dd71462000442578063ca15c873146200045b578063d547741f1462000480578063da35a26f14620004a5578063ddc490ef14620004ca57600080fd5b80639010d07c146200033257806391d1485414620003575780639faeebd0146200037c578063a217fddf1462000395578063a465aa8814620003ac578063b7d8622514620003e257600080fd5b80633659cfe6116200011e5780633659cfe614620002965780633ccfd60b14620002bb5780634f1ef28614620002d357806352d1902d14620002ea5780635926a6b414620003025780637c9c3c28146200031b57600080fd5b806301ffc9a7146200016c5780631d4718e614620001a6578063248a9ca314620001e25780632f2ff15d146200022557806333ea51a8146200024c57806336568abe1462000271575b600080fd5b3480156200017957600080fd5b50620001916200018b3660046200176c565b62000500565b60405190151581526020015b60405180910390f35b348015620001b357600080fd5b5061016054620001c9906001600160a01b031681565b6040516001600160a01b0390911681526020016200019d565b348015620001ef57600080fd5b50620002166200020136600462001798565b60009081526065602052604090206001015490565b6040519081526020016200019d565b3480156200023257600080fd5b506200024a62000244366004620017cf565b6200052e565b005b3480156200025957600080fd5b506200024a6200026b366004620017fe565b6200055c565b3480156200027e57600080fd5b506200024a62000290366004620017cf565b62000627565b348015620002a357600080fd5b506200024a620002b5366004620017fe565b620006a9565b348015620002c857600080fd5b506200024a6200077d565b6200024a620002e436600462001832565b6200087e565b348015620002f757600080fd5b50620002166200093f565b3480156200030f57600080fd5b50620002166101615481565b6200024a6200032c36600462001900565b620009f0565b3480156200033f57600080fd5b50620001c96200035136600462001948565b62000b5a565b3480156200036457600080fd5b506200019162000376366004620017cf565b62000b7b565b3480156200038957600080fd5b506200021661015f5481565b348015620003a257600080fd5b5062000216600081565b348015620003b957600080fd5b50620002167fe52b516296e3e9bcbfa19b643b4121ced2583c73a88061a902874f43b47e19bc81565b348015620003ef57600080fd5b506200024a6200040136600462001798565b62000ba6565b3480156200041457600080fd5b50620001c96200042636600462001798565b600090815261016260205260409020546001600160a01b031690565b3480156200044f57600080fd5b50620002166101635481565b3480156200046857600080fd5b50620002166200047a36600462001798565b62000c07565b3480156200048d57600080fd5b506200024a6200049f366004620017cf565b62000c20565b348015620004b257600080fd5b506200024a620004c4366004620017cf565b62000c49565b348015620004d757600080fd5b50620002167fc2d029cf524959bb85323c198b4987efbf030ca3846804983133f9ad924acd0981565b60006001600160e01b03198216635a05180f60e01b1480620005285750620005288262000d90565b92915050565b6000828152606560205260409020600101546200054b8162000dc7565b62000557838362000dd3565b505050565b7fe52b516296e3e9bcbfa19b643b4121ced2583c73a88061a902874f43b47e19bc620005888162000dc7565b6001600160a01b038216620005db5760405162461bcd60e51b8152602060048201526014602482015273416464726573732063616e74206265207a65726f60601b60448201526064015b60405180910390fd5b61016080546001600160a01b0319166001600160a01b0384169081179091556040517f90789b797e56b4b4a2e6d1b0314f3d6e97d13098db43d6cb694dc1961a764dea90600090a25050565b6001600160a01b0381163314620006995760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401620005d2565b620006a5828262000df9565b5050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003620006f45760405162461bcd60e51b8152600401620005d2906200196b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166200072862000e1f565b6001600160a01b031614620007515760405162461bcd60e51b8152600401620005d290620019b7565b6200075c8162000e3c565b604080516000808252602082019092526200077a9183919062000e49565b50565b6200078762000fc1565b61016054610163546040516001600160a01b0390921691600090839083908381818185875af1925050503d8060008114620007df576040519150601f19603f3d011682016040523d82523d6000602084013e620007e4565b606091505b5050905080620008325760405162461bcd60e51b815260206004820152601860248201527715da5d1a191c985dc81b9bdd081cdd58d8d95cdcd99d5b1b60421b6044820152606401620005d2565b600061016381905560405183916001600160a01b038616917f6cca423c6ffc06e62a0acc433965e074b11c28479b0449250ce3ff65ac9e39fe9190a35050506200087c600160c955565b565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003620008c95760405162461bcd60e51b8152600401620005d2906200196b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316620008fd62000e1f565b6001600160a01b031614620009265760405162461bcd60e51b8152600401620005d290620019b7565b620009318262000e3c565b620006a58282600162000e49565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620009dc5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b6064820152608401620005d2565b506000805160206200370983398151915290565b61015f5434101562000a635760405162461bcd60e51b815260206004820152603560248201527f45746865722073656e742073686f756c6420626520657175616c206f72206d6f6044820152747265207468616e206372656174696f6e206665657360581b6064820152608401620005d2565b60008484848460405162000a77906200175e565b9384526020840192909252604083015215156060820152608001604051809103906000f08015801562000aae573d6000803e3d6000fd5b50610161805460009081526101626020526040812080546001600160a01b0319166001600160a01b038516179055815492935062000aec8362001a19565b919050555034610163600082825462000b06919062001a35565b925050819055508285826001600160a01b03167f6ca0ec3fed271d8510ec145b359d6599483fb259ffddf66cd5987074e2a1993f8760405162000b4b91815260200190565b60405180910390a45050505050565b600082815260976020526040812062000b7490836200101c565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b7fc2d029cf524959bb85323c198b4987efbf030ca3846804983133f9ad924acd0962000bd28162000dc7565b61015f82905560405182907fb472bc245cc56131a253d64c0fd5cf333aaacde67bf4571c077aa32150256e2190600090a25050565b600081815260976020526040812062000528906200102a565b60008281526065602052604090206001015462000c3d8162000dc7565b62000557838362000df9565b600054610100900460ff161580801562000c6a5750600054600160ff909116105b8062000c865750303b15801562000c86575060005460ff166001145b62000ceb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620005d2565b6000805460ff19166001179055801562000d0f576000805461ff0019166101001790555b61015f83905561016080546001600160a01b0319166001600160a01b038416179055600061016181905562000d45903362000dd3565b801562000557576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b60006001600160e01b03198216637965db0b60e01b14806200052857506301ffc9a760e01b6001600160e01b031983161462000528565b6200077a813362001035565b62000ddf828262001099565b600082815260976020526040902062000557908262001123565b62000e0582826200113a565b6000828152609760205260409020620005579082620011a4565b60008051602062003709833981519152546001600160a01b031690565b6000620006a58162000dc7565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161562000e7f576200055783620011bb565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801562000edc575060408051601f3d908101601f1916820190925262000ed99181019062001a4b565b60015b62000f415760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401620005d2565b60008051602062003709833981519152811462000fb35760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401620005d2565b50620005578383836200125a565b600260c95403620010155760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401620005d2565b600260c955565b600062000b7483836200128b565b600062000528825490565b62001041828262000b7b565b620006a5576200105181620012b8565b6200105e836020620012cb565b6040516020016200107192919062001a8b565b60408051601f198184030181529082905262461bcd60e51b8252620005d29160040162001afe565b620010a5828262000b7b565b620006a55760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620010df3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000b74836001600160a01b03841662001485565b62001146828262000b7b565b15620006a55760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600062000b74836001600160a01b038416620014d7565b6001600160a01b0381163b6200122a5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401620005d2565b6000805160206200370983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6200126583620015db565b600082511180620012735750805b1562000557576200128583836200161d565b50505050565b6000826000018281548110620012a557620012a562001b33565b9060005260206000200154905092915050565b6060620005286001600160a01b03831660145b60606000620012dc83600262001b49565b620012e990600262001a35565b67ffffffffffffffff8111156200130457620013046200181c565b6040519080825280601f01601f1916602001820160405280156200132f576020820181803683370190505b509050600360fc1b816000815181106200134d576200134d62001b33565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106200137f576200137f62001b33565b60200101906001600160f81b031916908160001a9053506000620013a584600262001b49565b620013b290600162001a35565b90505b600181111562001434576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620013ea57620013ea62001b33565b1a60f81b82828151811062001403576200140362001b33565b60200101906001600160f81b031916908160001a90535060049490941c936200142c8162001b63565b9050620013b5565b50831562000b745760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620005d2565b6000818152600183016020526040812054620014ce5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000528565b50600062000528565b60008181526001830160205260408120548015620015d0576000620014fe60018362001b7d565b8554909150600090620015149060019062001b7d565b90508181146200158057600086600001828154811062001538576200153862001b33565b90600052602060002001549050808760000184815481106200155e576200155e62001b33565b6000918252602080832090910192909255918252600188019052604090208390555b855486908062001594576200159462001b93565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505062000528565b600091505062000528565b620015e681620011bb565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b620016875760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401620005d2565b600080846001600160a01b031684604051620016a4919062001ba9565b600060405180830381855af49150503d8060008114620016e1576040519150601f19603f3d011682016040523d82523d6000602084013e620016e6565b606091505b509150915062001711828260405180606001604052806027815260200162003729602791396200171a565b95945050505050565b606083156200172b57508162000b74565b62000b748383815115620017425781518083602001fd5b8060405162461bcd60e51b8152600401620005d2919062001afe565b611b418062001bc883390190565b6000602082840312156200177f57600080fd5b81356001600160e01b03198116811462000b7457600080fd5b600060208284031215620017ab57600080fd5b5035919050565b80356001600160a01b0381168114620017ca57600080fd5b919050565b60008060408385031215620017e357600080fd5b82359150620017f560208401620017b2565b90509250929050565b6000602082840312156200181157600080fd5b62000b7482620017b2565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200184657600080fd5b6200185183620017b2565b9150602083013567ffffffffffffffff808211156200186f57600080fd5b818501915085601f8301126200188457600080fd5b8135818111156200189957620018996200181c565b604051601f8201601f19908116603f01168101908382118183101715620018c457620018c46200181c565b81604052828152886020848701011115620018de57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080600080608085870312156200191757600080fd5b843593506020850135925060408501359150606085013580151581146200193d57600080fd5b939692955090935050565b600080604083850312156200195c57600080fd5b50508035926020909101359150565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60006001820162001a2e5762001a2e62001a03565b5060010190565b8082018082111562000528576200052862001a03565b60006020828403121562001a5e57600080fd5b5051919050565b60005b8381101562001a8257818101518382015260200162001a68565b50506000910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526000835162001abf81601785016020880162001a65565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162001af281602884016020880162001a65565b01602801949350505050565b602081526000825180602084015262001b1f81604085016020870162001a65565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b808202811582820484141762000528576200052862001a03565b60008162001b755762001b7562001a03565b506000190190565b8181038181111562000528576200052862001a03565b634e487b7160e01b600052603160045260246000fd5b6000825162001bbd81846020870162001a65565b919091019291505056fe60806040523480156200001157600080fd5b5060405162001b4138038062001b4183398101604081905262000034916200013f565b6040518060400160405280601481526020017f46756e64696e67436f6e7472616374546f6b656e000000000000000000000000815250604051806040016040528060038152602001621190d560ea1b81525081600090816200009791906200022c565b506001620000a682826200022c565b505050620000c3620000bd620000e960201b60201c565b620000ed565b600993909355600a91909155600b55600c805460ff1916911515919091179055620002f8565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080600080608085870312156200015657600080fd5b845193506020850151925060408501519150606085015180151581146200017c57600080fd5b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620001b257607f821691505b602082108103620001d357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200022757600081815260208120601f850160051c81016020861015620002025750805b601f850160051c820191505b8181101562000223578281556001016200020e565b5050505b505050565b81516001600160401b0381111562000248576200024862000187565b62000260816200025984546200019d565b84620001d9565b602080601f8311600181146200029857600084156200027f5750858301515b600019600386901b1c1916600185901b17855562000223565b600085815260208120601f198616915b82811015620002c957888601518255948401946001909101908401620002a8565b5085821015620002e85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61183980620003086000396000f3fe60806040526004361061017b5760003560e01c8063715018a6116100cc578063c87b56dd1161007a578063c87b56dd1461041c578063d7b4750c1461043d578063d8e159f81461045d578063db06941e14610472578063e2c41dbc14610487578063e985e9c51461048f578063f2fde38b146104af57600080fd5b8063715018a6146103675780637dc4c2ba1461037c5780638da5cb5b1461039157806395d89b41146103af5780639c885eb3146103c4578063a22cb465146103dc578063b88d4fde146103fc57600080fd5b806323b872dd1161012957806323b872dd146102b157806324600fc3146102d157806342842e0e146102e65780634e71d92d146103065780636352211e1461031257806365ac43411461033257806370a082311461034757600080fd5b806301ffc9a7146101875780630343fb25146101bc57806306fdde0314610200578063081812fc14610222578063095ea7b31461025a5780631095941e1461027c5780631096cb791461029c57600080fd5b3661018257005b600080fd5b34801561019357600080fd5b506101a76101a236600461130a565b6104cf565b60405190151581526020015b60405180910390f35b3480156101c857600080fd5b506101f26101d7366004611343565b6001600160a01b03166000908152600d602052604090205490565b6040519081526020016101b3565b34801561020c57600080fd5b50610215610521565b6040516101b391906113a4565b34801561022e57600080fd5b5061024261023d3660046113b7565b6105b3565b6040516001600160a01b0390911681526020016101b3565b34801561026657600080fd5b5061027a6102753660046113d0565b6105da565b005b34801561028857600080fd5b5061027a6102973660046113b7565b6106f4565b3480156102a857600080fd5b50600b546101f2565b3480156102bd57600080fd5b5061027a6102cc3660046113fa565b61074c565b3480156102dd57600080fd5b5061027a61077d565b3480156102f257600080fd5b5061027a6103013660046113fa565b610865565b34801561027a57600080fd5b34801561031e57600080fd5b5061024261032d3660046113b7565b610882565b34801561033e57600080fd5b506009546101f2565b34801561035357600080fd5b506101f2610362366004611343565b6108b6565b34801561037357600080fd5b5061027a61093c565b34801561038857600080fd5b506101a761094e565b34801561039d57600080fd5b506006546001600160a01b0316610242565b3480156103bb57600080fd5b506102156109bb565b3480156103d057600080fd5b50600c5460ff166101a7565b3480156103e857600080fd5b5061027a6103f7366004611436565b6109ca565b34801561040857600080fd5b5061027a610417366004611488565b6109d5565b34801561042857600080fd5b506102156104373660046113b7565b50606090565b34801561044957600080fd5b506102426104583660046113b7565b610a0d565b34801561046957600080fd5b50600a546101f2565b34801561047e57600080fd5b506101f2610a3d565b61027a610a5b565b34801561049b57600080fd5b506101a76104aa366004611564565b610afc565b3480156104bb57600080fd5b5061027a6104ca366004611343565b610b2a565b60006001600160e01b031982166380ac58cd60e01b148061050057506001600160e01b03198216635b5e139f60e01b145b8061051b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461053090611597565b80601f016020809104026020016040519081016040528092919081815260200182805461055c90611597565b80156105a95780601f1061057e576101008083540402835291602001916105a9565b820191906000526020600020905b81548152906001019060200180831161058c57829003601f168201915b5050505050905090565b60006105be82610ba0565b506000908152600460205260409020546001600160a01b031690565b60006105e582610882565b9050806001600160a01b0316836001600160a01b0316036106575760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061067357506106738133610afc565b6106e55760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161064e565b6106ef8383610bc5565b505050565b600c5460ff166107175760405163568fd53960e11b815260040160405180910390fd5b6000818152600f602090815260408083203384529091529020805460ff19166001179055610749600880546001019055565b50565b6107563382610c33565b6107725760405162461bcd60e51b815260040161064e906115d1565b6106ef838383610c92565b610785610e03565b600c5460ff16156107f65761079861094e565b6107f65760405162461bcd60e51b815260206004820152602960248201527f5468657265206973206e6f206d616a6f7269747920617070726f76616c20746f60448201526820776974686472617760b81b606482015260840161064e565b6040514790600090339083908381818185875af1925050503d806000811461083a576040519150601f19603f3d011682016040523d82523d6000602084013e61083f565b606091505b505090508061086157604051639af25e5d60e01b815260040160405180910390fd5b5050565b6106ef838383604051806020016040528060008152506109d5565b565b60008061088e83610e5d565b90506001600160a01b03811661051b5760405162461bcd60e51b815260040161064e9061161e565b60006001600160a01b0382166109205760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161064e565b506001600160a01b031660009081526003602052604090205490565b610944610e03565b6108806000610e78565b600c5460009060ff166109745760405163568fd53960e11b815260040160405180910390fd5b600061097f60085490565b600e549091506000906109a09060649061099a90603c610eca565b90610edd565b90508082106109b25760019250505090565b60009250505090565b60606001805461053090611597565b610861338383610ee9565b6109df3383610c33565b6109fb5760405162461bcd60e51b815260040161064e906115d1565b610a0784848484610fb3565b50505050565b6000600e8281548110610a2257610a22611650565b6000918252602090912001546001600160a01b031692915050565b6000610a56600b54600954610edd90919063ffffffff16565b905090565b6000610a65610a3d565b90506000610a7260075490565b9050813411610a945760405163cf463cf960e01b815260040160405180910390fd5b336000818152600d60205260408120349055600e805460018101825591527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180546001600160a01b03191682179055610aee9082610fe6565b610861600780546001019055565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610b32610e03565b6001600160a01b038116610b975760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161064e565b61074981610e78565b610ba981611000565b6107495760405162461bcd60e51b815260040161064e9061161e565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610bfa82610882565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610c3f83610882565b9050806001600160a01b0316846001600160a01b03161480610c665750610c668185610afc565b80610c8a5750836001600160a01b0316610c7f846105b3565b6001600160a01b0316145b949350505050565b826001600160a01b0316610ca582610882565b6001600160a01b031614610ccb5760405162461bcd60e51b815260040161064e90611666565b6001600160a01b038216610d2d5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161064e565b610d3a838383600161101d565b826001600160a01b0316610d4d82610882565b6001600160a01b031614610d735760405162461bcd60e51b815260040161064e90611666565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6006546001600160a01b031633146108805760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161064e565b6000908152600260205260409020546001600160a01b031690565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610ed682846116c1565b9392505050565b6000610ed682846116d8565b816001600160a01b0316836001600160a01b031603610f465760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640161064e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610fbe848484610c92565b610fca848484846110a5565b610a075760405162461bcd60e51b815260040161064e906116fa565b6108618282604051806020016040528060008152506111a6565b60008061100c83610e5d565b6001600160a01b0316141592915050565b6001811115610a07576001600160a01b03841615611063576001600160a01b0384166000908152600360205260408120805483929061105d90849061174c565b90915550505b6001600160a01b03831615610a07576001600160a01b0383166000908152600360205260408120805483929061109a90849061175f565b909155505050505050565b60006001600160a01b0384163b1561119b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906110e9903390899088908890600401611772565b6020604051808303816000875af1925050508015611124575060408051601f3d908101601f19168201909252611121918101906117af565b60015b611181573d808015611152576040519150601f19603f3d011682016040523d82523d6000602084013e611157565b606091505b5080516000036111795760405162461bcd60e51b815260040161064e906116fa565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610c8a565b506001949350505050565b6111b083836111d9565b6111bd60008484846110a5565b6106ef5760405162461bcd60e51b815260040161064e906116fa565b6001600160a01b03821661122f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161064e565b61123881611000565b156112555760405162461bcd60e51b815260040161064e906117cc565b61126360008383600161101d565b61126c81611000565b156112895760405162461bcd60e51b815260040161064e906117cc565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b03198116811461074957600080fd5b60006020828403121561131c57600080fd5b8135610ed6816112f4565b80356001600160a01b038116811461133e57600080fd5b919050565b60006020828403121561135557600080fd5b610ed682611327565b6000815180845260005b8181101561138457602081850181015186830182015201611368565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610ed6602083018461135e565b6000602082840312156113c957600080fd5b5035919050565b600080604083850312156113e357600080fd5b6113ec83611327565b946020939093013593505050565b60008060006060848603121561140f57600080fd5b61141884611327565b925061142660208501611327565b9150604084013590509250925092565b6000806040838503121561144957600080fd5b61145283611327565b91506020830135801515811461146757600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561149e57600080fd5b6114a785611327565b93506114b560208601611327565b925060408501359150606085013567ffffffffffffffff808211156114d957600080fd5b818701915087601f8301126114ed57600080fd5b8135818111156114ff576114ff611472565b604051601f8201601f19908116603f0116810190838211818310171561152757611527611472565b816040528281528a602084870101111561154057600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561157757600080fd5b61158083611327565b915061158e60208401611327565b90509250929050565b600181811c908216806115ab57607f821691505b6020821081036115cb57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761051b5761051b6116ab565b6000826116f557634e487b7160e01b600052601260045260246000fd5b500490565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b8181038181111561051b5761051b6116ab565b8082018082111561051b5761051b6116ab565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906117a59083018461135e565b9695505050505050565b6000602082840312156117c157600080fd5b8151610ed6816112f4565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060408201526060019056fea2646970667358221220599eda65bdcd62a61f847b03f64c19e6f820915df7e86063244c4da937bbcc2f64736f6c63430008110033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220c609ec04c54ac4029a127e2fa61ad05ff15b3e9a4616ac36a4266cd534adeee664736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH3 0x167 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9010D07C GT PUSH3 0xC5 JUMPI DUP1 PUSH4 0xB93F9B0A GT PUSH3 0x78 JUMPI DUP1 PUSH4 0xB93F9B0A EQ PUSH3 0x407 JUMPI DUP1 PUSH4 0xC5E97DD7 EQ PUSH3 0x442 JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH3 0x45B JUMPI DUP1 PUSH4 0xD547741F EQ PUSH3 0x480 JUMPI DUP1 PUSH4 0xDA35A26F EQ PUSH3 0x4A5 JUMPI DUP1 PUSH4 0xDDC490EF EQ PUSH3 0x4CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9010D07C EQ PUSH3 0x332 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH3 0x357 JUMPI DUP1 PUSH4 0x9FAEEBD0 EQ PUSH3 0x37C JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH3 0x395 JUMPI DUP1 PUSH4 0xA465AA88 EQ PUSH3 0x3AC JUMPI DUP1 PUSH4 0xB7D86225 EQ PUSH3 0x3E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3659CFE6 GT PUSH3 0x11E JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH3 0x296 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH3 0x2BB JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH3 0x2D3 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH3 0x2EA JUMPI DUP1 PUSH4 0x5926A6B4 EQ PUSH3 0x302 JUMPI DUP1 PUSH4 0x7C9C3C28 EQ PUSH3 0x31B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH3 0x16C JUMPI DUP1 PUSH4 0x1D4718E6 EQ PUSH3 0x1A6 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH3 0x1E2 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH3 0x225 JUMPI DUP1 PUSH4 0x33EA51A8 EQ PUSH3 0x24C JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH3 0x271 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x191 PUSH3 0x18B CALLDATASIZE PUSH1 0x4 PUSH3 0x176C JUMP JUMPDEST PUSH3 0x500 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x1B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 SLOAD PUSH3 0x1C9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x19D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x216 PUSH3 0x201 CALLDATASIZE PUSH1 0x4 PUSH3 0x1798 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x19D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x232 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x24A PUSH3 0x244 CALLDATASIZE PUSH1 0x4 PUSH3 0x17CF JUMP JUMPDEST PUSH3 0x52E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x259 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x24A PUSH3 0x26B CALLDATASIZE PUSH1 0x4 PUSH3 0x17FE JUMP JUMPDEST PUSH3 0x55C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x24A PUSH3 0x290 CALLDATASIZE PUSH1 0x4 PUSH3 0x17CF JUMP JUMPDEST PUSH3 0x627 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x24A PUSH3 0x2B5 CALLDATASIZE PUSH1 0x4 PUSH3 0x17FE JUMP JUMPDEST PUSH3 0x6A9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x2C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x24A PUSH3 0x77D JUMP JUMPDEST PUSH3 0x24A PUSH3 0x2E4 CALLDATASIZE PUSH1 0x4 PUSH3 0x1832 JUMP JUMPDEST PUSH3 0x87E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x2F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x216 PUSH3 0x93F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x30F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x216 PUSH2 0x161 SLOAD DUP2 JUMP JUMPDEST PUSH3 0x24A PUSH3 0x32C CALLDATASIZE PUSH1 0x4 PUSH3 0x1900 JUMP JUMPDEST PUSH3 0x9F0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x33F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1C9 PUSH3 0x351 CALLDATASIZE PUSH1 0x4 PUSH3 0x1948 JUMP JUMPDEST PUSH3 0xB5A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x364 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x191 PUSH3 0x376 CALLDATASIZE PUSH1 0x4 PUSH3 0x17CF JUMP JUMPDEST PUSH3 0xB7B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x389 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x216 PUSH2 0x15F SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x3A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x216 PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x3B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x216 PUSH32 0xE52B516296E3E9BCBFA19B643B4121CED2583C73A88061A902874F43B47E19BC DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x3EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x24A PUSH3 0x401 CALLDATASIZE PUSH1 0x4 PUSH3 0x1798 JUMP JUMPDEST PUSH3 0xBA6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1C9 PUSH3 0x426 CALLDATASIZE PUSH1 0x4 PUSH3 0x1798 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x162 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x216 PUSH2 0x163 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x468 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x216 PUSH3 0x47A CALLDATASIZE PUSH1 0x4 PUSH3 0x1798 JUMP JUMPDEST PUSH3 0xC07 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x24A PUSH3 0x49F CALLDATASIZE PUSH1 0x4 PUSH3 0x17CF JUMP JUMPDEST PUSH3 0xC20 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x4B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x24A PUSH3 0x4C4 CALLDATASIZE PUSH1 0x4 PUSH3 0x17CF JUMP JUMPDEST PUSH3 0xC49 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x4D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x216 PUSH32 0xC2D029CF524959BB85323C198B4987EFBF030CA3846804983133F9AD924ACD09 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5A05180F PUSH1 0xE0 SHL EQ DUP1 PUSH3 0x528 JUMPI POP PUSH3 0x528 DUP3 PUSH3 0xD90 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH3 0x54B DUP2 PUSH3 0xDC7 JUMP JUMPDEST PUSH3 0x557 DUP4 DUP4 PUSH3 0xDD3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0xE52B516296E3E9BCBFA19B643B4121CED2583C73A88061A902874F43B47E19BC PUSH3 0x588 DUP2 PUSH3 0xDC7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x5DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x416464726573732063616E74206265207A65726F PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x160 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x90789B797E56B4B4A2E6D1B0314F3D6E97D13098DB43D6CB694DC1961A764DEA SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH3 0x699 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x5D2 JUMP JUMPDEST PUSH3 0x6A5 DUP3 DUP3 PUSH3 0xDF9 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH3 0x6F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x5D2 SWAP1 PUSH3 0x196B JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x728 PUSH3 0xE1F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x751 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x5D2 SWAP1 PUSH3 0x19B7 JUMP JUMPDEST PUSH3 0x75C DUP2 PUSH3 0xE3C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH3 0x77A SWAP2 DUP4 SWAP2 SWAP1 PUSH3 0xE49 JUMP JUMPDEST POP JUMP JUMPDEST PUSH3 0x787 PUSH3 0xFC1 JUMP JUMPDEST PUSH2 0x160 SLOAD PUSH2 0x163 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH1 0x0 SWAP1 DUP4 SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0x7DF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x7E4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH3 0x832 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x15DA5D1A191C985DC81B9BDD081CDD58D8D95CDCD99D5B1B PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x5D2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x163 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH32 0x6CCA423C6FFC06E62A0ACC433965E074B11C28479B0449250CE3FF65AC9E39FE SWAP2 SWAP1 LOG3 POP POP POP PUSH3 0x87C PUSH1 0x1 PUSH1 0xC9 SSTORE JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH3 0x8C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x5D2 SWAP1 PUSH3 0x196B JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x8FD PUSH3 0xE1F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x926 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x5D2 SWAP1 PUSH3 0x19B7 JUMP JUMPDEST PUSH3 0x931 DUP3 PUSH3 0xE3C JUMP JUMPDEST PUSH3 0x6A5 DUP3 DUP3 PUSH1 0x1 PUSH3 0xE49 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH3 0x9DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH24 0x1B1959081D1A1C9BDD59DA0819195B1959D85D1958D85B1B PUSH1 0x42 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x5D2 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x3709 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x15F SLOAD CALLVALUE LT ISZERO PUSH3 0xA63 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45746865722073656E742073686F756C6420626520657175616C206F72206D6F PUSH1 0x44 DUP3 ADD MSTORE PUSH21 0x7265207468616E206372656174696F6E2066656573 PUSH1 0x58 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x5D2 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH3 0xA77 SWAP1 PUSH3 0x175E JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0xAAE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x161 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x162 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND OR SWAP1 SSTORE DUP2 SLOAD SWAP3 SWAP4 POP PUSH3 0xAEC DUP4 PUSH3 0x1A19 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP CALLVALUE PUSH2 0x163 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH3 0xB06 SWAP2 SWAP1 PUSH3 0x1A35 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 DUP6 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x6CA0EC3FED271D8510EC145B359D6599483FB259FFDDF66CD5987074E2A1993F DUP8 PUSH1 0x40 MLOAD PUSH3 0xB4B SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH3 0xB74 SWAP1 DUP4 PUSH3 0x101C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH32 0xC2D029CF524959BB85323C198B4987EFBF030CA3846804983133F9AD924ACD09 PUSH3 0xBD2 DUP2 PUSH3 0xDC7 JUMP JUMPDEST PUSH2 0x15F DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP3 SWAP1 PUSH32 0xB472BC245CC56131A253D64C0FD5CF333AAACDE67BF4571C077AA32150256E21 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH3 0x528 SWAP1 PUSH3 0x102A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH3 0xC3D DUP2 PUSH3 0xDC7 JUMP JUMPDEST PUSH3 0x557 DUP4 DUP4 PUSH3 0xDF9 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH3 0xC6A JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH3 0xC86 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xC86 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH3 0xCEB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x5D2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH3 0xD0F JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x15F DUP4 SWAP1 SSTORE PUSH2 0x160 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH1 0x0 PUSH2 0x161 DUP2 SWAP1 SSTORE PUSH3 0xD45 SWAP1 CALLER PUSH3 0xDD3 JUMP JUMPDEST DUP1 ISZERO PUSH3 0x557 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH3 0x528 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH3 0x528 JUMP JUMPDEST PUSH3 0x77A DUP2 CALLER PUSH3 0x1035 JUMP JUMPDEST PUSH3 0xDDF DUP3 DUP3 PUSH3 0x1099 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH3 0x557 SWAP1 DUP3 PUSH3 0x1123 JUMP JUMPDEST PUSH3 0xE05 DUP3 DUP3 PUSH3 0x113A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH3 0x557 SWAP1 DUP3 PUSH3 0x11A4 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x3709 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x6A5 DUP2 PUSH3 0xDC7 JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH3 0xE7F JUMPI PUSH3 0x557 DUP4 PUSH3 0x11BB JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH3 0xEDC JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH3 0xED9 SWAP2 DUP2 ADD SWAP1 PUSH3 0x1A4B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH3 0xF41 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x5D2 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x3709 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH3 0xFB3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x5D2 JUMP JUMPDEST POP PUSH3 0x557 DUP4 DUP4 DUP4 PUSH3 0x125A JUMP JUMPDEST PUSH1 0x2 PUSH1 0xC9 SLOAD SUB PUSH3 0x1015 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x5D2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0xC9 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH3 0xB74 DUP4 DUP4 PUSH3 0x128B JUMP JUMPDEST PUSH1 0x0 PUSH3 0x528 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH3 0x1041 DUP3 DUP3 PUSH3 0xB7B JUMP JUMPDEST PUSH3 0x6A5 JUMPI PUSH3 0x1051 DUP2 PUSH3 0x12B8 JUMP JUMPDEST PUSH3 0x105E DUP4 PUSH1 0x20 PUSH3 0x12CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x1071 SWAP3 SWAP2 SWAP1 PUSH3 0x1A8B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH3 0x5D2 SWAP2 PUSH1 0x4 ADD PUSH3 0x1AFE JUMP JUMPDEST PUSH3 0x10A5 DUP3 DUP3 PUSH3 0xB7B JUMP JUMPDEST PUSH3 0x6A5 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0x10DF CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xB74 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH3 0x1485 JUMP JUMPDEST PUSH3 0x1146 DUP3 DUP3 PUSH3 0xB7B JUMP JUMPDEST ISZERO PUSH3 0x6A5 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xB74 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH3 0x14D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH3 0x122A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x5D2 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x3709 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH3 0x1265 DUP4 PUSH3 0x15DB JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH3 0x1273 JUMPI POP DUP1 JUMPDEST ISZERO PUSH3 0x557 JUMPI PUSH3 0x1285 DUP4 DUP4 PUSH3 0x161D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH3 0x12A5 JUMPI PUSH3 0x12A5 PUSH3 0x1B33 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH3 0x528 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH3 0x12DC DUP4 PUSH1 0x2 PUSH3 0x1B49 JUMP JUMPDEST PUSH3 0x12E9 SWAP1 PUSH1 0x2 PUSH3 0x1A35 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1304 JUMPI PUSH3 0x1304 PUSH3 0x181C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0x132F JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x134D JUMPI PUSH3 0x134D PUSH3 0x1B33 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x137F JUMPI PUSH3 0x137F PUSH3 0x1B33 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH3 0x13A5 DUP5 PUSH1 0x2 PUSH3 0x1B49 JUMP JUMPDEST PUSH3 0x13B2 SWAP1 PUSH1 0x1 PUSH3 0x1A35 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH3 0x1434 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH3 0x13EA JUMPI PUSH3 0x13EA PUSH3 0x1B33 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x1403 JUMPI PUSH3 0x1403 PUSH3 0x1B33 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH3 0x142C DUP2 PUSH3 0x1B63 JUMP JUMPDEST SWAP1 POP PUSH3 0x13B5 JUMP JUMPDEST POP DUP4 ISZERO PUSH3 0xB74 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x5D2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH3 0x14CE JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH3 0x528 JUMP JUMPDEST POP PUSH1 0x0 PUSH3 0x528 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH3 0x15D0 JUMPI PUSH1 0x0 PUSH3 0x14FE PUSH1 0x1 DUP4 PUSH3 0x1B7D JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH3 0x1514 SWAP1 PUSH1 0x1 SWAP1 PUSH3 0x1B7D JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH3 0x1580 JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH3 0x1538 JUMPI PUSH3 0x1538 PUSH3 0x1B33 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH3 0x155E JUMPI PUSH3 0x155E PUSH3 0x1B33 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH3 0x1594 JUMPI PUSH3 0x1594 PUSH3 0x1B93 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH3 0x528 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH3 0x528 JUMP JUMPDEST PUSH3 0x15E6 DUP2 PUSH3 0x11BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE PUSH3 0x1687 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x5D2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH3 0x16A4 SWAP2 SWAP1 PUSH3 0x1BA9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0x16E1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x16E6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH3 0x1711 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x3729 PUSH1 0x27 SWAP2 CODECOPY PUSH3 0x171A JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH3 0x172B JUMPI POP DUP2 PUSH3 0xB74 JUMP JUMPDEST PUSH3 0xB74 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH3 0x1742 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x5D2 SWAP2 SWAP1 PUSH3 0x1AFE JUMP JUMPDEST PUSH2 0x1B41 DUP1 PUSH3 0x1BC8 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x177F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH3 0xB74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x17AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x17CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x17E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH3 0x17F5 PUSH1 0x20 DUP5 ADD PUSH3 0x17B2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1811 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0xB74 DUP3 PUSH3 0x17B2 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1846 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1851 DUP4 PUSH3 0x17B2 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x186F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x1884 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH3 0x1899 JUMPI PUSH3 0x1899 PUSH3 0x181C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x18C4 JUMPI PUSH3 0x18C4 PUSH3 0x181C JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH3 0x18DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x1917 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x193D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x195C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH3 0x1A2E JUMPI PUSH3 0x1A2E PUSH3 0x1A03 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH3 0x528 JUMPI PUSH3 0x528 PUSH3 0x1A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1A5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x1A82 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x1A68 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH3 0x1ABF DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH3 0x1A65 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH3 0x1AF2 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH3 0x1A65 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x1B1F DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x1A65 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH3 0x528 JUMPI PUSH3 0x528 PUSH3 0x1A03 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH3 0x1B75 JUMPI PUSH3 0x1B75 PUSH3 0x1A03 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x528 JUMPI PUSH3 0x528 PUSH3 0x1A03 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH3 0x1BBD DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH3 0x1A65 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1B41 CODESIZE SUB DUP1 PUSH3 0x1B41 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x13F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x14 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x46756E64696E67436F6E7472616374546F6B656E000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x1190D5 PUSH1 0xEA SHL DUP2 MSTORE POP DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0x97 SWAP2 SWAP1 PUSH3 0x22C JUMP JUMPDEST POP PUSH1 0x1 PUSH3 0xA6 DUP3 DUP3 PUSH3 0x22C JUMP JUMPDEST POP POP POP PUSH3 0xC3 PUSH3 0xBD PUSH3 0xE9 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xED JUMP JUMPDEST PUSH1 0x9 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0xA SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xB SSTORE PUSH1 0xC DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH3 0x2F8 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x156 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP6 ADD MLOAD SWAP2 POP PUSH1 0x60 DUP6 ADD MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x17C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x1B2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x1D3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x227 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x202 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x223 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x20E JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x248 JUMPI PUSH3 0x248 PUSH3 0x187 JUMP JUMPDEST PUSH3 0x260 DUP2 PUSH3 0x259 DUP5 SLOAD PUSH3 0x19D JUMP JUMPDEST DUP5 PUSH3 0x1D9 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x298 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x27F JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x223 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x2C9 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x2A8 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x2E8 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x1839 DUP1 PUSH3 0x308 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x17B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xCC JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x41C JUMPI DUP1 PUSH4 0xD7B4750C EQ PUSH2 0x43D JUMPI DUP1 PUSH4 0xD8E159F8 EQ PUSH2 0x45D JUMPI DUP1 PUSH4 0xDB06941E EQ PUSH2 0x472 JUMPI DUP1 PUSH4 0xE2C41DBC EQ PUSH2 0x487 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x48F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x367 JUMPI DUP1 PUSH4 0x7DC4C2BA EQ PUSH2 0x37C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3AF JUMPI DUP1 PUSH4 0x9C885EB3 EQ PUSH2 0x3C4 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3DC JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x129 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2B1 JUMPI DUP1 PUSH4 0x24600FC3 EQ PUSH2 0x2D1 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x4E71D92D EQ PUSH2 0x306 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x312 JUMPI DUP1 PUSH4 0x65AC4341 EQ PUSH2 0x332 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x347 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0x343FB25 EQ PUSH2 0x1BC JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x200 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0x1095941E EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0x1096CB79 EQ PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x182 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x193 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A7 PUSH2 0x1A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x130A JUMP JUMPDEST PUSH2 0x4CF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1343 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x215 PUSH2 0x521 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B3 SWAP2 SWAP1 PUSH2 0x13A4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x242 PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0x13B7 JUMP JUMPDEST PUSH2 0x5B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x275 CALLDATASIZE PUSH1 0x4 PUSH2 0x13D0 JUMP JUMPDEST PUSH2 0x5DA JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x288 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B7 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB SLOAD PUSH2 0x1F2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x2CC CALLDATASIZE PUSH1 0x4 PUSH2 0x13FA JUMP JUMPDEST PUSH2 0x74C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x77D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x301 CALLDATASIZE PUSH1 0x4 PUSH2 0x13FA JUMP JUMPDEST PUSH2 0x865 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x242 PUSH2 0x32D CALLDATASIZE PUSH1 0x4 PUSH2 0x13B7 JUMP JUMPDEST PUSH2 0x882 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x9 SLOAD PUSH2 0x1F2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x1343 JUMP JUMPDEST PUSH2 0x8B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x93C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x388 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A7 PUSH2 0x94E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x242 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x215 PUSH2 0x9BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xC SLOAD PUSH1 0xFF AND PUSH2 0x1A7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x3F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1436 JUMP JUMPDEST PUSH2 0x9CA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x408 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x417 CALLDATASIZE PUSH1 0x4 PUSH2 0x1488 JUMP JUMPDEST PUSH2 0x9D5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x428 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x215 PUSH2 0x437 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B7 JUMP JUMPDEST POP PUSH1 0x60 SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x242 PUSH2 0x458 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B7 JUMP JUMPDEST PUSH2 0xA0D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x469 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xA SLOAD PUSH2 0x1F2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0xA3D JUMP JUMPDEST PUSH2 0x27A PUSH2 0xA5B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A7 PUSH2 0x4AA CALLDATASIZE PUSH1 0x4 PUSH2 0x1564 JUMP JUMPDEST PUSH2 0xAFC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x4CA CALLDATASIZE PUSH1 0x4 PUSH2 0x1343 JUMP JUMPDEST PUSH2 0xB2A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x500 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x51B JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x530 SWAP1 PUSH2 0x1597 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x55C SWAP1 PUSH2 0x1597 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5A9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x57E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5A9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x58C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BE DUP3 PUSH2 0xBA0 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E5 DUP3 PUSH2 0x882 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x657 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x673 JUMPI POP PUSH2 0x673 DUP2 CALLER PUSH2 0xAFC JUMP JUMPDEST PUSH2 0x6E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x64E JUMP JUMPDEST PUSH2 0x6EF DUP4 DUP4 PUSH2 0xBC5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0xFF AND PUSH2 0x717 JUMPI PUSH1 0x40 MLOAD PUSH4 0x568FD539 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x749 PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x756 CALLER DUP3 PUSH2 0xC33 JUMP JUMPDEST PUSH2 0x772 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x15D1 JUMP JUMPDEST PUSH2 0x6EF DUP4 DUP4 DUP4 PUSH2 0xC92 JUMP JUMPDEST PUSH2 0x785 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x7F6 JUMPI PUSH2 0x798 PUSH2 0x94E JUMP JUMPDEST PUSH2 0x7F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468657265206973206E6F206D616A6F7269747920617070726F76616C20746F PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x207769746864726177 PUSH1 0xB8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x64E JUMP JUMPDEST PUSH1 0x40 MLOAD SELFBALANCE SWAP1 PUSH1 0x0 SWAP1 CALLER SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x83A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x83F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x861 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9AF25E5D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x6EF DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x9D5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x88E DUP4 PUSH2 0xE5D JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x51B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x161E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x920 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x64E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x944 PUSH2 0xE03 JUMP JUMPDEST PUSH2 0x880 PUSH1 0x0 PUSH2 0xE78 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND PUSH2 0x974 JUMPI PUSH1 0x40 MLOAD PUSH4 0x568FD539 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x97F PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xE SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x9A0 SWAP1 PUSH1 0x64 SWAP1 PUSH2 0x99A SWAP1 PUSH1 0x3C PUSH2 0xECA JUMP JUMPDEST SWAP1 PUSH2 0xEDD JUMP JUMPDEST SWAP1 POP DUP1 DUP3 LT PUSH2 0x9B2 JUMPI PUSH1 0x1 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x530 SWAP1 PUSH2 0x1597 JUMP JUMPDEST PUSH2 0x861 CALLER DUP4 DUP4 PUSH2 0xEE9 JUMP JUMPDEST PUSH2 0x9DF CALLER DUP4 PUSH2 0xC33 JUMP JUMPDEST PUSH2 0x9FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x15D1 JUMP JUMPDEST PUSH2 0xA07 DUP5 DUP5 DUP5 DUP5 PUSH2 0xFB3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xA22 JUMPI PUSH2 0xA22 PUSH2 0x1650 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA56 PUSH1 0xB SLOAD PUSH1 0x9 SLOAD PUSH2 0xEDD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA65 PUSH2 0xA3D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA72 PUSH1 0x7 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP DUP2 CALLVALUE GT PUSH2 0xA94 JUMPI PUSH1 0x40 MLOAD PUSH4 0xCF463CF9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 CALLVALUE SWAP1 SSTORE PUSH1 0xE DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP2 MSTORE PUSH32 0xBB7B4A454DC3493923482F07822329ED19E8244EFF582CC204F8554C3620C3FD ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP3 OR SWAP1 SSTORE PUSH2 0xAEE SWAP1 DUP3 PUSH2 0xFE6 JUMP JUMPDEST PUSH2 0x861 PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0xB32 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB97 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x64E JUMP JUMPDEST PUSH2 0x749 DUP2 PUSH2 0xE78 JUMP JUMPDEST PUSH2 0xBA9 DUP2 PUSH2 0x1000 JUMP JUMPDEST PUSH2 0x749 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x161E JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0xBFA DUP3 PUSH2 0x882 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC3F DUP4 PUSH2 0x882 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xC66 JUMPI POP PUSH2 0xC66 DUP2 DUP6 PUSH2 0xAFC JUMP JUMPDEST DUP1 PUSH2 0xC8A JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xC7F DUP5 PUSH2 0x5B3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xCA5 DUP3 PUSH2 0x882 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xCCB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x1666 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x64E JUMP JUMPDEST PUSH2 0xD3A DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x101D JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD4D DUP3 PUSH2 0x882 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xD73 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x1666 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x880 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x64E JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xED6 DUP3 DUP5 PUSH2 0x16C1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xED6 DUP3 DUP5 PUSH2 0x16D8 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xF46 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x22A9219B99189D1030B8383937BB32903A379031B0B63632B9 PUSH1 0x39 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x64E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xFBE DUP5 DUP5 DUP5 PUSH2 0xC92 JUMP JUMPDEST PUSH2 0xFCA DUP5 DUP5 DUP5 DUP5 PUSH2 0x10A5 JUMP JUMPDEST PUSH2 0xA07 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x16FA JUMP JUMPDEST PUSH2 0x861 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x11A6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x100C DUP4 PUSH2 0xE5D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xA07 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1063 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x105D SWAP1 DUP5 SWAP1 PUSH2 0x174C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0xA07 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x109A SWAP1 DUP5 SWAP1 PUSH2 0x175F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x119B JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x10E9 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1772 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1124 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1121 SWAP2 DUP2 ADD SWAP1 PUSH2 0x17AF JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1181 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1152 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1157 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1179 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x16FA JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0xC8A JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x11B0 DUP4 DUP4 PUSH2 0x11D9 JUMP JUMPDEST PUSH2 0x11BD PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x10A5 JUMP JUMPDEST PUSH2 0x6EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x16FA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x122F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x64E JUMP JUMPDEST PUSH2 0x1238 DUP2 PUSH2 0x1000 JUMP JUMPDEST ISZERO PUSH2 0x1255 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x17CC JUMP JUMPDEST PUSH2 0x1263 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x101D JUMP JUMPDEST PUSH2 0x126C DUP2 PUSH2 0x1000 JUMP JUMPDEST ISZERO PUSH2 0x1289 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64E SWAP1 PUSH2 0x17CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x749 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x131C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xED6 DUP2 PUSH2 0x12F4 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x133E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1355 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xED6 DUP3 PUSH2 0x1327 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1384 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x1368 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xED6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x135E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13EC DUP4 PUSH2 0x1327 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x140F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1418 DUP5 PUSH2 0x1327 JUMP JUMPDEST SWAP3 POP PUSH2 0x1426 PUSH1 0x20 DUP6 ADD PUSH2 0x1327 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1452 DUP4 PUSH2 0x1327 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1467 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x149E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14A7 DUP6 PUSH2 0x1327 JUMP JUMPDEST SWAP4 POP PUSH2 0x14B5 PUSH1 0x20 DUP7 ADD PUSH2 0x1327 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x14D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x14ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x14FF JUMPI PUSH2 0x14FF PUSH2 0x1472 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1527 JUMPI PUSH2 0x1527 PUSH2 0x1472 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1540 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1577 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1580 DUP4 PUSH2 0x1327 JUMP JUMPDEST SWAP2 POP PUSH2 0x158E PUSH1 0x20 DUP5 ADD PUSH2 0x1327 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x15AB JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x15CB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x51B JUMPI PUSH2 0x51B PUSH2 0x16AB JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x16F5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x51B JUMPI PUSH2 0x51B PUSH2 0x16AB JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x51B JUMPI PUSH2 0x51B PUSH2 0x16AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x17A5 SWAP1 DUP4 ADD DUP5 PUSH2 0x135E JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xED6 DUP2 PUSH2 0x12F4 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSIZE SWAP15 0xDA PUSH6 0xBDCD62A61F84 PUSH28 0x3F64C19E6F820915DF7E86063244C4DA937BBCC2F64736F6C634300 ADDMOD GT STOP CALLER CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A2646970667358221220C6 MULMOD 0xEC DIV 0xC5 0x4A 0xC4 MUL SWAP11 SLT PUSH31 0x2FA61AD05FF15B3E9A4616AC36A4266CD534ADEEE664736F6C634300081100 CALLER ","sourceMap":"345:3040:32:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;962:223:0;;;;;;;;;;-1:-1:-1;962:223:0;;;;;:::i;:::-;;:::i;:::-;;;470:14:33;;463:22;445:41;;433:2;418:18;962:223:0;;;;;;;;510:30:32;;;;;;;;;;-1:-1:-1;510:30:32;;;;-1:-1:-1;;;;;510:30:32;;;;;;-1:-1:-1;;;;;661:32:33;;;643:51;;631:2;616:18;510:30:32;497:203:33;4708:129:1;;;;;;;;;;-1:-1:-1;4708:129:1;;;;;:::i;:::-;4782:7;4808:12;;;:6;:12;;;;;:22;;;;4708:129;;;;1036:25:33;;;1024:2;1009:18;4708:129:1;890:177:33;5133:145:1;;;;;;;;;;-1:-1:-1;5133:145:1;;;;;:::i;:::-;;:::i;:::-;;2971:258:32;;;;;;;;;;-1:-1:-1;2971:258:32;;;;;:::i;:::-;;:::i;6242:214:1:-;;;;;;;;;;-1:-1:-1;6242:214:1;;;;;:::i;:::-;;:::i;3317:197:8:-;;;;;;;;;;-1:-1:-1;3317:197:8;;;;;:::i;:::-;;:::i;2386:375:32:-;;;;;;;;;;;;;:::i;3763:222:8:-;;;;;;:::i;:::-;;:::i;3006:131::-;;;;;;;;;;;;;:::i;546:26:32:-;;;;;;;;;;;;;;;;1862:518;;;;;;:::i;:::-;;:::i;1770:151:0:-;;;;;;;;;;-1:-1:-1;1770:151:0;;;;;:::i;:::-;;:::i;3203:145:1:-;;;;;;;;;;-1:-1:-1;3203:145:1;;;;;:::i;:::-;;:::i;476:28:32:-;;;;;;;;;;;;;;;;2324:49:1;;;;;;;;;;-1:-1:-1;2324:49:1;2369:4;2324:49;;706:76:32;;;;;;;;;;;;751:31;706:76;;2791:174;;;;;;;;;;-1:-1:-1;2791:174:32;;;;;:::i;:::-;;:::i;3257:126::-;;;;;;;;;;-1:-1:-1;3257:126:32;;;;;:::i;:::-;3319:7;3344:32;;;:20;:32;;;;;;-1:-1:-1;;;;;3344:32:32;;3257:126;637:32;;;;;;;;;;;;;;;;2089:140:0;;;;;;;;;;-1:-1:-1;2089:140:0;;;;;:::i;:::-;;:::i;5558:147:1:-;;;;;;;;;;-1:-1:-1;5558:147:1;;;;;:::i;:::-;;:::i;1491:249:32:-;;;;;;;;;;-1:-1:-1;1491:249:32;;;;;:::i;:::-;;:::i;788:72::-;;;;;;;;;;;;831:29;788:72;;962:223:0;1047:4;-1:-1:-1;;;;;;1070:68:0;;-1:-1:-1;;;1070:68:0;;:108;;;1142:36;1166:11;1142:23;:36::i;:::-;1063:115;962:223;-1:-1:-1;;962:223:0:o;5133:145:1:-;4782:7;4808:12;;;:6;:12;;;;;:22;;;2802:16;2813:4;2802:10;:16::i;:::-;5246:25:::1;5257:4;5263:7;5246:10;:25::i;:::-;5133:145:::0;;;:::o;2971:258:32:-;751:31;2802:16:1;2813:4;2802:10;:16::i;:::-;-1:-1:-1;;;;;3077:28:32;::::1;3069:60;;;::::0;-1:-1:-1;;;3069:60:32;;4396:2:33;3069:60:32::1;::::0;::::1;4378:21:33::0;4435:2;4415:18;;;4408:30;-1:-1:-1;;;4454:18:33;;;4447:50;4514:18;;3069:60:32::1;;;;;;;;;3139:15;:32:::0;;-1:-1:-1;;;;;;3139:32:32::1;-1:-1:-1::0;;;;;3139:32:32;::::1;::::0;;::::1;::::0;;;3186:36:::1;::::0;::::1;::::0;-1:-1:-1;;3186:36:32::1;2971:258:::0;;:::o;6242:214:1:-;-1:-1:-1;;;;;6337:23:1;;929:10:11;6337:23:1;6329:83;;;;-1:-1:-1;;;6329:83:1;;4745:2:33;6329:83:1;;;4727:21:33;4784:2;4764:18;;;4757:30;4823:34;4803:18;;;4796:62;-1:-1:-1;;;4874:18:33;;;4867:45;4929:19;;6329:83:1;4543:411:33;6329:83:1;6423:26;6435:4;6441:7;6423:11;:26::i;:::-;6242:214;;:::o;3317:197:8:-;-1:-1:-1;;;;;1898:6:8;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:8;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:8;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:8;;1963:87;;;;-1:-1:-1;;;1963:87:8;;;;;;;:::i;:::-;3400:36:::1;3418:17;3400;:36::i;:::-;3487:12;::::0;;3497:1:::1;3487:12:::0;;;::::1;::::0;::::1;::::0;;;3446:61:::1;::::0;3468:17;;3487:12;3446:21:::1;:61::i;:::-;3317:197:::0;:::o;2386:375:32:-;2505:21:9;:19;:21::i;:::-;2462:15:32::1;::::0;2513:17:::1;::::0;2559:54:::1;::::0;-1:-1:-1;;;;;2462:15:32;;::::1;::::0;2438:21:::1;::::0;2462:15;;2513:17;;2438:21;2559:54;2438:21;2559:54;2513:17;2462:15;2559:54:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2540:73;;;2631:7;2623:43;;;::::0;-1:-1:-1;;;2623:43:32;;6197:2:33;2623:43:32::1;::::0;::::1;6179:21:33::0;6236:2;6216:18;;;6209:30;-1:-1:-1;;;6255:18:33;;;6248:54;6319:18;;2623:43:32::1;5995:348:33::0;2623:43:32::1;2696:1;2676:17;:21:::0;;;2712:42:::1;::::0;2738:15;;-1:-1:-1;;;;;2712:42:32;::::1;::::0;::::1;::::0;2696:1;2712:42:::1;2428:333;;;2547:20:9::0;1787:1;3053:7;:22;2873:209;2547:20;2386:375:32:o;3763:222:8:-;-1:-1:-1;;;;;1898:6:8;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:8;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:8;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:8;;1963:87;;;;-1:-1:-1;;;1963:87:8;;;;;;;:::i;:::-;3880:36:::1;3898:17;3880;:36::i;:::-;3926:52;3948:17;3967:4;3973;3926:21;:52::i;3006:131::-:0;3084:7;2324:4;-1:-1:-1;;;;;2333:6:8;2316:23;;2308:92;;;;-1:-1:-1;;;2308:92:8;;6550:2:33;2308:92:8;;;6532:21:33;6589:2;6569:18;;;6562:30;6628:34;6608:18;;;6601:62;-1:-1:-1;;;6679:18:33;;;6672:54;6743:19;;2308:92:8;6348:420:33;2308:92:8;-1:-1:-1;;;;;;;;;;;;3006:131:8;:::o;1862:518:32:-;1398:13;;1386:9;:25;;1378:90;;;;-1:-1:-1;;;1378:90:32;;6975:2:33;1378:90:32;;;6957:21:33;7014:2;6994:18;;;6987:30;7053:34;7033:18;;;7026:62;-1:-1:-1;;;7104:18:33;;;7097:51;7165:19;;1378:90:32;6773:417:33;1378:90:32;2021:31:::1;2075:13;2089:14;2104;2119:18;2055:83;;;;;:::i;:::-;7420:25:33::0;;;7476:2;7461:18;;7454:34;;;;7519:2;7504:18;;7497:34;7574:14;7567:22;7562:2;7547:18;;7540:50;7407:3;7392:19;2055:83:32::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;2169:11:32::1;::::0;;2148:33:::1;::::0;;;:20:::1;:33;::::0;;;;:60;;-1:-1:-1;;;;;;2148:60:32::1;-1:-1:-1::0;;;;;2148:60:32;::::1;;::::0;;2218:13;;2148:60;;-1:-1:-1;2218:13:32::1;::::0;::::1;:::i;:::-;;;;;;2262:9;2241:17;;:30;;;;;;;:::i;:::-;;;;;;;;2342:14;2327:13;2309:15;-1:-1:-1::0;;;;;2286:87:32::1;;2358:14;2286:87;;;;1036:25:33::0;;1024:2;1009:18;;890:177;2286:87:32::1;;;;;;;;2011:369;1862:518:::0;;;;:::o;1770:151:0:-;1860:7;1886:18;;;:12;:18;;;;;:28;;1908:5;1886:21;:28::i;:::-;1879:35;1770:151;-1:-1:-1;;;1770:151:0:o;3203:145:1:-;3289:4;3312:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;3312:29:1;;;;;;;;;;;;;;;3203:145::o;2791:174:32:-;831:29;2802:16:1;2813:4;2802:10;:16::i;:::-;2883:13:32::1;:28:::0;;;2926:32:::1;::::0;2899:12;;2926:32:::1;::::0;;;::::1;2791:174:::0;;:::o;2089:140:0:-;2169:7;2195:18;;;:12;:18;;;;;:27;;:25;:27::i;5558:147:1:-;4782:7;4808:12;;;:6;:12;;;;;:22;;;2802:16;2813:4;2802:10;:16::i;:::-;5672:26:::1;5684:4;5690:7;5672:11;:26::i;1491:249:32:-:0;3268:19:7;3291:13;;;;;;3290:14;;3336:34;;;;-1:-1:-1;3354:12:7;;3369:1;3354:12;;;;:16;3336:34;3335:108;;;-1:-1:-1;3415:4:7;1476:19:10;:23;;;3376:66:7;;-1:-1:-1;3425:12:7;;;;;:17;3376:66;3314:201;;;;-1:-1:-1;;;3314:201:7;;8205:2:33;3314:201:7;;;8187:21:33;8244:2;8224:18;;;8217:30;8283:34;8263:18;;;8256:62;-1:-1:-1;;;8334:18:33;;;8327:44;8388:19;;3314:201:7;8003:410:33;3314:201:7;3525:12;:16;;-1:-1:-1;;3525:16:7;3540:1;3525:16;;;3551:65;;;;3585:13;:20;;-1:-1:-1;;3585:20:7;;;;;3551:65;1586:13:32::1;:28:::0;;;1624:15:::1;:32:::0;;-1:-1:-1;;;;;;1624:32:32::1;-1:-1:-1::0;;;;;1624:32:32;::::1;;::::0;;-1:-1:-1;1666:11:32::1;:15:::0;;;1691:42:::1;::::0;1722:10:::1;1691;:42::i;:::-;3640:14:7::0;3636:99;;;3686:5;3670:21;;-1:-1:-1;;3670:21:7;;;3710:14;;-1:-1:-1;8570:36:33;;3710:14:7;;8558:2:33;8543:18;3710:14:7;;;;;;;3258:483;1491:249:32;;:::o;2903:213:1:-;2988:4;-1:-1:-1;;;;;;3011:58:1;;-1:-1:-1;;;3011:58:1;;:98;;-1:-1:-1;;;;;;;;;;1168:51:14;;;3073:36:1;1060:166:14;3642:103:1;3708:30;3719:4;929:10:11;3708::1;:30::i;2317:166:0:-;2404:31;2421:4;2427:7;2404:16;:31::i;:::-;2445:18;;;;:12;:18;;;;;:31;;2468:7;2445:22;:31::i;2572:171::-;2660:32;2678:4;2684:7;2660:17;:32::i;:::-;2702:18;;;;:12;:18;;;;;:34;;2728:7;2702:25;:34::i;1563:151:5:-;-1:-1:-1;;;;;;;;;;;1642:65:5;-1:-1:-1;;;;;1642:65:5;;1563:151::o;1746:85:32:-;2369:4:1;2802:16;2369:4;2802:10;:16::i;2938:974:5:-;951:66;3384:59;;;3380:526;;;3459:37;3478:17;3459:18;:37::i;3380:526::-;3560:17;-1:-1:-1;;;;;3531:61:5;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3531:63:5;;;;;;;;-1:-1:-1;;3531:63:5;;;;;;;;;;;;:::i;:::-;;;3527:302;;3758:56;;-1:-1:-1;;;3758:56:5;;9008:2:33;3758:56:5;;;8990:21:33;9047:2;9027:18;;;9020:30;9086:34;9066:18;;;9059:62;-1:-1:-1;;;9137:18:33;;;9130:44;9191:19;;3758:56:5;8806:410:33;3527:302:5;-1:-1:-1;;;;;;;;;;;3644:28:5;;3636:82;;;;-1:-1:-1;;;3636:82:5;;9423:2:33;3636:82:5;;;9405:21:33;9462:2;9442:18;;;9435:30;9501:34;9481:18;;;9474:62;-1:-1:-1;;;9552:18:33;;;9545:39;9601:19;;3636:82:5;9221:405:33;3636:82:5;3595:138;3842:53;3860:17;3879:4;3885:9;3842:17;:53::i;2580:287:9:-;1830:1;2712:7;;:19;2704:63;;;;-1:-1:-1;;;2704:63:9;;9833:2:33;2704:63:9;;;9815:21:33;9872:2;9852:18;;;9845:30;9911:33;9891:18;;;9884:61;9962:18;;2704:63:9;9631:355:33;2704:63:9;1830:1;2842:7;:18;2580:287::o;9566:156:17:-;9640:7;9690:22;9694:3;9706:5;9690:3;:22::i;9109:115::-;9172:7;9198:19;9206:3;4548:18;;4466:107;4026:501:1;4114:22;4122:4;4128:7;4114;:22::i;:::-;4109:412;;4297:39;4328:7;4297:30;:39::i;:::-;4407:49;4446:4;4453:2;4407:30;:49::i;:::-;4204:274;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4204:274:1;;;;;;;;;;-1:-1:-1;;;4152:358:1;;;;;;;:::i;7791:233::-;7874:22;7882:4;7888:7;7874;:22::i;:::-;7869:149;;7912:12;;;;:6;:12;;;;;;;;-1:-1:-1;;;;;7912:29:1;;;;;;;;;:36;;-1:-1:-1;;7912:36:1;7944:4;7912:36;;;7994:12;929:10:11;;850:96;7994:12:1;-1:-1:-1;;;;;7967:40:1;7985:7;-1:-1:-1;;;;;7967:40:1;7979:4;7967:40;;;;;;;;;;7791:233;;:::o;8308:150:17:-;8378:4;8401:50;8406:3;-1:-1:-1;;;;;8426:23:17;;8401:4;:50::i;8195:234:1:-;8278:22;8286:4;8292:7;8278;:22::i;:::-;8274:149;;;8348:5;8316:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;8316:29:1;;;;;;;;;;:37;;-1:-1:-1;;8316:37:1;;;8372:40;929:10:11;;8316:12:1;;8372:40;;8348:5;8372:40;8195:234;;:::o;8626:156:17:-;8699:4;8722:53;8730:3;-1:-1:-1;;;;;8750:23:17;;8722:7;:53::i;1805:281:5:-;-1:-1:-1;;;;;1476:19:10;;;1878:106:5;;;;-1:-1:-1;;;1878:106:5;;11666:2:33;1878:106:5;;;11648:21:33;11705:2;11685:18;;;11678:30;11744:34;11724:18;;;11717:62;-1:-1:-1;;;11795:18:33;;;11788:43;11848:19;;1878:106:5;11464:409:33;1878:106:5;-1:-1:-1;;;;;;;;;;;1994:85:5;;-1:-1:-1;;;;;;1994:85:5;-1:-1:-1;;;;;1994:85:5;;;;;;;;;;1805:281::o;2478:288::-;2616:29;2627:17;2616:10;:29::i;:::-;2673:1;2659:4;:11;:15;:28;;;;2678:9;2659:28;2655:105;;;2703:46;2725:17;2744:4;2703:21;:46::i;:::-;;2478:288;;;:::o;4915:118:17:-;4982:7;5008:3;:11;;5020:5;5008:18;;;;;;;;:::i;:::-;;;;;;;;;5001:25;;4915:118;;;;:::o;2146:149:13:-;2204:13;2236:52;-1:-1:-1;;;;;2248:22:13;;333:2;1557:437;1632:13;1657:19;1689:10;1693:6;1689:1;:10;:::i;:::-;:14;;1702:1;1689:14;:::i;:::-;1679:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1679:25:13;;1657:47;;-1:-1:-1;;;1714:6:13;1721:1;1714:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1714:15:13;;;;;;;;;-1:-1:-1;;;1739:6:13;1746:1;1739:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1739:15:13;;;;;;;;-1:-1:-1;1769:9:13;1781:10;1785:6;1781:1;:10;:::i;:::-;:14;;1794:1;1781:14;:::i;:::-;1769:26;;1764:128;1801:1;1797;:5;1764:128;;;-1:-1:-1;;;1844:5:13;1852:3;1844:11;1835:21;;;;;;;:::i;:::-;;;;1823:6;1830:1;1823:9;;;;;;;;:::i;:::-;;;;:33;-1:-1:-1;;;;;1823:33:13;;;;;;;;-1:-1:-1;1880:1:13;1870:11;;;;;1804:3;;;:::i;:::-;;;1764:128;;;-1:-1:-1;1909:10:13;;1901:55;;;;-1:-1:-1;;;1901:55:13;;12526:2:33;1901:55:13;;;12508:21:33;;;12545:18;;;12538:30;12604:34;12584:18;;;12577:62;12656:18;;1901:55:13;12324:356:33;2217:404:17;2280:4;4354:19;;;:12;;;:19;;;;;;2296:319;;-1:-1:-1;2338:23:17;;;;;;;;:11;:23;;;;;;;;;;;;;2518:18;;2496:19;;;:12;;;:19;;;;;;:40;;;;2550:11;;2296:319;-1:-1:-1;2599:5:17;2592:12;;2789:1388;2855:4;2992:19;;;:12;;;:19;;;;;;3026:15;;3022:1149;;3395:21;3419:14;3432:1;3419:10;:14;:::i;:::-;3467:18;;3395:38;;-1:-1:-1;3447:17:17;;3467:22;;3488:1;;3467:22;:::i;:::-;3447:42;;3521:13;3508:9;:26;3504:398;;3554:17;3574:3;:11;;3586:9;3574:22;;;;;;;;:::i;:::-;;;;;;;;;3554:42;;3725:9;3696:3;:11;;3708:13;3696:26;;;;;;;;:::i;:::-;;;;;;;;;;;;:38;;;;3808:23;;;:12;;;:23;;;;;:36;;;3504:398;3980:17;;:3;;:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;4072:3;:12;;:19;4085:5;4072:19;;;;;;;;;;;4065:26;;;4113:4;4106:11;;;;;;;3022:1149;4155:5;4148:12;;;;;2192:152:5;2258:37;2277:17;2258:18;:37::i;:::-;2310:27;;-1:-1:-1;;;;;2310:27:5;;;;;;;;2192:152;:::o;7088:455::-;7171:12;-1:-1:-1;;;;;1476:19:10;;;7195:88:5;;;;-1:-1:-1;;;7195:88:5;;13152:2:33;7195:88:5;;;13134:21:33;13191:2;13171:18;;;13164:30;13230:34;13210:18;;;13203:62;-1:-1:-1;;;13281:18:33;;;13274:36;13327:19;;7195:88:5;12950:402:33;7195:88:5;7354:12;7368:23;7395:6;-1:-1:-1;;;;;7395:19:5;7415:4;7395:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7353:67;;;;7437:99;7473:7;7482:10;7437:99;;;;;;;;;;;;;;;;;:35;:99::i;:::-;7430:106;7088:455;-1:-1:-1;;;;;7088:455:5:o;7438:295:10:-;7584:12;7612:7;7608:119;;;-1:-1:-1;7642:10:10;7635:17;;7608:119;7683:33;7691:10;7703:12;7898:17;;:21;7894:379;;8126:10;8120:17;8182:15;8169:10;8165:2;8161:19;8154:44;7894:379;8249:12;8242:20;;-1:-1:-1;;;8242:20:10;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;:::o;14:286:33:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:33;;209:43;;199:71;;266:1;263;256:12;705:180;764:6;817:2;805:9;796:7;792:23;788:32;785:52;;;833:1;830;823:12;785:52;-1:-1:-1;856:23:33;;705:180;-1:-1:-1;705:180:33:o;1072:173::-;1140:20;;-1:-1:-1;;;;;1189:31:33;;1179:42;;1169:70;;1235:1;1232;1225:12;1169:70;1072:173;;;:::o;1250:254::-;1318:6;1326;1379:2;1367:9;1358:7;1354:23;1350:32;1347:52;;;1395:1;1392;1385:12;1347:52;1431:9;1418:23;1408:33;;1460:38;1494:2;1483:9;1479:18;1460:38;:::i;:::-;1450:48;;1250:254;;;;;:::o;1509:186::-;1568:6;1621:2;1609:9;1600:7;1596:23;1592:32;1589:52;;;1637:1;1634;1627:12;1589:52;1660:29;1679:9;1660:29;:::i;1700:127::-;1761:10;1756:3;1752:20;1749:1;1742:31;1792:4;1789:1;1782:15;1816:4;1813:1;1806:15;1832:995;1909:6;1917;1970:2;1958:9;1949:7;1945:23;1941:32;1938:52;;;1986:1;1983;1976:12;1938:52;2009:29;2028:9;2009:29;:::i;:::-;1999:39;;2089:2;2078:9;2074:18;2061:32;2112:18;2153:2;2145:6;2142:14;2139:34;;;2169:1;2166;2159:12;2139:34;2207:6;2196:9;2192:22;2182:32;;2252:7;2245:4;2241:2;2237:13;2233:27;2223:55;;2274:1;2271;2264:12;2223:55;2310:2;2297:16;2332:2;2328;2325:10;2322:36;;;2338:18;;:::i;:::-;2413:2;2407:9;2381:2;2467:13;;-1:-1:-1;;2463:22:33;;;2487:2;2459:31;2455:40;2443:53;;;2511:18;;;2531:22;;;2508:46;2505:72;;;2557:18;;:::i;:::-;2597:10;2593:2;2586:22;2632:2;2624:6;2617:18;2672:7;2667:2;2662;2658;2654:11;2650:20;2647:33;2644:53;;;2693:1;2690;2683:12;2644:53;2749:2;2744;2740;2736:11;2731:2;2723:6;2719:15;2706:46;2794:1;2789:2;2784;2776:6;2772:15;2768:24;2761:35;2815:6;2805:16;;;;;;;1832:995;;;;;:::o;3014:478::-;3097:6;3105;3113;3121;3174:3;3162:9;3153:7;3149:23;3145:33;3142:53;;;3191:1;3188;3181:12;3142:53;3227:9;3214:23;3204:33;;3284:2;3273:9;3269:18;3256:32;3246:42;;3335:2;3324:9;3320:18;3307:32;3297:42;;3389:2;3378:9;3374:18;3361:32;3436:5;3429:13;3422:21;3415:5;3412:32;3402:60;;3458:1;3455;3448:12;3402:60;3014:478;;;;-1:-1:-1;3014:478:33;;-1:-1:-1;;3014:478:33:o;3497:248::-;3565:6;3573;3626:2;3614:9;3605:7;3601:23;3597:32;3594:52;;;3642:1;3639;3632:12;3594:52;-1:-1:-1;;3665:23:33;;;3735:2;3720:18;;;3707:32;;-1:-1:-1;3497:248:33:o;4959:408::-;5161:2;5143:21;;;5200:2;5180:18;;;5173:30;5239:34;5234:2;5219:18;;5212:62;-1:-1:-1;;;5305:2:33;5290:18;;5283:42;5357:3;5342:19;;4959:408::o;5372:::-;5574:2;5556:21;;;5613:2;5593:18;;;5586:30;5652:34;5647:2;5632:18;;5625:62;-1:-1:-1;;;5718:2:33;5703:18;;5696:42;5770:3;5755:19;;5372:408::o;7601:127::-;7662:10;7657:3;7653:20;7650:1;7643:31;7693:4;7690:1;7683:15;7717:4;7714:1;7707:15;7733:135;7772:3;7793:17;;;7790:43;;7813:18;;:::i;:::-;-1:-1:-1;7860:1:33;7849:13;;7733:135::o;7873:125::-;7938:9;;;7959:10;;;7956:36;;;7972:18;;:::i;8617:184::-;8687:6;8740:2;8728:9;8719:7;8715:23;8711:32;8708:52;;;8756:1;8753;8746:12;8708:52;-1:-1:-1;8779:16:33;;8617:184;-1:-1:-1;8617:184:33:o;9991:250::-;10076:1;10086:113;10100:6;10097:1;10094:13;10086:113;;;10176:11;;;10170:18;10157:11;;;10150:39;10122:2;10115:10;10086:113;;;-1:-1:-1;;10233:1:33;10215:16;;10208:27;9991:250::o;10246:812::-;-1:-1:-1;;;10652:3:33;10645:38;10627:3;10712:6;10706:13;10728:75;10796:6;10791:2;10786:3;10782:12;10775:4;10767:6;10763:17;10728:75;:::i;:::-;-1:-1:-1;;;10862:2:33;10822:16;;;10854:11;;;10847:40;10912:13;;10934:76;10912:13;10996:2;10988:11;;10981:4;10969:17;;10934:76;:::i;:::-;11030:17;11049:2;11026:26;;10246:812;-1:-1:-1;;;;10246:812:33:o;11063:396::-;11212:2;11201:9;11194:21;11175:4;11244:6;11238:13;11287:6;11282:2;11271:9;11267:18;11260:34;11303:79;11375:6;11370:2;11359:9;11355:18;11350:2;11342:6;11338:15;11303:79;:::i;:::-;11443:2;11422:15;-1:-1:-1;;11418:29:33;11403:45;;;;11450:2;11399:54;;11063:396;-1:-1:-1;;11063:396:33:o;11878:127::-;11939:10;11934:3;11930:20;11927:1;11920:31;11970:4;11967:1;11960:15;11994:4;11991:1;11984:15;12010:168;12083:9;;;12114;;12131:15;;;12125:22;;12111:37;12101:71;;12152:18;;:::i;12183:136::-;12222:3;12250:5;12240:39;;12259:18;;:::i;:::-;-1:-1:-1;;;12295:18:33;;12183:136::o;12685:128::-;12752:9;;;12773:11;;;12770:37;;;12787:18;;:::i;12818:127::-;12879:10;12874:3;12870:20;12867:1;12860:31;12910:4;12907:1;12900:15;12934:4;12931:1;12924:15;13357:287;13486:3;13524:6;13518:13;13540:66;13599:6;13594:3;13587:4;13579:6;13575:17;13540:66;:::i;:::-;13622:16;;;;;13357:287;-1:-1:-1;;13357:287:33:o"},"gasEstimates":{"creation":{"codeDepositCost":"2842600","executionCost":"infinite","totalCost":"infinite"},"external":{"CREATIONFEE_ROLE()":"327","DEFAULT_ADMIN_ROLE()":"284","PAYOUTADDRESS_ROLE()":"306","createFunding(uint256,uint256,uint256,bool)":"infinite","getAddress(uint256)":"2499","getRoleAdmin(bytes32)":"2512","getRoleMember(bytes32,uint256)":"infinite","getRoleMemberCount(bytes32)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"2699","initialize(uint256,address)":"infinite","proxiableUUID()":"infinite","renounceRole(bytes32,address)":"infinite","revokeRole(bytes32,address)":"infinite","s_contractBalance()":"2339","s_creationFee()":"2362","s_fundingId()":"2406","s_payoutAddress()":"2383","setCreationFee(uint256)":"infinite","setPayoutAddress(address)":"infinite","supportsInterface(bytes4)":"infinite","upgradeTo(address)":"infinite","upgradeToAndCall(address,bytes)":"infinite","withdraw()":"infinite"},"internal":{"_authorizeUpgrade(address)":"infinite"}},"methodIdentifiers":{"CREATIONFEE_ROLE()":"ddc490ef","DEFAULT_ADMIN_ROLE()":"a217fddf","PAYOUTADDRESS_ROLE()":"a465aa88","createFunding(uint256,uint256,uint256,bool)":"7c9c3c28","getAddress(uint256)":"b93f9b0a","getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","initialize(uint256,address)":"da35a26f","proxiableUUID()":"52d1902d","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","s_contractBalance()":"c5e97dd7","s_creationFee()":"9faeebd0","s_fundingId()":"5926a6b4","s_payoutAddress()":"1d4718e6","setCreationFee(uint256)":"b7d86225","setPayoutAddress(address)":"33ea51a8","supportsInterface(bytes4)":"01ffc9a7","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286","withdraw()":"3ccfd60b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newCreationFee\",\"type\":\"uint256\"}],\"name\":\"CreationFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalFunding\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"FundingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPayoutAddress\",\"type\":\"address\"}],\"name\":\"PayoutAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREATIONFEE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAYOUTADDRESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalFunding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isGroupWithdrawal\",\"type\":\"bool\"}],\"name\":\"createFunding\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundingId\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_creationFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payoutAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_creationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_fundingId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_payoutAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_creationFee\",\"type\":\"uint256\"}],\"name\":\"setCreationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutAddress\",\"type\":\"address\"}],\"name\":\"setPayoutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PGFFactory.sol\":\"PGFFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":75},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4807db844a856813048b5af81a764fdd25a0ae8876a3132593e8d21ddc6b607c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/FundingContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n\\nerror FundingContract__TransferFailed();\\nerror FundingContract__NotEnoughETH();\\nerror FundingContract__NotGroupFunding();\\n\\ncontract FundingContract is ERC721, Ownable {\\n\\n    using SafeMath for uint256;\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n    Counters.Counter private _withdrawers;\\n\\n    uint256 private s_totalAmount;\\n    uint256 private s_withdrawalFee;\\n    uint256 private s_vestingPeriod;\\n    bool private _isGroupWithdrawal;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] s_funders;\\n\\n    mapping(uint256 => mapping(address => bool)) private s_requestForWithdrawal; \\n\\n    \\n\\n    modifier onlyGroupFunding() {\\n        if(!_isGroupWithdrawal){\\n            revert FundingContract__NotGroupFunding();\\n        }\\n       _;\\n    }\\n\\n    constructor(\\n        uint256 totalFunding,\\n        uint256 withdrawalFee,\\n        uint256 vestingPeriod,\\n        bool isGroupWithdrawal\\n    ) ERC721('FundingContractToken', 'FCT'){\\n\\n        s_totalAmount = totalFunding;\\n        s_withdrawalFee = withdrawalFee;\\n        s_vestingPeriod = vestingPeriod;\\n        _isGroupWithdrawal = isGroupWithdrawal;\\n    }\\n\\n\\n\\n    function depositFunds() public payable{\\n        \\n        uint256 minFundingAmount = getMinimumFundingAmount();\\n        uint256 currentTokenId = _tokenIds.current();\\n\\n        if(msg.value <= minFundingAmount){\\n            revert FundingContract__NotEnoughETH();\\n        }\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n        s_funders.push(msg.sender);\\n        _safeMint(msg.sender, currentTokenId);\\n        _tokenIds.increment();\\n        \\n\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory){\\n        /**\\n         *  TODO \\n         * \\n         */\\n    }\\n\\n    function claim() public {\\n        /**\\n         * TODO\\n         * \\n         */\\n    }\\n\\n    function requestForWithdrawal(uint256 tokenId) public onlyGroupFunding {\\n        s_requestForWithdrawal[tokenId][msg.sender] = true;\\n        _withdrawers.increment();\\n    }\\n\\n    // Receive any funds sent to the contract\\n    receive() external payable {}\\n\\n    function withdrawalCheck() public onlyGroupFunding returns(bool){\\n        uint256 numberOfWithdrawers = _withdrawers.current();\\n        uint256 withdrawalLimit = s_funders.length.mul(60).div(100);\\n        if(numberOfWithdrawers >= withdrawalLimit){\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n\\n\\n    function withdrawFunds() public onlyOwner{\\n        if(_isGroupWithdrawal){\\n            require(withdrawalCheck(), 'There is no majority approval to withdraw');\\n        }\\n        uint256 amount = address(this).balance;\\n        (bool success, ) = payable(msg.sender).call{value:amount}(\\\"\\\");\\n        if(!success){\\n            revert FundingContract__TransferFailed();\\n        }\\n    }\\n\\n    function getMinimumFundingAmount() public view returns(uint256){\\n        return s_totalAmount.div(s_vestingPeriod);\\n    }\\n\\n    function getTotalAmount() public view returns(uint256){\\n        return s_totalAmount;\\n    }\\n\\n\\n    function getWithdrawalFee() public view returns(uint256){\\n        return s_withdrawalFee;\\n    }\\n\\n    function getVestingPeriod() public view returns(uint256){\\n        return s_vestingPeriod;\\n    }\\n\\n    function getIsGroupWithdrawal() public view returns(bool){\\n        return _isGroupWithdrawal;\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns(uint256){\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getFunder(uint256 index) public view returns(address){\\n        return s_funders[index];\\n    }\\n\\n\\n\\n}\",\"keccak256\":\"0xede618187e17057a09a894725311c2e849f881a415bc1e1377c16d53a7ce0b1d\",\"license\":\"MIT\"},\"contracts/PGFFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./FundingContract.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\ncontract PGFFactory is AccessControlEnumerableUpgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable{\\n\\n    // State Variable\\n    uint256 public s_creationFee;\\n    address public s_payoutAddress;\\n    uint256 public s_fundingId;\\n    mapping(uint => address) private s_fundingIdToAddress;\\n    uint256 public s_contractBalance;\\n    \\n    // Constant variables\\n    bytes32 public constant PAYOUTADDRESS_ROLE = keccak256(\\\"PAYOUTADDRESS_ROLE\\\");\\n    bytes32 public constant CREATIONFEE_ROLE = keccak256(\\\"CREATIONFEE_ROLE\\\");\\n\\n    // Events\\n    event FundingCreated (\\n        address indexed contractAddress,\\n        uint256 indexed totalFunding,\\n        uint256 indexed vestingPeriod,\\n        uint256 withdrawalFee\\n    );\\n\\n    event Withdrawed (\\n        address indexed payoutAddress,\\n        uint256 indexed amount\\n    );\\n\\n    event CreationFeeChanged (\\n        uint256 indexed newCreationFee\\n    );\\n\\n    event PayoutAddressChanged (\\n        address indexed newPayoutAddress\\n    );\\n\\n\\n    // Modifiers\\n    modifier isEnoughEther() {\\n        require(msg.value>= s_creationFee,\\\"Ether sent should be equal or more than creation fees\\\");\\n        _;\\n    }\\n\\n   function initialize(uint256 _creationFee, address _payoutAddress) initializer public {\\n        s_creationFee = _creationFee;\\n        s_payoutAddress = _payoutAddress;\\n        s_fundingId = 0;\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n\\n    // External Function\\n    function createFunding(uint256 _totalFunding, uint256 _withdrawalFee, uint256 _vestingPeriod,bool _isGroupWithdrawal) external payable isEnoughEther {\\n        FundingContract fundingContract = new FundingContract(_totalFunding,_withdrawalFee,_vestingPeriod,_isGroupWithdrawal);\\n        s_fundingIdToAddress[s_fundingId] = address(fundingContract);\\n        s_fundingId++;\\n        s_contractBalance += msg.value;\\n        emit FundingCreated(address(fundingContract), _totalFunding, _vestingPeriod, _withdrawalFee);\\n    }\\n\\n    function withdraw() external nonReentrant {\\n        address payoutAddress = s_payoutAddress;\\n        uint256 contractBalance = s_contractBalance;\\n        (bool success, ) = payable(payoutAddress).call{value:contractBalance}(\\\"\\\");\\n        require(success,\\\"Withdraw not successfull\\\");\\n        s_contractBalance = 0;\\n        emit Withdrawed(payoutAddress, contractBalance);\\n    }\\n\\n    // Setter Functions\\n    function setCreationFee(uint256 _creationFee) external onlyRole(CREATIONFEE_ROLE) {\\n        s_creationFee = _creationFee;\\n        emit CreationFeeChanged(_creationFee);\\n    }\\n\\n    function setPayoutAddress(address _payoutAddress) external onlyRole(PAYOUTADDRESS_ROLE) {\\n        require(_payoutAddress != address(0),\\\"Address cant be zero\\\");\\n        s_payoutAddress = _payoutAddress;\\n        emit PayoutAddressChanged(_payoutAddress);\\n    }\\n\\n    // View Functions\\n    function getAddress(uint256 _fundingId) external view returns(address){\\n        return s_fundingIdToAddress[_fundingId];\\n    }\\n}\",\"keccak256\":\"0xb4ab019868284fff3d24f86926a7921fab40083264966b81fe2fd293ab64c75e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":974,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":977,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1670,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1949,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":184,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"_roles","offset":0,"slot":"101","type":"t_mapping(t_bytes32,t_struct(RoleData)179_storage)"},{"astId":479,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"},{"astId":33,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"_roleMembers","offset":0,"slot":"151","type":"t_mapping(t_bytes32,t_struct(AddressSet)3153_storage)"},{"astId":143,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"},{"astId":1286,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"_status","offset":0,"slot":"201","type":"t_uint256"},{"astId":1344,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"__gap","offset":0,"slot":"202","type":"t_array(t_uint256)49_storage"},{"astId":956,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"__gap","offset":0,"slot":"251","type":"t_array(t_uint256)50_storage"},{"astId":1271,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"__gap","offset":0,"slot":"301","type":"t_array(t_uint256)50_storage"},{"astId":6814,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"s_creationFee","offset":0,"slot":"351","type":"t_uint256"},{"astId":6816,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"s_payoutAddress","offset":0,"slot":"352","type":"t_address"},{"astId":6818,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"s_fundingId","offset":0,"slot":"353","type":"t_uint256"},{"astId":6822,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"s_fundingIdToAddress","offset":0,"slot":"354","type":"t_mapping(t_uint256,t_address)"},{"astId":6824,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"s_contractBalance","offset":0,"slot":"355","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(AddressSet)3153_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)3153_storage"},"t_mapping(t_bytes32,t_struct(RoleData)179_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)179_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_struct(AddressSet)3153_storage":{"encoding":"inplace","label":"struct EnumerableSetUpgradeable.AddressSet","members":[{"astId":3152,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)2838_storage"}],"numberOfBytes":"64"},"t_struct(RoleData)179_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":176,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":178,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Set)2838_storage":{"encoding":"inplace","label":"struct EnumerableSetUpgradeable.Set","members":[{"astId":2833,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":2837,"contract":"contracts/PGFFactory.sol:PGFFactory","label":"_indexes","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}